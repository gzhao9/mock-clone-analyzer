{
  "detectedMockClones": {
    "com.microsoft.kiota.serialization.SerializationWriter": [
      {
        "mockedClass": "com.microsoft.kiota.serialization.SerializationWriter",
        "packageName": "com.microsoft.kiota.serialization",
        "testCaseCount": 2,
        "sequenceCount": 2,
        "sharedStatementLineCount": 1,
        "locReduced": 2,
        "mockObjectCount": 2,
        "sharedStatements": [
          "when(com.microsoft.kiota.serialization.SerializationWriter.getSerializedContent()).thenReturn(java.io.ByteArrayInputStream)"
        ],
        "sequences": [
          {
            "mockObjectId": 28,
            "mockRole": "mock",
            "variableName": "mockSerializationWriter",
            "variableType": "var",
            "mockedClass": "com.microsoft.kiota.serialization.SerializationWriter",
            "packageName": "com.microsoft.kiota.serialization",
            "filePath": "C:\\Java_projects\\Microsoft\\kiota-java\\components\\abstractions\\src\\test\\java\\com\\microsoft\\kiota\\serialization\\SerializationHelpersTest.java",
            "testMethodName": "serializesObject",
            "isReuseableMock": false,
            "overlapLines": [
              49
            ],
            "testMethodRawCode": "@Test\r\nvoid serializesObject() throws IOException {\r\n    final var mockSerializationWriter = mock(SerializationWriter.class);\r\n    when(mockSerializationWriter.getSerializedContent()).thenReturn(new ByteArrayInputStream(\"{'id':'123'}\".getBytes(_charset)));\r\n    final var mockSerializationWriterFactory = mock(SerializationWriterFactory.class);\r\n    when(mockSerializationWriterFactory.getSerializationWriter(_jsonContentType)).thenReturn(mockSerializationWriter);\r\n    SerializationWriterFactoryRegistry.defaultInstance.contentTypeAssociatedFactories.put(_jsonContentType, mockSerializationWriterFactory);\r\n    final var result = KiotaSerialization.serializeAsString(_jsonContentType, new TestEntity() {\r\n\r\n        {\r\n            setId(\"123\");\r\n        }\r\n    });\r\n    assertEquals(\"{'id':'123'}\", result);\r\n    verify(mockSerializationWriter, times(1)).writeObjectValue(eq(\"\"), any(Parsable.class));\r\n}",
            "shareableMockLines": {},
            "testMockLines": {
              "48": "final var mockSerializationWriter = mock(SerializationWriter.class);",
              "49": "when(mockSerializationWriter.getSerializedContent()).thenReturn(new ByteArrayInputStream(\"{'id':'123'}\".getBytes(_charset)));",
              "65": "verify(mockSerializationWriter, times(1)).writeObjectValue(eq(\"\"), any(Parsable.class));"
            },
            "abstractedStatement": {
              "49": "when(com.microsoft.kiota.serialization.SerializationWriter.getSerializedContent()).thenReturn(java.io.ByteArrayInputStream)"
            },
            "rawStatementInfo": {
              "48": {
                "code": "final var mockSerializationWriter = mock(SerializationWriter.class);",
                "line": 48,
                "type": "METHOD_MOCK_CREATION",
                "locate": "Test Case",
                "abstractedStatement": "",
                "isMockRelated": true,
                "isShareable": false,
                "locationContext": {
                  "methodName": "serializesObject",
                  "methodAnnotations": [
                    "Test"
                  ],
                  "methodRawCode": "@Test\r\nvoid serializesObject() throws IOException {\r\n    final var mockSerializationWriter = mock(SerializationWriter.class);\r\n    when(mockSerializationWriter.getSerializedContent()).thenReturn(new ByteArrayInputStream(\"{'id':'123'}\".getBytes(_charset)));\r\n    final var mockSerializationWriterFactory = mock(SerializationWriterFactory.class);\r\n    when(mockSerializationWriterFactory.getSerializationWriter(_jsonContentType)).thenReturn(mockSerializationWriter);\r\n    SerializationWriterFactoryRegistry.defaultInstance.contentTypeAssociatedFactories.put(_jsonContentType, mockSerializationWriterFactory);\r\n    final var result = KiotaSerialization.serializeAsString(_jsonContentType, new TestEntity() {\r\n\r\n        {\r\n            setId(\"123\");\r\n        }\r\n    });\r\n    assertEquals(\"{'id':'123'}\", result);\r\n    verify(mockSerializationWriter, times(1)).writeObjectValue(eq(\"\"), any(Parsable.class));\r\n}"
                }
              },
              "49": {
                "code": "when(mockSerializationWriter.getSerializedContent()).thenReturn(new ByteArrayInputStream(\"{'id':'123'}\".getBytes(_charset)));",
                "line": 49,
                "type": "STUBBING",
                "locate": "Test Case",
                "abstractedStatement": "when(com.microsoft.kiota.serialization.SerializationWriter.getSerializedContent()).thenReturn(java.io.ByteArrayInputStream)",
                "isMockRelated": true,
                "isShareable": false,
                "locationContext": {
                  "methodName": "serializesObject",
                  "methodAnnotations": [
                    "Test"
                  ],
                  "methodRawCode": "@Test\r\nvoid serializesObject() throws IOException {\r\n    final var mockSerializationWriter = mock(SerializationWriter.class);\r\n    when(mockSerializationWriter.getSerializedContent()).thenReturn(new ByteArrayInputStream(\"{'id':'123'}\".getBytes(_charset)));\r\n    final var mockSerializationWriterFactory = mock(SerializationWriterFactory.class);\r\n    when(mockSerializationWriterFactory.getSerializationWriter(_jsonContentType)).thenReturn(mockSerializationWriter);\r\n    SerializationWriterFactoryRegistry.defaultInstance.contentTypeAssociatedFactories.put(_jsonContentType, mockSerializationWriterFactory);\r\n    final var result = KiotaSerialization.serializeAsString(_jsonContentType, new TestEntity() {\r\n\r\n        {\r\n            setId(\"123\");\r\n        }\r\n    });\r\n    assertEquals(\"{'id':'123'}\", result);\r\n    verify(mockSerializationWriter, times(1)).writeObjectValue(eq(\"\"), any(Parsable.class));\r\n}"
                }
              },
              "65": {
                "code": "verify(mockSerializationWriter, times(1)).writeObjectValue(eq(\"\"), any(Parsable.class));",
                "line": 65,
                "type": "VERIFICATION",
                "locate": "Test Case",
                "abstractedStatement": "",
                "isMockRelated": true,
                "isShareable": false,
                "locationContext": {
                  "methodName": "serializesObject",
                  "methodAnnotations": [
                    "Test"
                  ],
                  "methodRawCode": "@Test\r\nvoid serializesObject() throws IOException {\r\n    final var mockSerializationWriter = mock(SerializationWriter.class);\r\n    when(mockSerializationWriter.getSerializedContent()).thenReturn(new ByteArrayInputStream(\"{'id':'123'}\".getBytes(_charset)));\r\n    final var mockSerializationWriterFactory = mock(SerializationWriterFactory.class);\r\n    when(mockSerializationWriterFactory.getSerializationWriter(_jsonContentType)).thenReturn(mockSerializationWriter);\r\n    SerializationWriterFactoryRegistry.defaultInstance.contentTypeAssociatedFactories.put(_jsonContentType, mockSerializationWriterFactory);\r\n    final var result = KiotaSerialization.serializeAsString(_jsonContentType, new TestEntity() {\r\n\r\n        {\r\n            setId(\"123\");\r\n        }\r\n    });\r\n    assertEquals(\"{'id':'123'}\", result);\r\n    verify(mockSerializationWriter, times(1)).writeObjectValue(eq(\"\"), any(Parsable.class));\r\n}"
                }
              }
            }
          },
          {
            "mockObjectId": 30,
            "mockRole": "mock",
            "variableName": "mockSerializationWriter",
            "variableType": "var",
            "mockedClass": "com.microsoft.kiota.serialization.SerializationWriter",
            "packageName": "com.microsoft.kiota.serialization",
            "filePath": "C:\\Java_projects\\Microsoft\\kiota-java\\components\\abstractions\\src\\test\\java\\com\\microsoft\\kiota\\serialization\\SerializationHelpersTest.java",
            "testMethodName": "serializesObjectCollection",
            "isReuseableMock": false,
            "overlapLines": [
              71
            ],
            "testMethodRawCode": "@Test\r\nvoid serializesObjectCollection() throws IOException {\r\n    final var mockSerializationWriter = mock(SerializationWriter.class);\r\n    when(mockSerializationWriter.getSerializedContent()).thenReturn(new ByteArrayInputStream(\"[{'id':'123'}]\".getBytes(_charset)));\r\n    final var mockSerializationWriterFactory = mock(SerializationWriterFactory.class);\r\n    when(mockSerializationWriterFactory.getSerializationWriter(_jsonContentType)).thenReturn(mockSerializationWriter);\r\n    SerializationWriterFactoryRegistry.defaultInstance.contentTypeAssociatedFactories.put(_jsonContentType, mockSerializationWriterFactory);\r\n    final var result = KiotaSerialization.serializeAsString(_jsonContentType, new ArrayList<>() {\r\n\r\n        {\r\n            add(new TestEntity() {\r\n\r\n                {\r\n                    setId(\"123\");\r\n                }\r\n            });\r\n        }\r\n    });\r\n    assertEquals(\"[{'id':'123'}]\", result);\r\n    verify(mockSerializationWriter, times(1)).writeCollectionOfObjectValues(eq(\"\"), any());\r\n}",
            "shareableMockLines": {},
            "testMockLines": {
              "70": "final var mockSerializationWriter = mock(SerializationWriter.class);",
              "71": "when(mockSerializationWriter.getSerializedContent()).thenReturn(new ByteArrayInputStream(\"[{'id':'123'}]\".getBytes(_charset)));",
              "92": "verify(mockSerializationWriter, times(1)).writeCollectionOfObjectValues(eq(\"\"), any());"
            },
            "abstractedStatement": {
              "71": "when(com.microsoft.kiota.serialization.SerializationWriter.getSerializedContent()).thenReturn(java.io.ByteArrayInputStream)"
            },
            "rawStatementInfo": {
              "70": {
                "code": "final var mockSerializationWriter = mock(SerializationWriter.class);",
                "line": 70,
                "type": "METHOD_MOCK_CREATION",
                "locate": "Test Case",
                "abstractedStatement": "",
                "isMockRelated": true,
                "isShareable": false,
                "locationContext": {
                  "methodName": "serializesObjectCollection",
                  "methodAnnotations": [
                    "Test"
                  ],
                  "methodRawCode": "@Test\r\nvoid serializesObjectCollection() throws IOException {\r\n    final var mockSerializationWriter = mock(SerializationWriter.class);\r\n    when(mockSerializationWriter.getSerializedContent()).thenReturn(new ByteArrayInputStream(\"[{'id':'123'}]\".getBytes(_charset)));\r\n    final var mockSerializationWriterFactory = mock(SerializationWriterFactory.class);\r\n    when(mockSerializationWriterFactory.getSerializationWriter(_jsonContentType)).thenReturn(mockSerializationWriter);\r\n    SerializationWriterFactoryRegistry.defaultInstance.contentTypeAssociatedFactories.put(_jsonContentType, mockSerializationWriterFactory);\r\n    final var result = KiotaSerialization.serializeAsString(_jsonContentType, new ArrayList<>() {\r\n\r\n        {\r\n            add(new TestEntity() {\r\n\r\n                {\r\n                    setId(\"123\");\r\n                }\r\n            });\r\n        }\r\n    });\r\n    assertEquals(\"[{'id':'123'}]\", result);\r\n    verify(mockSerializationWriter, times(1)).writeCollectionOfObjectValues(eq(\"\"), any());\r\n}"
                }
              },
              "71": {
                "code": "when(mockSerializationWriter.getSerializedContent()).thenReturn(new ByteArrayInputStream(\"[{'id':'123'}]\".getBytes(_charset)));",
                "line": 71,
                "type": "STUBBING",
                "locate": "Test Case",
                "abstractedStatement": "when(com.microsoft.kiota.serialization.SerializationWriter.getSerializedContent()).thenReturn(java.io.ByteArrayInputStream)",
                "isMockRelated": true,
                "isShareable": false,
                "locationContext": {
                  "methodName": "serializesObjectCollection",
                  "methodAnnotations": [
                    "Test"
                  ],
                  "methodRawCode": "@Test\r\nvoid serializesObjectCollection() throws IOException {\r\n    final var mockSerializationWriter = mock(SerializationWriter.class);\r\n    when(mockSerializationWriter.getSerializedContent()).thenReturn(new ByteArrayInputStream(\"[{'id':'123'}]\".getBytes(_charset)));\r\n    final var mockSerializationWriterFactory = mock(SerializationWriterFactory.class);\r\n    when(mockSerializationWriterFactory.getSerializationWriter(_jsonContentType)).thenReturn(mockSerializationWriter);\r\n    SerializationWriterFactoryRegistry.defaultInstance.contentTypeAssociatedFactories.put(_jsonContentType, mockSerializationWriterFactory);\r\n    final var result = KiotaSerialization.serializeAsString(_jsonContentType, new ArrayList<>() {\r\n\r\n        {\r\n            add(new TestEntity() {\r\n\r\n                {\r\n                    setId(\"123\");\r\n                }\r\n            });\r\n        }\r\n    });\r\n    assertEquals(\"[{'id':'123'}]\", result);\r\n    verify(mockSerializationWriter, times(1)).writeCollectionOfObjectValues(eq(\"\"), any());\r\n}"
                }
              },
              "92": {
                "code": "verify(mockSerializationWriter, times(1)).writeCollectionOfObjectValues(eq(\"\"), any());",
                "line": 92,
                "type": "VERIFICATION",
                "locate": "Test Case",
                "abstractedStatement": "",
                "isMockRelated": true,
                "isShareable": false,
                "locationContext": {
                  "methodName": "serializesObjectCollection",
                  "methodAnnotations": [
                    "Test"
                  ],
                  "methodRawCode": "@Test\r\nvoid serializesObjectCollection() throws IOException {\r\n    final var mockSerializationWriter = mock(SerializationWriter.class);\r\n    when(mockSerializationWriter.getSerializedContent()).thenReturn(new ByteArrayInputStream(\"[{'id':'123'}]\".getBytes(_charset)));\r\n    final var mockSerializationWriterFactory = mock(SerializationWriterFactory.class);\r\n    when(mockSerializationWriterFactory.getSerializationWriter(_jsonContentType)).thenReturn(mockSerializationWriter);\r\n    SerializationWriterFactoryRegistry.defaultInstance.contentTypeAssociatedFactories.put(_jsonContentType, mockSerializationWriterFactory);\r\n    final var result = KiotaSerialization.serializeAsString(_jsonContentType, new ArrayList<>() {\r\n\r\n        {\r\n            add(new TestEntity() {\r\n\r\n                {\r\n                    setId(\"123\");\r\n                }\r\n            });\r\n        }\r\n    });\r\n    assertEquals(\"[{'id':'123'}]\", result);\r\n    verify(mockSerializationWriter, times(1)).writeCollectionOfObjectValues(eq(\"\"), any());\r\n}"
                }
              }
            }
          }
        ]
      },
      {
        "mockedClass": "com.microsoft.kiota.serialization.SerializationWriter",
        "packageName": "com.microsoft.kiota",
        "testCaseCount": 4,
        "sequenceCount": 4,
        "sharedStatementLineCount": 0,
        "locReduced": 3,
        "mockObjectCount": 4,
        "sharedStatements": [],
        "sequences": [
          {
            "mockObjectId": 0,
            "mockRole": "mock",
            "variableName": "writer",
            "variableType": "SerializationWriter",
            "mockedClass": "com.microsoft.kiota.serialization.SerializationWriter",
            "packageName": "com.microsoft.kiota",
            "filePath": "C:\\Java_projects\\Microsoft\\kiota-java\\components\\abstractions\\src\\test\\java\\com\\microsoft\\kiota\\MultiPartBodyTest.java",
            "testMethodName": "requiresRequestAdapter",
            "isReuseableMock": false,
            "overlapLines": [
              37
            ],
            "testMethodRawCode": "@Test\r\nvoid requiresRequestAdapter() {\r\n    final MultipartBody multipartBody = new MultipartBody();\r\n    final SerializationWriter writer = mock(SerializationWriter.class);\r\n    assertThrows(IllegalStateException.class, () -> multipartBody.serialize(writer));\r\n}",
            "shareableMockLines": {},
            "testMockLines": {
              "37": "final SerializationWriter writer = mock(SerializationWriter.class);",
              "38": "assertThrows(IllegalStateException.class, () -> multipartBody.serialize(writer));"
            },
            "abstractedStatement": {},
            "rawStatementInfo": {
              "37": {
                "code": "final SerializationWriter writer = mock(SerializationWriter.class);",
                "line": 37,
                "type": "METHOD_MOCK_CREATION",
                "locate": "Test Case",
                "abstractedStatement": "",
                "isMockRelated": true,
                "isShareable": false,
                "locationContext": {
                  "methodName": "requiresRequestAdapter",
                  "methodAnnotations": [
                    "Test"
                  ],
                  "methodRawCode": "@Test\r\nvoid requiresRequestAdapter() {\r\n    final MultipartBody multipartBody = new MultipartBody();\r\n    final SerializationWriter writer = mock(SerializationWriter.class);\r\n    assertThrows(IllegalStateException.class, () -> multipartBody.serialize(writer));\r\n}"
                }
              },
              "38": {
                "code": "assertThrows(IllegalStateException.class, () -> multipartBody.serialize(writer));",
                "line": 38,
                "type": "REFERENCE",
                "locate": "Test Case",
                "abstractedStatement": "",
                "isMockRelated": false,
                "isShareable": false,
                "locationContext": {
                  "methodName": "requiresRequestAdapter",
                  "methodAnnotations": [
                    "Test"
                  ],
                  "methodRawCode": "@Test\r\nvoid requiresRequestAdapter() {\r\n    final MultipartBody multipartBody = new MultipartBody();\r\n    final SerializationWriter writer = mock(SerializationWriter.class);\r\n    assertThrows(IllegalStateException.class, () -> multipartBody.serialize(writer));\r\n}"
                }
              }
            }
          },
          {
            "mockObjectId": 1,
            "mockRole": "mock",
            "variableName": "writer",
            "variableType": "SerializationWriter",
            "mockedClass": "com.microsoft.kiota.serialization.SerializationWriter",
            "packageName": "com.microsoft.kiota",
            "filePath": "C:\\Java_projects\\Microsoft\\kiota-java\\components\\abstractions\\src\\test\\java\\com\\microsoft\\kiota\\MultiPartBodyTest.java",
            "testMethodName": "requiresPartsForSerialization",
            "isReuseableMock": false,
            "overlapLines": [
              44
            ],
            "testMethodRawCode": "@Test\r\nvoid requiresPartsForSerialization() {\r\n    final MultipartBody multipartBody = new MultipartBody();\r\n    final SerializationWriter writer = mock(SerializationWriter.class);\r\n    final RequestAdapter requestAdapter = mock(RequestAdapter.class);\r\n    multipartBody.requestAdapter = requestAdapter;\r\n    assertThrows(IllegalStateException.class, () -> multipartBody.serialize(writer));\r\n}",
            "shareableMockLines": {},
            "testMockLines": {
              "44": "final SerializationWriter writer = mock(SerializationWriter.class);"
            },
            "abstractedStatement": {},
            "rawStatementInfo": {
              "44": {
                "code": "final SerializationWriter writer = mock(SerializationWriter.class);",
                "line": 44,
                "type": "METHOD_MOCK_CREATION",
                "locate": "Test Case",
                "abstractedStatement": "",
                "isMockRelated": true,
                "isShareable": false,
                "locationContext": {
                  "methodName": "requiresPartsForSerialization",
                  "methodAnnotations": [
                    "Test"
                  ],
                  "methodRawCode": "@Test\r\nvoid requiresPartsForSerialization() {\r\n    final MultipartBody multipartBody = new MultipartBody();\r\n    final SerializationWriter writer = mock(SerializationWriter.class);\r\n    final RequestAdapter requestAdapter = mock(RequestAdapter.class);\r\n    multipartBody.requestAdapter = requestAdapter;\r\n    assertThrows(IllegalStateException.class, () -> multipartBody.serialize(writer));\r\n}"
                }
              }
            }
          },
          {
            "mockObjectId": 5,
            "mockRole": "mock",
            "variableName": "writer",
            "variableType": "SerializationWriter",
            "mockedClass": "com.microsoft.kiota.serialization.SerializationWriter",
            "packageName": "com.microsoft.kiota",
            "filePath": "C:\\Java_projects\\Microsoft\\kiota-java\\components\\abstractions\\src\\test\\java\\com\\microsoft\\kiota\\MultiPartBodyTest.java",
            "testMethodName": "notAddFilename",
            "isReuseableMock": false,
            "overlapLines": [
              75
            ],
            "testMethodRawCode": "@Test\r\nvoid notAddFilename() {\r\n    final MultipartBody multipartBody = new MultipartBody();\r\n    final SerializationWriter writer = mock(SerializationWriter.class);\r\n    multipartBody.requestAdapter = mock(RequestAdapter.class);\r\n    multipartBody.addOrReplacePart(\"foo\", \"bar\", \"baz\");\r\n    multipartBody.serialize(writer);\r\n    verify(writer).writeStringValue(\"Content-Disposition\", \"form-data; name=\\\"foo\\\"\");\r\n}",
            "shareableMockLines": {},
            "testMockLines": {
              "75": "final SerializationWriter writer = mock(SerializationWriter.class);",
              "78": "multipartBody.serialize(writer);",
              "79": "verify(writer).writeStringValue(\"Content-Disposition\", \"form-data; name=\\\"foo\\\"\");"
            },
            "abstractedStatement": {},
            "rawStatementInfo": {
              "75": {
                "code": "final SerializationWriter writer = mock(SerializationWriter.class);",
                "line": 75,
                "type": "METHOD_MOCK_CREATION",
                "locate": "Test Case",
                "abstractedStatement": "",
                "isMockRelated": true,
                "isShareable": false,
                "locationContext": {
                  "methodName": "notAddFilename",
                  "methodAnnotations": [
                    "Test"
                  ],
                  "methodRawCode": "@Test\r\nvoid notAddFilename() {\r\n    final MultipartBody multipartBody = new MultipartBody();\r\n    final SerializationWriter writer = mock(SerializationWriter.class);\r\n    multipartBody.requestAdapter = mock(RequestAdapter.class);\r\n    multipartBody.addOrReplacePart(\"foo\", \"bar\", \"baz\");\r\n    multipartBody.serialize(writer);\r\n    verify(writer).writeStringValue(\"Content-Disposition\", \"form-data; name=\\\"foo\\\"\");\r\n}"
                }
              },
              "78": {
                "code": "multipartBody.serialize(writer);",
                "line": 78,
                "type": "REFERENCE",
                "locate": "Test Case",
                "abstractedStatement": "",
                "isMockRelated": false,
                "isShareable": false,
                "locationContext": {
                  "methodName": "notAddFilename",
                  "methodAnnotations": [
                    "Test"
                  ],
                  "methodRawCode": "@Test\r\nvoid notAddFilename() {\r\n    final MultipartBody multipartBody = new MultipartBody();\r\n    final SerializationWriter writer = mock(SerializationWriter.class);\r\n    multipartBody.requestAdapter = mock(RequestAdapter.class);\r\n    multipartBody.addOrReplacePart(\"foo\", \"bar\", \"baz\");\r\n    multipartBody.serialize(writer);\r\n    verify(writer).writeStringValue(\"Content-Disposition\", \"form-data; name=\\\"foo\\\"\");\r\n}"
                }
              },
              "79": {
                "code": "verify(writer).writeStringValue(\"Content-Disposition\", \"form-data; name=\\\"foo\\\"\");",
                "line": 79,
                "type": "VERIFICATION",
                "locate": "Test Case",
                "abstractedStatement": "",
                "isMockRelated": true,
                "isShareable": false,
                "locationContext": {
                  "methodName": "notAddFilename",
                  "methodAnnotations": [
                    "Test"
                  ],
                  "methodRawCode": "@Test\r\nvoid notAddFilename() {\r\n    final MultipartBody multipartBody = new MultipartBody();\r\n    final SerializationWriter writer = mock(SerializationWriter.class);\r\n    multipartBody.requestAdapter = mock(RequestAdapter.class);\r\n    multipartBody.addOrReplacePart(\"foo\", \"bar\", \"baz\");\r\n    multipartBody.serialize(writer);\r\n    verify(writer).writeStringValue(\"Content-Disposition\", \"form-data; name=\\\"foo\\\"\");\r\n}"
                }
              }
            }
          },
          {
            "mockObjectId": 6,
            "mockRole": "mock",
            "variableName": "writer",
            "variableType": "SerializationWriter",
            "mockedClass": "com.microsoft.kiota.serialization.SerializationWriter",
            "packageName": "com.microsoft.kiota",
            "filePath": "C:\\Java_projects\\Microsoft\\kiota-java\\components\\abstractions\\src\\test\\java\\com\\microsoft\\kiota\\MultiPartBodyTest.java",
            "testMethodName": "addFilename",
            "isReuseableMock": false,
            "overlapLines": [
              85
            ],
            "testMethodRawCode": "@Test\r\nvoid addFilename() {\r\n    final MultipartBody multipartBody = new MultipartBody();\r\n    final SerializationWriter writer = mock(SerializationWriter.class);\r\n    multipartBody.requestAdapter = mock(RequestAdapter.class);\r\n    multipartBody.addOrReplacePart(\"foo\", \"bar\", \"baz\", \"image.png\");\r\n    multipartBody.serialize(writer);\r\n    verify(writer).writeStringValue(\"Content-Disposition\", \"form-data; name=\\\"foo\\\"; filename=\\\"image.png\\\"\");\r\n}",
            "shareableMockLines": {},
            "testMockLines": {
              "85": "final SerializationWriter writer = mock(SerializationWriter.class);",
              "88": "multipartBody.serialize(writer);",
              "89": "verify(writer).writeStringValue(\"Content-Disposition\", \"form-data; name=\\\"foo\\\"; filename=\\\"image.png\\\"\");"
            },
            "abstractedStatement": {},
            "rawStatementInfo": {
              "85": {
                "code": "final SerializationWriter writer = mock(SerializationWriter.class);",
                "line": 85,
                "type": "METHOD_MOCK_CREATION",
                "locate": "Test Case",
                "abstractedStatement": "",
                "isMockRelated": true,
                "isShareable": false,
                "locationContext": {
                  "methodName": "addFilename",
                  "methodAnnotations": [
                    "Test"
                  ],
                  "methodRawCode": "@Test\r\nvoid addFilename() {\r\n    final MultipartBody multipartBody = new MultipartBody();\r\n    final SerializationWriter writer = mock(SerializationWriter.class);\r\n    multipartBody.requestAdapter = mock(RequestAdapter.class);\r\n    multipartBody.addOrReplacePart(\"foo\", \"bar\", \"baz\", \"image.png\");\r\n    multipartBody.serialize(writer);\r\n    verify(writer).writeStringValue(\"Content-Disposition\", \"form-data; name=\\\"foo\\\"; filename=\\\"image.png\\\"\");\r\n}"
                }
              },
              "88": {
                "code": "multipartBody.serialize(writer);",
                "line": 88,
                "type": "REFERENCE",
                "locate": "Test Case",
                "abstractedStatement": "",
                "isMockRelated": false,
                "isShareable": false,
                "locationContext": {
                  "methodName": "addFilename",
                  "methodAnnotations": [
                    "Test"
                  ],
                  "methodRawCode": "@Test\r\nvoid addFilename() {\r\n    final MultipartBody multipartBody = new MultipartBody();\r\n    final SerializationWriter writer = mock(SerializationWriter.class);\r\n    multipartBody.requestAdapter = mock(RequestAdapter.class);\r\n    multipartBody.addOrReplacePart(\"foo\", \"bar\", \"baz\", \"image.png\");\r\n    multipartBody.serialize(writer);\r\n    verify(writer).writeStringValue(\"Content-Disposition\", \"form-data; name=\\\"foo\\\"; filename=\\\"image.png\\\"\");\r\n}"
                }
              },
              "89": {
                "code": "verify(writer).writeStringValue(\"Content-Disposition\", \"form-data; name=\\\"foo\\\"; filename=\\\"image.png\\\"\");",
                "line": 89,
                "type": "VERIFICATION",
                "locate": "Test Case",
                "abstractedStatement": "",
                "isMockRelated": true,
                "isShareable": false,
                "locationContext": {
                  "methodName": "addFilename",
                  "methodAnnotations": [
                    "Test"
                  ],
                  "methodRawCode": "@Test\r\nvoid addFilename() {\r\n    final MultipartBody multipartBody = new MultipartBody();\r\n    final SerializationWriter writer = mock(SerializationWriter.class);\r\n    multipartBody.requestAdapter = mock(RequestAdapter.class);\r\n    multipartBody.addOrReplacePart(\"foo\", \"bar\", \"baz\", \"image.png\");\r\n    multipartBody.serialize(writer);\r\n    verify(writer).writeStringValue(\"Content-Disposition\", \"form-data; name=\\\"foo\\\"; filename=\\\"image.png\\\"\");\r\n}"
                }
              }
            }
          }
        ]
      },
      {
        "mockedClass": "com.microsoft.kiota.serialization.SerializationWriter",
        "packageName": "com.microsoft.kiota",
        "testCaseCount": 5,
        "sequenceCount": 5,
        "sharedStatementLineCount": 0,
        "locReduced": 4,
        "mockObjectCount": 5,
        "sharedStatements": [],
        "sequences": [
          {
            "mockObjectId": 7,
            "mockRole": "mock",
            "variableName": "writerMock",
            "variableType": "SerializationWriter",
            "mockedClass": "com.microsoft.kiota.serialization.SerializationWriter",
            "packageName": "com.microsoft.kiota",
            "filePath": "C:\\Java_projects\\Microsoft\\kiota-java\\components\\abstractions\\src\\test\\java\\com\\microsoft\\kiota\\RequestInformationTest.java",
            "testMethodName": "SetsParsableContent",
            "isReuseableMock": false,
            "overlapLines": [
              190
            ],
            "testMethodRawCode": "@Test\r\nvoid SetsParsableContent() {\r\n    // Arrange as the request builders would\r\n    final RequestInformation requestInfo = new RequestInformation();\r\n    requestInfo.httpMethod = HttpMethod.POST;\r\n    requestInfo.urlTemplate = \"http://localhost/users\";\r\n    final SerializationWriter writerMock = mock(SerializationWriter.class);\r\n    final SerializationWriterFactory factoryMock = mock(SerializationWriterFactory.class);\r\n    when(factoryMock.getSerializationWriter(anyString())).thenReturn(writerMock);\r\n    final RequestAdapter requestAdapterMock = mock(RequestAdapter.class);\r\n    when(requestAdapterMock.getSerializationWriterFactory()).thenReturn(factoryMock);\r\n    requestInfo.setContentFromParsable(requestAdapterMock, \"application/json\", new TestEntity());\r\n    verify(writerMock, times(1)).writeObjectValue(any(), any(TestEntity.class));\r\n    verify(writerMock, never()).writeCollectionOfObjectValues(anyString(), any(ArrayList.class));\r\n}",
            "shareableMockLines": {},
            "testMockLines": {
              "190": "final SerializationWriter writerMock = mock(SerializationWriter.class);",
              "198": "verify(writerMock, times(1)).writeObjectValue(any(), any(TestEntity.class));",
              "199": "verify(writerMock, never()).writeCollectionOfObjectValues(anyString(), any(ArrayList.class));"
            },
            "abstractedStatement": {},
            "rawStatementInfo": {
              "190": {
                "code": "final SerializationWriter writerMock = mock(SerializationWriter.class);",
                "line": 190,
                "type": "METHOD_MOCK_CREATION",
                "locate": "Test Case",
                "abstractedStatement": "",
                "isMockRelated": true,
                "isShareable": false,
                "locationContext": {
                  "methodName": "SetsParsableContent",
                  "methodAnnotations": [
                    "Test"
                  ],
                  "methodRawCode": "@Test\r\nvoid SetsParsableContent() {\r\n    // Arrange as the request builders would\r\n    final RequestInformation requestInfo = new RequestInformation();\r\n    requestInfo.httpMethod = HttpMethod.POST;\r\n    requestInfo.urlTemplate = \"http://localhost/users\";\r\n    final SerializationWriter writerMock = mock(SerializationWriter.class);\r\n    final SerializationWriterFactory factoryMock = mock(SerializationWriterFactory.class);\r\n    when(factoryMock.getSerializationWriter(anyString())).thenReturn(writerMock);\r\n    final RequestAdapter requestAdapterMock = mock(RequestAdapter.class);\r\n    when(requestAdapterMock.getSerializationWriterFactory()).thenReturn(factoryMock);\r\n    requestInfo.setContentFromParsable(requestAdapterMock, \"application/json\", new TestEntity());\r\n    verify(writerMock, times(1)).writeObjectValue(any(), any(TestEntity.class));\r\n    verify(writerMock, never()).writeCollectionOfObjectValues(anyString(), any(ArrayList.class));\r\n}"
                }
              },
              "198": {
                "code": "verify(writerMock, times(1)).writeObjectValue(any(), any(TestEntity.class));",
                "line": 198,
                "type": "VERIFICATION",
                "locate": "Test Case",
                "abstractedStatement": "",
                "isMockRelated": true,
                "isShareable": false,
                "locationContext": {
                  "methodName": "SetsParsableContent",
                  "methodAnnotations": [
                    "Test"
                  ],
                  "methodRawCode": "@Test\r\nvoid SetsParsableContent() {\r\n    // Arrange as the request builders would\r\n    final RequestInformation requestInfo = new RequestInformation();\r\n    requestInfo.httpMethod = HttpMethod.POST;\r\n    requestInfo.urlTemplate = \"http://localhost/users\";\r\n    final SerializationWriter writerMock = mock(SerializationWriter.class);\r\n    final SerializationWriterFactory factoryMock = mock(SerializationWriterFactory.class);\r\n    when(factoryMock.getSerializationWriter(anyString())).thenReturn(writerMock);\r\n    final RequestAdapter requestAdapterMock = mock(RequestAdapter.class);\r\n    when(requestAdapterMock.getSerializationWriterFactory()).thenReturn(factoryMock);\r\n    requestInfo.setContentFromParsable(requestAdapterMock, \"application/json\", new TestEntity());\r\n    verify(writerMock, times(1)).writeObjectValue(any(), any(TestEntity.class));\r\n    verify(writerMock, never()).writeCollectionOfObjectValues(anyString(), any(ArrayList.class));\r\n}"
                }
              },
              "199": {
                "code": "verify(writerMock, never()).writeCollectionOfObjectValues(anyString(), any(ArrayList.class));",
                "line": 199,
                "type": "VERIFICATION",
                "locate": "Test Case",
                "abstractedStatement": "",
                "isMockRelated": true,
                "isShareable": false,
                "locationContext": {
                  "methodName": "SetsParsableContent",
                  "methodAnnotations": [
                    "Test"
                  ],
                  "methodRawCode": "@Test\r\nvoid SetsParsableContent() {\r\n    // Arrange as the request builders would\r\n    final RequestInformation requestInfo = new RequestInformation();\r\n    requestInfo.httpMethod = HttpMethod.POST;\r\n    requestInfo.urlTemplate = \"http://localhost/users\";\r\n    final SerializationWriter writerMock = mock(SerializationWriter.class);\r\n    final SerializationWriterFactory factoryMock = mock(SerializationWriterFactory.class);\r\n    when(factoryMock.getSerializationWriter(anyString())).thenReturn(writerMock);\r\n    final RequestAdapter requestAdapterMock = mock(RequestAdapter.class);\r\n    when(requestAdapterMock.getSerializationWriterFactory()).thenReturn(factoryMock);\r\n    requestInfo.setContentFromParsable(requestAdapterMock, \"application/json\", new TestEntity());\r\n    verify(writerMock, times(1)).writeObjectValue(any(), any(TestEntity.class));\r\n    verify(writerMock, never()).writeCollectionOfObjectValues(anyString(), any(ArrayList.class));\r\n}"
                }
              }
            }
          },
          {
            "mockObjectId": 10,
            "mockRole": "mock",
            "variableName": "writerMock",
            "variableType": "SerializationWriter",
            "mockedClass": "com.microsoft.kiota.serialization.SerializationWriter",
            "packageName": "com.microsoft.kiota",
            "filePath": "C:\\Java_projects\\Microsoft\\kiota-java\\components\\abstractions\\src\\test\\java\\com\\microsoft\\kiota\\RequestInformationTest.java",
            "testMethodName": "SetsParsableContentCollection",
            "isReuseableMock": false,
            "overlapLines": [
              209
            ],
            "testMethodRawCode": "@Test\r\nvoid SetsParsableContentCollection() {\r\n    // Arrange as the request builders would\r\n    final RequestInformation requestInfo = new RequestInformation();\r\n    requestInfo.httpMethod = HttpMethod.POST;\r\n    requestInfo.urlTemplate = \"http://localhost/users\";\r\n    final SerializationWriter writerMock = mock(SerializationWriter.class);\r\n    final SerializationWriterFactory factoryMock = mock(SerializationWriterFactory.class);\r\n    when(factoryMock.getSerializationWriter(anyString())).thenReturn(writerMock);\r\n    final RequestAdapter requestAdapterMock = mock(RequestAdapter.class);\r\n    when(requestAdapterMock.getSerializationWriterFactory()).thenReturn(factoryMock);\r\n    requestInfo.setContentFromParsable(requestAdapterMock, \"application/json\", new TestEntity[] { new TestEntity() });\r\n    verify(writerMock, never()).writeObjectValue(any(), any(TestEntity.class));\r\n    verify(writerMock, times(1)).writeCollectionOfObjectValues(any(), any(Iterable.class));\r\n}",
            "shareableMockLines": {},
            "testMockLines": {
              "209": "final SerializationWriter writerMock = mock(SerializationWriter.class);",
              "217": "verify(writerMock, never()).writeObjectValue(any(), any(TestEntity.class));",
              "218": "verify(writerMock, times(1)).writeCollectionOfObjectValues(any(), any(Iterable.class));"
            },
            "abstractedStatement": {},
            "rawStatementInfo": {
              "209": {
                "code": "final SerializationWriter writerMock = mock(SerializationWriter.class);",
                "line": 209,
                "type": "METHOD_MOCK_CREATION",
                "locate": "Test Case",
                "abstractedStatement": "",
                "isMockRelated": true,
                "isShareable": false,
                "locationContext": {
                  "methodName": "SetsParsableContentCollection",
                  "methodAnnotations": [
                    "Test"
                  ],
                  "methodRawCode": "@Test\r\nvoid SetsParsableContentCollection() {\r\n    // Arrange as the request builders would\r\n    final RequestInformation requestInfo = new RequestInformation();\r\n    requestInfo.httpMethod = HttpMethod.POST;\r\n    requestInfo.urlTemplate = \"http://localhost/users\";\r\n    final SerializationWriter writerMock = mock(SerializationWriter.class);\r\n    final SerializationWriterFactory factoryMock = mock(SerializationWriterFactory.class);\r\n    when(factoryMock.getSerializationWriter(anyString())).thenReturn(writerMock);\r\n    final RequestAdapter requestAdapterMock = mock(RequestAdapter.class);\r\n    when(requestAdapterMock.getSerializationWriterFactory()).thenReturn(factoryMock);\r\n    requestInfo.setContentFromParsable(requestAdapterMock, \"application/json\", new TestEntity[] { new TestEntity() });\r\n    verify(writerMock, never()).writeObjectValue(any(), any(TestEntity.class));\r\n    verify(writerMock, times(1)).writeCollectionOfObjectValues(any(), any(Iterable.class));\r\n}"
                }
              },
              "217": {
                "code": "verify(writerMock, never()).writeObjectValue(any(), any(TestEntity.class));",
                "line": 217,
                "type": "VERIFICATION",
                "locate": "Test Case",
                "abstractedStatement": "",
                "isMockRelated": true,
                "isShareable": false,
                "locationContext": {
                  "methodName": "SetsParsableContentCollection",
                  "methodAnnotations": [
                    "Test"
                  ],
                  "methodRawCode": "@Test\r\nvoid SetsParsableContentCollection() {\r\n    // Arrange as the request builders would\r\n    final RequestInformation requestInfo = new RequestInformation();\r\n    requestInfo.httpMethod = HttpMethod.POST;\r\n    requestInfo.urlTemplate = \"http://localhost/users\";\r\n    final SerializationWriter writerMock = mock(SerializationWriter.class);\r\n    final SerializationWriterFactory factoryMock = mock(SerializationWriterFactory.class);\r\n    when(factoryMock.getSerializationWriter(anyString())).thenReturn(writerMock);\r\n    final RequestAdapter requestAdapterMock = mock(RequestAdapter.class);\r\n    when(requestAdapterMock.getSerializationWriterFactory()).thenReturn(factoryMock);\r\n    requestInfo.setContentFromParsable(requestAdapterMock, \"application/json\", new TestEntity[] { new TestEntity() });\r\n    verify(writerMock, never()).writeObjectValue(any(), any(TestEntity.class));\r\n    verify(writerMock, times(1)).writeCollectionOfObjectValues(any(), any(Iterable.class));\r\n}"
                }
              },
              "218": {
                "code": "verify(writerMock, times(1)).writeCollectionOfObjectValues(any(), any(Iterable.class));",
                "line": 218,
                "type": "VERIFICATION",
                "locate": "Test Case",
                "abstractedStatement": "",
                "isMockRelated": true,
                "isShareable": false,
                "locationContext": {
                  "methodName": "SetsParsableContentCollection",
                  "methodAnnotations": [
                    "Test"
                  ],
                  "methodRawCode": "@Test\r\nvoid SetsParsableContentCollection() {\r\n    // Arrange as the request builders would\r\n    final RequestInformation requestInfo = new RequestInformation();\r\n    requestInfo.httpMethod = HttpMethod.POST;\r\n    requestInfo.urlTemplate = \"http://localhost/users\";\r\n    final SerializationWriter writerMock = mock(SerializationWriter.class);\r\n    final SerializationWriterFactory factoryMock = mock(SerializationWriterFactory.class);\r\n    when(factoryMock.getSerializationWriter(anyString())).thenReturn(writerMock);\r\n    final RequestAdapter requestAdapterMock = mock(RequestAdapter.class);\r\n    when(requestAdapterMock.getSerializationWriterFactory()).thenReturn(factoryMock);\r\n    requestInfo.setContentFromParsable(requestAdapterMock, \"application/json\", new TestEntity[] { new TestEntity() });\r\n    verify(writerMock, never()).writeObjectValue(any(), any(TestEntity.class));\r\n    verify(writerMock, times(1)).writeCollectionOfObjectValues(any(), any(Iterable.class));\r\n}"
                }
              }
            }
          },
          {
            "mockObjectId": 13,
            "mockRole": "mock",
            "variableName": "writerMock",
            "variableType": "SerializationWriter",
            "mockedClass": "com.microsoft.kiota.serialization.SerializationWriter",
            "packageName": "com.microsoft.kiota",
            "filePath": "C:\\Java_projects\\Microsoft\\kiota-java\\components\\abstractions\\src\\test\\java\\com\\microsoft\\kiota\\RequestInformationTest.java",
            "testMethodName": "SetsScalarContentCollection",
            "isReuseableMock": false,
            "overlapLines": [
              227
            ],
            "testMethodRawCode": "@Test\r\nvoid SetsScalarContentCollection() {\r\n    // Arrange as the request builders would\r\n    final RequestInformation requestInfo = new RequestInformation();\r\n    requestInfo.httpMethod = HttpMethod.POST;\r\n    requestInfo.urlTemplate = \"http://localhost/users\";\r\n    final SerializationWriter writerMock = mock(SerializationWriter.class);\r\n    final SerializationWriterFactory factoryMock = mock(SerializationWriterFactory.class);\r\n    when(factoryMock.getSerializationWriter(anyString())).thenReturn(writerMock);\r\n    final RequestAdapter requestAdapterMock = mock(RequestAdapter.class);\r\n    when(requestAdapterMock.getSerializationWriterFactory()).thenReturn(factoryMock);\r\n    requestInfo.setContentFromScalarCollection(requestAdapterMock, \"application/json\", new String[] { \"foo\" });\r\n    verify(writerMock, never()).writeStringValue(any(), anyString());\r\n    verify(writerMock, times(1)).writeCollectionOfPrimitiveValues(any(), any(Iterable.class));\r\n}",
            "shareableMockLines": {},
            "testMockLines": {
              "227": "final SerializationWriter writerMock = mock(SerializationWriter.class);",
              "235": "verify(writerMock, never()).writeStringValue(any(), anyString());",
              "236": "verify(writerMock, times(1)).writeCollectionOfPrimitiveValues(any(), any(Iterable.class));"
            },
            "abstractedStatement": {},
            "rawStatementInfo": {
              "227": {
                "code": "final SerializationWriter writerMock = mock(SerializationWriter.class);",
                "line": 227,
                "type": "METHOD_MOCK_CREATION",
                "locate": "Test Case",
                "abstractedStatement": "",
                "isMockRelated": true,
                "isShareable": false,
                "locationContext": {
                  "methodName": "SetsScalarContentCollection",
                  "methodAnnotations": [
                    "Test"
                  ],
                  "methodRawCode": "@Test\r\nvoid SetsScalarContentCollection() {\r\n    // Arrange as the request builders would\r\n    final RequestInformation requestInfo = new RequestInformation();\r\n    requestInfo.httpMethod = HttpMethod.POST;\r\n    requestInfo.urlTemplate = \"http://localhost/users\";\r\n    final SerializationWriter writerMock = mock(SerializationWriter.class);\r\n    final SerializationWriterFactory factoryMock = mock(SerializationWriterFactory.class);\r\n    when(factoryMock.getSerializationWriter(anyString())).thenReturn(writerMock);\r\n    final RequestAdapter requestAdapterMock = mock(RequestAdapter.class);\r\n    when(requestAdapterMock.getSerializationWriterFactory()).thenReturn(factoryMock);\r\n    requestInfo.setContentFromScalarCollection(requestAdapterMock, \"application/json\", new String[] { \"foo\" });\r\n    verify(writerMock, never()).writeStringValue(any(), anyString());\r\n    verify(writerMock, times(1)).writeCollectionOfPrimitiveValues(any(), any(Iterable.class));\r\n}"
                }
              },
              "235": {
                "code": "verify(writerMock, never()).writeStringValue(any(), anyString());",
                "line": 235,
                "type": "VERIFICATION",
                "locate": "Test Case",
                "abstractedStatement": "",
                "isMockRelated": true,
                "isShareable": false,
                "locationContext": {
                  "methodName": "SetsScalarContentCollection",
                  "methodAnnotations": [
                    "Test"
                  ],
                  "methodRawCode": "@Test\r\nvoid SetsScalarContentCollection() {\r\n    // Arrange as the request builders would\r\n    final RequestInformation requestInfo = new RequestInformation();\r\n    requestInfo.httpMethod = HttpMethod.POST;\r\n    requestInfo.urlTemplate = \"http://localhost/users\";\r\n    final SerializationWriter writerMock = mock(SerializationWriter.class);\r\n    final SerializationWriterFactory factoryMock = mock(SerializationWriterFactory.class);\r\n    when(factoryMock.getSerializationWriter(anyString())).thenReturn(writerMock);\r\n    final RequestAdapter requestAdapterMock = mock(RequestAdapter.class);\r\n    when(requestAdapterMock.getSerializationWriterFactory()).thenReturn(factoryMock);\r\n    requestInfo.setContentFromScalarCollection(requestAdapterMock, \"application/json\", new String[] { \"foo\" });\r\n    verify(writerMock, never()).writeStringValue(any(), anyString());\r\n    verify(writerMock, times(1)).writeCollectionOfPrimitiveValues(any(), any(Iterable.class));\r\n}"
                }
              },
              "236": {
                "code": "verify(writerMock, times(1)).writeCollectionOfPrimitiveValues(any(), any(Iterable.class));",
                "line": 236,
                "type": "VERIFICATION",
                "locate": "Test Case",
                "abstractedStatement": "",
                "isMockRelated": true,
                "isShareable": false,
                "locationContext": {
                  "methodName": "SetsScalarContentCollection",
                  "methodAnnotations": [
                    "Test"
                  ],
                  "methodRawCode": "@Test\r\nvoid SetsScalarContentCollection() {\r\n    // Arrange as the request builders would\r\n    final RequestInformation requestInfo = new RequestInformation();\r\n    requestInfo.httpMethod = HttpMethod.POST;\r\n    requestInfo.urlTemplate = \"http://localhost/users\";\r\n    final SerializationWriter writerMock = mock(SerializationWriter.class);\r\n    final SerializationWriterFactory factoryMock = mock(SerializationWriterFactory.class);\r\n    when(factoryMock.getSerializationWriter(anyString())).thenReturn(writerMock);\r\n    final RequestAdapter requestAdapterMock = mock(RequestAdapter.class);\r\n    when(requestAdapterMock.getSerializationWriterFactory()).thenReturn(factoryMock);\r\n    requestInfo.setContentFromScalarCollection(requestAdapterMock, \"application/json\", new String[] { \"foo\" });\r\n    verify(writerMock, never()).writeStringValue(any(), anyString());\r\n    verify(writerMock, times(1)).writeCollectionOfPrimitiveValues(any(), any(Iterable.class));\r\n}"
                }
              }
            }
          },
          {
            "mockObjectId": 16,
            "mockRole": "mock",
            "variableName": "writerMock",
            "variableType": "SerializationWriter",
            "mockedClass": "com.microsoft.kiota.serialization.SerializationWriter",
            "packageName": "com.microsoft.kiota",
            "filePath": "C:\\Java_projects\\Microsoft\\kiota-java\\components\\abstractions\\src\\test\\java\\com\\microsoft\\kiota\\RequestInformationTest.java",
            "testMethodName": "SetsScalarContent",
            "isReuseableMock": false,
            "overlapLines": [
              245
            ],
            "testMethodRawCode": "@Test\r\nvoid SetsScalarContent() {\r\n    // Arrange as the request builders would\r\n    final RequestInformation requestInfo = new RequestInformation();\r\n    requestInfo.httpMethod = HttpMethod.POST;\r\n    requestInfo.urlTemplate = \"http://localhost/users\";\r\n    final SerializationWriter writerMock = mock(SerializationWriter.class);\r\n    final SerializationWriterFactory factoryMock = mock(SerializationWriterFactory.class);\r\n    when(factoryMock.getSerializationWriter(anyString())).thenReturn(writerMock);\r\n    final RequestAdapter requestAdapterMock = mock(RequestAdapter.class);\r\n    when(requestAdapterMock.getSerializationWriterFactory()).thenReturn(factoryMock);\r\n    requestInfo.setContentFromScalar(requestAdapterMock, \"application/json\", \"foo\");\r\n    verify(writerMock, times(1)).writeStringValue(any(), anyString());\r\n    verify(writerMock, never()).writeCollectionOfPrimitiveValues(any(), any(Iterable.class));\r\n}",
            "shareableMockLines": {},
            "testMockLines": {
              "245": "final SerializationWriter writerMock = mock(SerializationWriter.class);",
              "252": "verify(writerMock, times(1)).writeStringValue(any(), anyString());",
              "253": "verify(writerMock, never()).writeCollectionOfPrimitiveValues(any(), any(Iterable.class));"
            },
            "abstractedStatement": {},
            "rawStatementInfo": {
              "245": {
                "code": "final SerializationWriter writerMock = mock(SerializationWriter.class);",
                "line": 245,
                "type": "METHOD_MOCK_CREATION",
                "locate": "Test Case",
                "abstractedStatement": "",
                "isMockRelated": true,
                "isShareable": false,
                "locationContext": {
                  "methodName": "SetsScalarContent",
                  "methodAnnotations": [
                    "Test"
                  ],
                  "methodRawCode": "@Test\r\nvoid SetsScalarContent() {\r\n    // Arrange as the request builders would\r\n    final RequestInformation requestInfo = new RequestInformation();\r\n    requestInfo.httpMethod = HttpMethod.POST;\r\n    requestInfo.urlTemplate = \"http://localhost/users\";\r\n    final SerializationWriter writerMock = mock(SerializationWriter.class);\r\n    final SerializationWriterFactory factoryMock = mock(SerializationWriterFactory.class);\r\n    when(factoryMock.getSerializationWriter(anyString())).thenReturn(writerMock);\r\n    final RequestAdapter requestAdapterMock = mock(RequestAdapter.class);\r\n    when(requestAdapterMock.getSerializationWriterFactory()).thenReturn(factoryMock);\r\n    requestInfo.setContentFromScalar(requestAdapterMock, \"application/json\", \"foo\");\r\n    verify(writerMock, times(1)).writeStringValue(any(), anyString());\r\n    verify(writerMock, never()).writeCollectionOfPrimitiveValues(any(), any(Iterable.class));\r\n}"
                }
              },
              "252": {
                "code": "verify(writerMock, times(1)).writeStringValue(any(), anyString());",
                "line": 252,
                "type": "VERIFICATION",
                "locate": "Test Case",
                "abstractedStatement": "",
                "isMockRelated": true,
                "isShareable": false,
                "locationContext": {
                  "methodName": "SetsScalarContent",
                  "methodAnnotations": [
                    "Test"
                  ],
                  "methodRawCode": "@Test\r\nvoid SetsScalarContent() {\r\n    // Arrange as the request builders would\r\n    final RequestInformation requestInfo = new RequestInformation();\r\n    requestInfo.httpMethod = HttpMethod.POST;\r\n    requestInfo.urlTemplate = \"http://localhost/users\";\r\n    final SerializationWriter writerMock = mock(SerializationWriter.class);\r\n    final SerializationWriterFactory factoryMock = mock(SerializationWriterFactory.class);\r\n    when(factoryMock.getSerializationWriter(anyString())).thenReturn(writerMock);\r\n    final RequestAdapter requestAdapterMock = mock(RequestAdapter.class);\r\n    when(requestAdapterMock.getSerializationWriterFactory()).thenReturn(factoryMock);\r\n    requestInfo.setContentFromScalar(requestAdapterMock, \"application/json\", \"foo\");\r\n    verify(writerMock, times(1)).writeStringValue(any(), anyString());\r\n    verify(writerMock, never()).writeCollectionOfPrimitiveValues(any(), any(Iterable.class));\r\n}"
                }
              },
              "253": {
                "code": "verify(writerMock, never()).writeCollectionOfPrimitiveValues(any(), any(Iterable.class));",
                "line": 253,
                "type": "VERIFICATION",
                "locate": "Test Case",
                "abstractedStatement": "",
                "isMockRelated": true,
                "isShareable": false,
                "locationContext": {
                  "methodName": "SetsScalarContent",
                  "methodAnnotations": [
                    "Test"
                  ],
                  "methodRawCode": "@Test\r\nvoid SetsScalarContent() {\r\n    // Arrange as the request builders would\r\n    final RequestInformation requestInfo = new RequestInformation();\r\n    requestInfo.httpMethod = HttpMethod.POST;\r\n    requestInfo.urlTemplate = \"http://localhost/users\";\r\n    final SerializationWriter writerMock = mock(SerializationWriter.class);\r\n    final SerializationWriterFactory factoryMock = mock(SerializationWriterFactory.class);\r\n    when(factoryMock.getSerializationWriter(anyString())).thenReturn(writerMock);\r\n    final RequestAdapter requestAdapterMock = mock(RequestAdapter.class);\r\n    when(requestAdapterMock.getSerializationWriterFactory()).thenReturn(factoryMock);\r\n    requestInfo.setContentFromScalar(requestAdapterMock, \"application/json\", \"foo\");\r\n    verify(writerMock, times(1)).writeStringValue(any(), anyString());\r\n    verify(writerMock, never()).writeCollectionOfPrimitiveValues(any(), any(Iterable.class));\r\n}"
                }
              }
            }
          },
          {
            "mockObjectId": 19,
            "mockRole": "mock",
            "variableName": "writerMock",
            "variableType": "SerializationWriter",
            "mockedClass": "com.microsoft.kiota.serialization.SerializationWriter",
            "packageName": "com.microsoft.kiota",
            "filePath": "C:\\Java_projects\\Microsoft\\kiota-java\\components\\abstractions\\src\\test\\java\\com\\microsoft\\kiota\\RequestInformationTest.java",
            "testMethodName": "SetsBoundaryOnMultipartBody",
            "isReuseableMock": false,
            "overlapLines": [
              262
            ],
            "testMethodRawCode": "@Test\r\nvoid SetsBoundaryOnMultipartBody() {\r\n    final RequestInformation requestInfo = new RequestInformation();\r\n    requestInfo.httpMethod = HttpMethod.POST;\r\n    requestInfo.urlTemplate = \"http://localhost/{URITemplate}/ParameterMapping?IsCaseSensitive={IsCaseSensitive}\";\r\n    final SerializationWriter writerMock = mock(SerializationWriter.class);\r\n    final SerializationWriterFactory factoryMock = mock(SerializationWriterFactory.class);\r\n    when(factoryMock.getSerializationWriter(anyString())).thenReturn(writerMock);\r\n    final RequestAdapter requestAdapterMock = mock(RequestAdapter.class);\r\n    when(requestAdapterMock.getSerializationWriterFactory()).thenReturn(factoryMock);\r\n    final MultipartBody multipartBody = new MultipartBody();\r\n    multipartBody.requestAdapter = requestAdapterMock;\r\n    requestInfo.setContentFromParsable(requestAdapterMock, \"multipart/form-data\", multipartBody);\r\n    assertNotNull(multipartBody.getBoundary());\r\n    assertFalse(multipartBody.getBoundary().isEmpty());\r\n    assertEquals(\"multipart/form-data; boundary=\" + multipartBody.getBoundary(), requestInfo.headers.get(\"Content-Type\").toArray()[0]);\r\n}",
            "shareableMockLines": {},
            "testMockLines": {
              "262": "final SerializationWriter writerMock = mock(SerializationWriter.class);"
            },
            "abstractedStatement": {},
            "rawStatementInfo": {
              "262": {
                "code": "final SerializationWriter writerMock = mock(SerializationWriter.class);",
                "line": 262,
                "type": "METHOD_MOCK_CREATION",
                "locate": "Test Case",
                "abstractedStatement": "",
                "isMockRelated": true,
                "isShareable": false,
                "locationContext": {
                  "methodName": "SetsBoundaryOnMultipartBody",
                  "methodAnnotations": [
                    "Test"
                  ],
                  "methodRawCode": "@Test\r\nvoid SetsBoundaryOnMultipartBody() {\r\n    final RequestInformation requestInfo = new RequestInformation();\r\n    requestInfo.httpMethod = HttpMethod.POST;\r\n    requestInfo.urlTemplate = \"http://localhost/{URITemplate}/ParameterMapping?IsCaseSensitive={IsCaseSensitive}\";\r\n    final SerializationWriter writerMock = mock(SerializationWriter.class);\r\n    final SerializationWriterFactory factoryMock = mock(SerializationWriterFactory.class);\r\n    when(factoryMock.getSerializationWriter(anyString())).thenReturn(writerMock);\r\n    final RequestAdapter requestAdapterMock = mock(RequestAdapter.class);\r\n    when(requestAdapterMock.getSerializationWriterFactory()).thenReturn(factoryMock);\r\n    final MultipartBody multipartBody = new MultipartBody();\r\n    multipartBody.requestAdapter = requestAdapterMock;\r\n    requestInfo.setContentFromParsable(requestAdapterMock, \"multipart/form-data\", multipartBody);\r\n    assertNotNull(multipartBody.getBoundary());\r\n    assertFalse(multipartBody.getBoundary().isEmpty());\r\n    assertEquals(\"multipart/form-data; boundary=\" + multipartBody.getBoundary(), requestInfo.headers.get(\"Content-Type\").toArray()[0]);\r\n}"
                }
              }
            }
          }
        ]
      }
    ],
    "com.microsoft.kiota.authentication.AuthenticationProvider": [
      {
        "mockedClass": "com.microsoft.kiota.authentication.AuthenticationProvider",
        "packageName": "com.microsoft.kiota.http",
        "testCaseCount": 11,
        "sequenceCount": 11,
        "sharedStatementLineCount": 0,
        "locReduced": 10,
        "mockObjectCount": 11,
        "sharedStatements": [],
        "sequences": [
          {
            "mockObjectId": 37,
            "mockRole": "mock",
            "variableName": "authenticationProviderMock",
            "variableType": "AuthenticationProvider",
            "mockedClass": "com.microsoft.kiota.authentication.AuthenticationProvider",
            "packageName": "com.microsoft.kiota.http",
            "filePath": "C:\\Java_projects\\Microsoft\\kiota-java\\components\\http\\okHttp\\src\\test\\java\\com\\microsoft\\kiota\\http\\OkHttpRequestAdapterTest.java",
            "testMethodName": "postRequestsShouldHaveEmptyBody",
            "isReuseableMock": false,
            "overlapLines": [
              56
            ],
            "testMethodRawCode": "@ParameterizedTest\r\n@EnumSource(value = HttpMethod.class, names = { \"PUT\", \"POST\", \"PATCH\" })\r\nvoid postRequestsShouldHaveEmptyBody(HttpMethod method) throws Exception {\r\n    // Unexpected exception thrown: java.lang.IllegalArgumentException:\r\n    // method POST must have a request body.\r\n    final AuthenticationProvider authenticationProviderMock = mock(AuthenticationProvider.class);\r\n    final var adapter = new OkHttpRequestAdapter(authenticationProviderMock) {\r\n\r\n        public Request test() throws Exception {\r\n            RequestInformation ri = new RequestInformation();\r\n            ri.httpMethod = method;\r\n            ri.urlTemplate = \"http://localhost:1234\";\r\n            Span span1 = GlobalOpenTelemetry.getTracer(\"\").spanBuilder(\"\").startSpan();\r\n            Span span2 = GlobalOpenTelemetry.getTracer(\"\").spanBuilder(\"\").startSpan();\r\n            return this.getRequestFromRequestInformation(ri, span1, span2);\r\n        }\r\n    };\r\n    final var request = assertDoesNotThrow(() -> adapter.test());\r\n    assertNotNull(request.body());\r\n}",
            "shareableMockLines": {},
            "testMockLines": {
              "56": "// Unexpected exception thrown: java.lang.IllegalArgumentException:\r\n// method POST must have a request body.\r\nfinal AuthenticationProvider authenticationProviderMock = mock(AuthenticationProvider.class);"
            },
            "abstractedStatement": {},
            "rawStatementInfo": {
              "56": {
                "code": "// Unexpected exception thrown: java.lang.IllegalArgumentException:\r\n// method POST must have a request body.\r\nfinal AuthenticationProvider authenticationProviderMock = mock(AuthenticationProvider.class);",
                "line": 56,
                "type": "METHOD_MOCK_CREATION",
                "locate": "Test Case",
                "abstractedStatement": "",
                "isMockRelated": true,
                "isShareable": false,
                "locationContext": {
                  "methodName": "postRequestsShouldHaveEmptyBody",
                  "methodAnnotations": [
                    "ParameterizedTest",
                    "EnumSource"
                  ],
                  "methodRawCode": "@ParameterizedTest\r\n@EnumSource(value = HttpMethod.class, names = { \"PUT\", \"POST\", \"PATCH\" })\r\nvoid postRequestsShouldHaveEmptyBody(HttpMethod method) throws Exception {\r\n    // Unexpected exception thrown: java.lang.IllegalArgumentException:\r\n    // method POST must have a request body.\r\n    final AuthenticationProvider authenticationProviderMock = mock(AuthenticationProvider.class);\r\n    final var adapter = new OkHttpRequestAdapter(authenticationProviderMock) {\r\n\r\n        public Request test() throws Exception {\r\n            RequestInformation ri = new RequestInformation();\r\n            ri.httpMethod = method;\r\n            ri.urlTemplate = \"http://localhost:1234\";\r\n            Span span1 = GlobalOpenTelemetry.getTracer(\"\").spanBuilder(\"\").startSpan();\r\n            Span span2 = GlobalOpenTelemetry.getTracer(\"\").spanBuilder(\"\").startSpan();\r\n            return this.getRequestFromRequestInformation(ri, span1, span2);\r\n        }\r\n    };\r\n    final var request = assertDoesNotThrow(() -> adapter.test());\r\n    assertNotNull(request.body());\r\n}"
                }
              }
            }
          },
          {
            "mockObjectId": 38,
            "mockRole": "mock",
            "variableName": "authenticationProviderMock",
            "variableType": "var",
            "mockedClass": "com.microsoft.kiota.authentication.AuthenticationProvider",
            "packageName": "com.microsoft.kiota.http",
            "filePath": "C:\\Java_projects\\Microsoft\\kiota-java\\components\\http\\okHttp\\src\\test\\java\\com\\microsoft\\kiota\\http\\OkHttpRequestAdapterTest.java",
            "testMethodName": "sendStreamReturnsUsableStream",
            "isReuseableMock": false,
            "overlapLines": [
              77
            ],
            "testMethodRawCode": "@ParameterizedTest\r\n@ValueSource(ints = { 200, 201, 202, 203, 206 })\r\nvoid sendStreamReturnsUsableStream(int statusCode) throws Exception {\r\n    final var authenticationProviderMock = mock(AuthenticationProvider.class);\r\n    authenticationProviderMock.authenticateRequest(any(RequestInformation.class), any(Map.class));\r\n    final var text = \"my-demo-text\";\r\n    final var bufferedSource = Okio.buffer(Okio.source(new ByteArrayInputStream(text.getBytes(\"UTF-8\"))));\r\n    final var client = getMockClient(new Response.Builder().code(statusCode).message(\"OK\").protocol(Protocol.HTTP_1_1).request(new Request.Builder().url(\"http://localhost\").build()).body(ResponseBody.create(bufferedSource, MediaType.parse(\"application/binary\"), text.getBytes(\"UTF-8\").length)).build());\r\n    final var requestAdapter = new OkHttpRequestAdapter(authenticationProviderMock, null, null, client);\r\n    final var requestInformation = new RequestInformation() {\r\n\r\n        {\r\n            setUri(new URI(\"https://localhost\"));\r\n            httpMethod = HttpMethod.GET;\r\n        }\r\n    };\r\n    InputStream response = null;\r\n    try {\r\n        response = requestAdapter.sendPrimitive(requestInformation, null, InputStream.class);\r\n        assertNotNull(response);\r\n        assertEquals(text, new String(response.readAllBytes(), StandardCharsets.UTF_8));\r\n    } finally {\r\n        if (response != null) {\r\n            response.close();\r\n        }\r\n    }\r\n}",
            "shareableMockLines": {},
            "testMockLines": {
              "77": "final var authenticationProviderMock = mock(AuthenticationProvider.class);",
              "78": "authenticationProviderMock.authenticateRequest(any(RequestInformation.class), any(Map.class));"
            },
            "abstractedStatement": {},
            "rawStatementInfo": {
              "77": {
                "code": "final var authenticationProviderMock = mock(AuthenticationProvider.class);",
                "line": 77,
                "type": "METHOD_MOCK_CREATION",
                "locate": "Test Case",
                "abstractedStatement": "",
                "isMockRelated": true,
                "isShareable": false,
                "locationContext": {
                  "methodName": "sendStreamReturnsUsableStream",
                  "methodAnnotations": [
                    "ParameterizedTest",
                    "ValueSource"
                  ],
                  "methodRawCode": "@ParameterizedTest\r\n@ValueSource(ints = { 200, 201, 202, 203, 206 })\r\nvoid sendStreamReturnsUsableStream(int statusCode) throws Exception {\r\n    final var authenticationProviderMock = mock(AuthenticationProvider.class);\r\n    authenticationProviderMock.authenticateRequest(any(RequestInformation.class), any(Map.class));\r\n    final var text = \"my-demo-text\";\r\n    final var bufferedSource = Okio.buffer(Okio.source(new ByteArrayInputStream(text.getBytes(\"UTF-8\"))));\r\n    final var client = getMockClient(new Response.Builder().code(statusCode).message(\"OK\").protocol(Protocol.HTTP_1_1).request(new Request.Builder().url(\"http://localhost\").build()).body(ResponseBody.create(bufferedSource, MediaType.parse(\"application/binary\"), text.getBytes(\"UTF-8\").length)).build());\r\n    final var requestAdapter = new OkHttpRequestAdapter(authenticationProviderMock, null, null, client);\r\n    final var requestInformation = new RequestInformation() {\r\n\r\n        {\r\n            setUri(new URI(\"https://localhost\"));\r\n            httpMethod = HttpMethod.GET;\r\n        }\r\n    };\r\n    InputStream response = null;\r\n    try {\r\n        response = requestAdapter.sendPrimitive(requestInformation, null, InputStream.class);\r\n        assertNotNull(response);\r\n        assertEquals(text, new String(response.readAllBytes(), StandardCharsets.UTF_8));\r\n    } finally {\r\n        if (response != null) {\r\n            response.close();\r\n        }\r\n    }\r\n}"
                }
              },
              "78": {
                "code": "authenticationProviderMock.authenticateRequest(any(RequestInformation.class), any(Map.class));",
                "line": 78,
                "type": "REFERENCE",
                "locate": "Test Case",
                "abstractedStatement": "",
                "isMockRelated": false,
                "isShareable": false,
                "locationContext": {
                  "methodName": "sendStreamReturnsUsableStream",
                  "methodAnnotations": [
                    "ParameterizedTest",
                    "ValueSource"
                  ],
                  "methodRawCode": "@ParameterizedTest\r\n@ValueSource(ints = { 200, 201, 202, 203, 206 })\r\nvoid sendStreamReturnsUsableStream(int statusCode) throws Exception {\r\n    final var authenticationProviderMock = mock(AuthenticationProvider.class);\r\n    authenticationProviderMock.authenticateRequest(any(RequestInformation.class), any(Map.class));\r\n    final var text = \"my-demo-text\";\r\n    final var bufferedSource = Okio.buffer(Okio.source(new ByteArrayInputStream(text.getBytes(\"UTF-8\"))));\r\n    final var client = getMockClient(new Response.Builder().code(statusCode).message(\"OK\").protocol(Protocol.HTTP_1_1).request(new Request.Builder().url(\"http://localhost\").build()).body(ResponseBody.create(bufferedSource, MediaType.parse(\"application/binary\"), text.getBytes(\"UTF-8\").length)).build());\r\n    final var requestAdapter = new OkHttpRequestAdapter(authenticationProviderMock, null, null, client);\r\n    final var requestInformation = new RequestInformation() {\r\n\r\n        {\r\n            setUri(new URI(\"https://localhost\"));\r\n            httpMethod = HttpMethod.GET;\r\n        }\r\n    };\r\n    InputStream response = null;\r\n    try {\r\n        response = requestAdapter.sendPrimitive(requestInformation, null, InputStream.class);\r\n        assertNotNull(response);\r\n        assertEquals(text, new String(response.readAllBytes(), StandardCharsets.UTF_8));\r\n    } finally {\r\n        if (response != null) {\r\n            response.close();\r\n        }\r\n    }\r\n}"
                }
              }
            }
          },
          {
            "mockObjectId": 39,
            "mockRole": "mock",
            "variableName": "authenticationProviderMock",
            "variableType": "var",
            "mockedClass": "com.microsoft.kiota.authentication.AuthenticationProvider",
            "packageName": "com.microsoft.kiota.http",
            "filePath": "C:\\Java_projects\\Microsoft\\kiota-java\\components\\http\\okHttp\\src\\test\\java\\com\\microsoft\\kiota\\http\\OkHttpRequestAdapterTest.java",
            "testMethodName": "sendStreamReturnsNullOnNoContent",
            "isReuseableMock": false,
            "overlapLines": [
              120
            ],
            "testMethodRawCode": "@ParameterizedTest\r\n@ValueSource(ints = { 200, 201, 202, 203, 204 })\r\nvoid sendStreamReturnsNullOnNoContent(int statusCode) throws Exception {\r\n    final var authenticationProviderMock = mock(AuthenticationProvider.class);\r\n    authenticationProviderMock.authenticateRequest(any(RequestInformation.class), any(Map.class));\r\n    final var client = getMockClient(new Response.Builder().code(statusCode).message(\"OK\").protocol(Protocol.HTTP_1_1).request(new Request.Builder().url(\"http://localhost\").build()).body(null).build());\r\n    final var requestAdapter = new OkHttpRequestAdapter(authenticationProviderMock, null, null, client);\r\n    final var requestInformation = new RequestInformation() {\r\n\r\n        {\r\n            setUri(new URI(\"https://localhost\"));\r\n            httpMethod = HttpMethod.GET;\r\n        }\r\n    };\r\n    final var response = requestAdapter.sendPrimitive(requestInformation, null, InputStream.class);\r\n    assertNull(response);\r\n}",
            "shareableMockLines": {},
            "testMockLines": {
              "120": "final var authenticationProviderMock = mock(AuthenticationProvider.class);",
              "121": "authenticationProviderMock.authenticateRequest(any(RequestInformation.class), any(Map.class));"
            },
            "abstractedStatement": {},
            "rawStatementInfo": {
              "120": {
                "code": "final var authenticationProviderMock = mock(AuthenticationProvider.class);",
                "line": 120,
                "type": "METHOD_MOCK_CREATION",
                "locate": "Test Case",
                "abstractedStatement": "",
                "isMockRelated": true,
                "isShareable": false,
                "locationContext": {
                  "methodName": "sendStreamReturnsNullOnNoContent",
                  "methodAnnotations": [
                    "ParameterizedTest",
                    "ValueSource"
                  ],
                  "methodRawCode": "@ParameterizedTest\r\n@ValueSource(ints = { 200, 201, 202, 203, 204 })\r\nvoid sendStreamReturnsNullOnNoContent(int statusCode) throws Exception {\r\n    final var authenticationProviderMock = mock(AuthenticationProvider.class);\r\n    authenticationProviderMock.authenticateRequest(any(RequestInformation.class), any(Map.class));\r\n    final var client = getMockClient(new Response.Builder().code(statusCode).message(\"OK\").protocol(Protocol.HTTP_1_1).request(new Request.Builder().url(\"http://localhost\").build()).body(null).build());\r\n    final var requestAdapter = new OkHttpRequestAdapter(authenticationProviderMock, null, null, client);\r\n    final var requestInformation = new RequestInformation() {\r\n\r\n        {\r\n            setUri(new URI(\"https://localhost\"));\r\n            httpMethod = HttpMethod.GET;\r\n        }\r\n    };\r\n    final var response = requestAdapter.sendPrimitive(requestInformation, null, InputStream.class);\r\n    assertNull(response);\r\n}"
                }
              },
              "121": {
                "code": "authenticationProviderMock.authenticateRequest(any(RequestInformation.class), any(Map.class));",
                "line": 121,
                "type": "REFERENCE",
                "locate": "Test Case",
                "abstractedStatement": "",
                "isMockRelated": false,
                "isShareable": false,
                "locationContext": {
                  "methodName": "sendStreamReturnsNullOnNoContent",
                  "methodAnnotations": [
                    "ParameterizedTest",
                    "ValueSource"
                  ],
                  "methodRawCode": "@ParameterizedTest\r\n@ValueSource(ints = { 200, 201, 202, 203, 204 })\r\nvoid sendStreamReturnsNullOnNoContent(int statusCode) throws Exception {\r\n    final var authenticationProviderMock = mock(AuthenticationProvider.class);\r\n    authenticationProviderMock.authenticateRequest(any(RequestInformation.class), any(Map.class));\r\n    final var client = getMockClient(new Response.Builder().code(statusCode).message(\"OK\").protocol(Protocol.HTTP_1_1).request(new Request.Builder().url(\"http://localhost\").build()).body(null).build());\r\n    final var requestAdapter = new OkHttpRequestAdapter(authenticationProviderMock, null, null, client);\r\n    final var requestInformation = new RequestInformation() {\r\n\r\n        {\r\n            setUri(new URI(\"https://localhost\"));\r\n            httpMethod = HttpMethod.GET;\r\n        }\r\n    };\r\n    final var response = requestAdapter.sendPrimitive(requestInformation, null, InputStream.class);\r\n    assertNull(response);\r\n}"
                }
              }
            }
          },
          {
            "mockObjectId": 40,
            "mockRole": "mock",
            "variableName": "authenticationProviderMock",
            "variableType": "var",
            "mockedClass": "com.microsoft.kiota.authentication.AuthenticationProvider",
            "packageName": "com.microsoft.kiota.http",
            "filePath": "C:\\Java_projects\\Microsoft\\kiota-java\\components\\http\\okHttp\\src\\test\\java\\com\\microsoft\\kiota\\http\\OkHttpRequestAdapterTest.java",
            "testMethodName": "sendReturnsNullOnNoContent",
            "isReuseableMock": false,
            "overlapLines": [
              149
            ],
            "testMethodRawCode": "@ParameterizedTest\r\n@ValueSource(ints = { 200, 201, 202, 203, 204, 205 })\r\nvoid sendReturnsNullOnNoContent(int statusCode) throws Exception {\r\n    final var authenticationProviderMock = mock(AuthenticationProvider.class);\r\n    authenticationProviderMock.authenticateRequest(any(RequestInformation.class), any(Map.class));\r\n    final var client = getMockClient(new Response.Builder().code(statusCode).message(\"OK\").protocol(Protocol.HTTP_1_1).request(new Request.Builder().url(\"http://localhost\").build()).body(null).build());\r\n    final var requestAdapter = new OkHttpRequestAdapter(authenticationProviderMock, null, null, client);\r\n    final var requestInformation = new RequestInformation() {\r\n\r\n        {\r\n            setUri(new URI(\"https://localhost\"));\r\n            httpMethod = HttpMethod.GET;\r\n        }\r\n    };\r\n    final var mockEntity = mock(Parsable.class);\r\n    when(mockEntity.getFieldDeserializers()).thenReturn(new HashMap<>());\r\n    final var response = requestAdapter.send(requestInformation, null, (node) -> mockEntity);\r\n    assertNull(response);\r\n}",
            "shareableMockLines": {},
            "testMockLines": {
              "149": "final var authenticationProviderMock = mock(AuthenticationProvider.class);",
              "150": "authenticationProviderMock.authenticateRequest(any(RequestInformation.class), any(Map.class));"
            },
            "abstractedStatement": {},
            "rawStatementInfo": {
              "149": {
                "code": "final var authenticationProviderMock = mock(AuthenticationProvider.class);",
                "line": 149,
                "type": "METHOD_MOCK_CREATION",
                "locate": "Test Case",
                "abstractedStatement": "",
                "isMockRelated": true,
                "isShareable": false,
                "locationContext": {
                  "methodName": "sendReturnsNullOnNoContent",
                  "methodAnnotations": [
                    "ParameterizedTest",
                    "ValueSource"
                  ],
                  "methodRawCode": "@ParameterizedTest\r\n@ValueSource(ints = { 200, 201, 202, 203, 204, 205 })\r\nvoid sendReturnsNullOnNoContent(int statusCode) throws Exception {\r\n    final var authenticationProviderMock = mock(AuthenticationProvider.class);\r\n    authenticationProviderMock.authenticateRequest(any(RequestInformation.class), any(Map.class));\r\n    final var client = getMockClient(new Response.Builder().code(statusCode).message(\"OK\").protocol(Protocol.HTTP_1_1).request(new Request.Builder().url(\"http://localhost\").build()).body(null).build());\r\n    final var requestAdapter = new OkHttpRequestAdapter(authenticationProviderMock, null, null, client);\r\n    final var requestInformation = new RequestInformation() {\r\n\r\n        {\r\n            setUri(new URI(\"https://localhost\"));\r\n            httpMethod = HttpMethod.GET;\r\n        }\r\n    };\r\n    final var mockEntity = mock(Parsable.class);\r\n    when(mockEntity.getFieldDeserializers()).thenReturn(new HashMap<>());\r\n    final var response = requestAdapter.send(requestInformation, null, (node) -> mockEntity);\r\n    assertNull(response);\r\n}"
                }
              },
              "150": {
                "code": "authenticationProviderMock.authenticateRequest(any(RequestInformation.class), any(Map.class));",
                "line": 150,
                "type": "REFERENCE",
                "locate": "Test Case",
                "abstractedStatement": "",
                "isMockRelated": false,
                "isShareable": false,
                "locationContext": {
                  "methodName": "sendReturnsNullOnNoContent",
                  "methodAnnotations": [
                    "ParameterizedTest",
                    "ValueSource"
                  ],
                  "methodRawCode": "@ParameterizedTest\r\n@ValueSource(ints = { 200, 201, 202, 203, 204, 205 })\r\nvoid sendReturnsNullOnNoContent(int statusCode) throws Exception {\r\n    final var authenticationProviderMock = mock(AuthenticationProvider.class);\r\n    authenticationProviderMock.authenticateRequest(any(RequestInformation.class), any(Map.class));\r\n    final var client = getMockClient(new Response.Builder().code(statusCode).message(\"OK\").protocol(Protocol.HTTP_1_1).request(new Request.Builder().url(\"http://localhost\").build()).body(null).build());\r\n    final var requestAdapter = new OkHttpRequestAdapter(authenticationProviderMock, null, null, client);\r\n    final var requestInformation = new RequestInformation() {\r\n\r\n        {\r\n            setUri(new URI(\"https://localhost\"));\r\n            httpMethod = HttpMethod.GET;\r\n        }\r\n    };\r\n    final var mockEntity = mock(Parsable.class);\r\n    when(mockEntity.getFieldDeserializers()).thenReturn(new HashMap<>());\r\n    final var response = requestAdapter.send(requestInformation, null, (node) -> mockEntity);\r\n    assertNull(response);\r\n}"
                }
              }
            }
          },
          {
            "mockObjectId": 42,
            "mockRole": "mock",
            "variableName": "authenticationProviderMock",
            "variableType": "var",
            "mockedClass": "com.microsoft.kiota.authentication.AuthenticationProvider",
            "packageName": "com.microsoft.kiota.http",
            "filePath": "C:\\Java_projects\\Microsoft\\kiota-java\\components\\http\\okHttp\\src\\test\\java\\com\\microsoft\\kiota\\http\\OkHttpRequestAdapterTest.java",
            "testMethodName": "sendReturnsObjectOnContent",
            "isReuseableMock": false,
            "overlapLines": [
              179
            ],
            "testMethodRawCode": "@ParameterizedTest\r\n@ValueSource(ints = { 200, 201, 202, 203 })\r\nvoid sendReturnsObjectOnContent(int statusCode) throws Exception {\r\n    final var authenticationProviderMock = mock(AuthenticationProvider.class);\r\n    authenticationProviderMock.authenticateRequest(any(RequestInformation.class), any(Map.class));\r\n    final var client = getMockClient(new Response.Builder().code(statusCode).message(\"OK\").protocol(Protocol.HTTP_1_1).request(new Request.Builder().url(\"http://localhost\").build()).body(ResponseBody.create(\"test\".getBytes(\"UTF-8\"), MediaType.parse(\"application/json\"))).build());\r\n    final var requestInformation = new RequestInformation() {\r\n\r\n        {\r\n            setUri(new URI(\"https://localhost\"));\r\n            httpMethod = HttpMethod.GET;\r\n        }\r\n    };\r\n    final var mockEntity = mock(Parsable.class);\r\n    when(mockEntity.getFieldDeserializers()).thenReturn(new HashMap<>());\r\n    final var mockParseNode = mock(ParseNode.class);\r\n    when(mockParseNode.getObjectValue(any(ParsableFactory.class))).thenReturn(mockEntity);\r\n    final var mockFactory = mock(ParseNodeFactory.class);\r\n    when(mockFactory.getParseNode(any(String.class), any(InputStream.class))).thenReturn(mockParseNode);\r\n    when(mockFactory.getValidContentType()).thenReturn(\"application/json\");\r\n    final var requestAdapter = new OkHttpRequestAdapter(authenticationProviderMock, mockFactory, null, client);\r\n    final var response = requestAdapter.send(requestInformation, null, (node) -> mockEntity);\r\n    assertNotNull(response);\r\n}",
            "shareableMockLines": {},
            "testMockLines": {
              "179": "final var authenticationProviderMock = mock(AuthenticationProvider.class);",
              "180": "authenticationProviderMock.authenticateRequest(any(RequestInformation.class), any(Map.class));"
            },
            "abstractedStatement": {},
            "rawStatementInfo": {
              "179": {
                "code": "final var authenticationProviderMock = mock(AuthenticationProvider.class);",
                "line": 179,
                "type": "METHOD_MOCK_CREATION",
                "locate": "Test Case",
                "abstractedStatement": "",
                "isMockRelated": true,
                "isShareable": false,
                "locationContext": {
                  "methodName": "sendReturnsObjectOnContent",
                  "methodAnnotations": [
                    "ParameterizedTest",
                    "ValueSource"
                  ],
                  "methodRawCode": "@ParameterizedTest\r\n@ValueSource(ints = { 200, 201, 202, 203 })\r\nvoid sendReturnsObjectOnContent(int statusCode) throws Exception {\r\n    final var authenticationProviderMock = mock(AuthenticationProvider.class);\r\n    authenticationProviderMock.authenticateRequest(any(RequestInformation.class), any(Map.class));\r\n    final var client = getMockClient(new Response.Builder().code(statusCode).message(\"OK\").protocol(Protocol.HTTP_1_1).request(new Request.Builder().url(\"http://localhost\").build()).body(ResponseBody.create(\"test\".getBytes(\"UTF-8\"), MediaType.parse(\"application/json\"))).build());\r\n    final var requestInformation = new RequestInformation() {\r\n\r\n        {\r\n            setUri(new URI(\"https://localhost\"));\r\n            httpMethod = HttpMethod.GET;\r\n        }\r\n    };\r\n    final var mockEntity = mock(Parsable.class);\r\n    when(mockEntity.getFieldDeserializers()).thenReturn(new HashMap<>());\r\n    final var mockParseNode = mock(ParseNode.class);\r\n    when(mockParseNode.getObjectValue(any(ParsableFactory.class))).thenReturn(mockEntity);\r\n    final var mockFactory = mock(ParseNodeFactory.class);\r\n    when(mockFactory.getParseNode(any(String.class), any(InputStream.class))).thenReturn(mockParseNode);\r\n    when(mockFactory.getValidContentType()).thenReturn(\"application/json\");\r\n    final var requestAdapter = new OkHttpRequestAdapter(authenticationProviderMock, mockFactory, null, client);\r\n    final var response = requestAdapter.send(requestInformation, null, (node) -> mockEntity);\r\n    assertNotNull(response);\r\n}"
                }
              },
              "180": {
                "code": "authenticationProviderMock.authenticateRequest(any(RequestInformation.class), any(Map.class));",
                "line": 180,
                "type": "REFERENCE",
                "locate": "Test Case",
                "abstractedStatement": "",
                "isMockRelated": false,
                "isShareable": false,
                "locationContext": {
                  "methodName": "sendReturnsObjectOnContent",
                  "methodAnnotations": [
                    "ParameterizedTest",
                    "ValueSource"
                  ],
                  "methodRawCode": "@ParameterizedTest\r\n@ValueSource(ints = { 200, 201, 202, 203 })\r\nvoid sendReturnsObjectOnContent(int statusCode) throws Exception {\r\n    final var authenticationProviderMock = mock(AuthenticationProvider.class);\r\n    authenticationProviderMock.authenticateRequest(any(RequestInformation.class), any(Map.class));\r\n    final var client = getMockClient(new Response.Builder().code(statusCode).message(\"OK\").protocol(Protocol.HTTP_1_1).request(new Request.Builder().url(\"http://localhost\").build()).body(ResponseBody.create(\"test\".getBytes(\"UTF-8\"), MediaType.parse(\"application/json\"))).build());\r\n    final var requestInformation = new RequestInformation() {\r\n\r\n        {\r\n            setUri(new URI(\"https://localhost\"));\r\n            httpMethod = HttpMethod.GET;\r\n        }\r\n    };\r\n    final var mockEntity = mock(Parsable.class);\r\n    when(mockEntity.getFieldDeserializers()).thenReturn(new HashMap<>());\r\n    final var mockParseNode = mock(ParseNode.class);\r\n    when(mockParseNode.getObjectValue(any(ParsableFactory.class))).thenReturn(mockEntity);\r\n    final var mockFactory = mock(ParseNodeFactory.class);\r\n    when(mockFactory.getParseNode(any(String.class), any(InputStream.class))).thenReturn(mockParseNode);\r\n    when(mockFactory.getValidContentType()).thenReturn(\"application/json\");\r\n    final var requestAdapter = new OkHttpRequestAdapter(authenticationProviderMock, mockFactory, null, client);\r\n    final var response = requestAdapter.send(requestInformation, null, (node) -> mockEntity);\r\n    assertNotNull(response);\r\n}"
                }
              }
            }
          },
          {
            "mockObjectId": 46,
            "mockRole": "mock",
            "variableName": "authenticationProviderMock",
            "variableType": "var",
            "mockedClass": "com.microsoft.kiota.authentication.AuthenticationProvider",
            "packageName": "com.microsoft.kiota.http",
            "filePath": "C:\\Java_projects\\Microsoft\\kiota-java\\components\\http\\okHttp\\src\\test\\java\\com\\microsoft\\kiota\\http\\OkHttpRequestAdapterTest.java",
            "testMethodName": "throwsAPIException",
            "isReuseableMock": false,
            "overlapLines": [
              240
            ],
            "testMethodRawCode": "@SuppressWarnings(\"unchecked\")\r\n@ParameterizedTest\r\n@MethodSource(\"providesErrorMappings\")\r\nvoid throwsAPIException(int responseStatusCode, List<String> errorMappingCodes, boolean expectDeserializedException) throws Exception {\r\n    final var authenticationProviderMock = mock(AuthenticationProvider.class);\r\n    authenticationProviderMock.authenticateRequest(any(RequestInformation.class), any(Map.class));\r\n    final var client = getMockClient(new Response.Builder().code(responseStatusCode).message(\"Not Found\").protocol(Protocol.HTTP_1_1).request(new Request.Builder().url(\"http://localhost\").build()).body(ResponseBody.create(\"test\".getBytes(\"UTF-8\"), MediaType.parse(\"application/json\"))).header(\"request-id\", \"request-id-value\").build());\r\n    final var requestInformation = new RequestInformation() {\r\n\r\n        {\r\n            setUri(new URI(\"https://localhost\"));\r\n            httpMethod = HttpMethod.GET;\r\n        }\r\n    };\r\n    final var mockEntity = mock(Parsable.class);\r\n    when(mockEntity.getFieldDeserializers()).thenReturn(new HashMap<>());\r\n    final var mockParsableFactory = mock(ParsableFactory.class);\r\n    when(mockParsableFactory.create(any(ParseNode.class))).thenReturn(mockEntity);\r\n    final var mockParseNode = mock(ParseNode.class);\r\n    when(mockParseNode.getObjectValue(any(ParsableFactory.class))).thenReturn(mockEntity);\r\n    final var mockFactory = mock(ParseNodeFactory.class);\r\n    when(mockFactory.getParseNode(any(String.class), any(InputStream.class))).thenReturn(mockParseNode);\r\n    when(mockFactory.getValidContentType()).thenReturn(\"application/json\");\r\n    final var requestAdapter = new OkHttpRequestAdapter(authenticationProviderMock, mockFactory, null, client);\r\n    final var errorMappings = errorMappingCodes == null ? null : new HashMap<String, ParsableFactory<? extends Parsable>>();\r\n    if (errorMappings != null)\r\n        errorMappingCodes.forEach((mapping) -> errorMappings.put(mapping, mockParsableFactory));\r\n    final var exception = assertThrows(ApiException.class, () -> requestAdapter.send(requestInformation, errorMappings, (node) -> mockEntity));\r\n    assertNotNull(exception);\r\n    if (expectDeserializedException)\r\n        verify(mockParseNode, times(1)).getObjectValue(mockParsableFactory);\r\n    assertEquals(responseStatusCode, exception.getResponseStatusCode());\r\n    assertTrue(exception.getResponseHeaders().containsKey(\"request-id\"));\r\n}",
            "shareableMockLines": {},
            "testMockLines": {
              "240": "final var authenticationProviderMock = mock(AuthenticationProvider.class);",
              "241": "authenticationProviderMock.authenticateRequest(any(RequestInformation.class), any(Map.class));"
            },
            "abstractedStatement": {},
            "rawStatementInfo": {
              "240": {
                "code": "final var authenticationProviderMock = mock(AuthenticationProvider.class);",
                "line": 240,
                "type": "METHOD_MOCK_CREATION",
                "locate": "Test Case",
                "abstractedStatement": "",
                "isMockRelated": true,
                "isShareable": false,
                "locationContext": {
                  "methodName": "throwsAPIException",
                  "methodAnnotations": [
                    "SuppressWarnings",
                    "ParameterizedTest",
                    "MethodSource"
                  ],
                  "methodRawCode": "@SuppressWarnings(\"unchecked\")\r\n@ParameterizedTest\r\n@MethodSource(\"providesErrorMappings\")\r\nvoid throwsAPIException(int responseStatusCode, List<String> errorMappingCodes, boolean expectDeserializedException) throws Exception {\r\n    final var authenticationProviderMock = mock(AuthenticationProvider.class);\r\n    authenticationProviderMock.authenticateRequest(any(RequestInformation.class), any(Map.class));\r\n    final var client = getMockClient(new Response.Builder().code(responseStatusCode).message(\"Not Found\").protocol(Protocol.HTTP_1_1).request(new Request.Builder().url(\"http://localhost\").build()).body(ResponseBody.create(\"test\".getBytes(\"UTF-8\"), MediaType.parse(\"application/json\"))).header(\"request-id\", \"request-id-value\").build());\r\n    final var requestInformation = new RequestInformation() {\r\n\r\n        {\r\n            setUri(new URI(\"https://localhost\"));\r\n            httpMethod = HttpMethod.GET;\r\n        }\r\n    };\r\n    final var mockEntity = mock(Parsable.class);\r\n    when(mockEntity.getFieldDeserializers()).thenReturn(new HashMap<>());\r\n    final var mockParsableFactory = mock(ParsableFactory.class);\r\n    when(mockParsableFactory.create(any(ParseNode.class))).thenReturn(mockEntity);\r\n    final var mockParseNode = mock(ParseNode.class);\r\n    when(mockParseNode.getObjectValue(any(ParsableFactory.class))).thenReturn(mockEntity);\r\n    final var mockFactory = mock(ParseNodeFactory.class);\r\n    when(mockFactory.getParseNode(any(String.class), any(InputStream.class))).thenReturn(mockParseNode);\r\n    when(mockFactory.getValidContentType()).thenReturn(\"application/json\");\r\n    final var requestAdapter = new OkHttpRequestAdapter(authenticationProviderMock, mockFactory, null, client);\r\n    final var errorMappings = errorMappingCodes == null ? null : new HashMap<String, ParsableFactory<? extends Parsable>>();\r\n    if (errorMappings != null)\r\n        errorMappingCodes.forEach((mapping) -> errorMappings.put(mapping, mockParsableFactory));\r\n    final var exception = assertThrows(ApiException.class, () -> requestAdapter.send(requestInformation, errorMappings, (node) -> mockEntity));\r\n    assertNotNull(exception);\r\n    if (expectDeserializedException)\r\n        verify(mockParseNode, times(1)).getObjectValue(mockParsableFactory);\r\n    assertEquals(responseStatusCode, exception.getResponseStatusCode());\r\n    assertTrue(exception.getResponseHeaders().containsKey(\"request-id\"));\r\n}"
                }
              },
              "241": {
                "code": "authenticationProviderMock.authenticateRequest(any(RequestInformation.class), any(Map.class));",
                "line": 241,
                "type": "REFERENCE",
                "locate": "Test Case",
                "abstractedStatement": "",
                "isMockRelated": false,
                "isShareable": false,
                "locationContext": {
                  "methodName": "throwsAPIException",
                  "methodAnnotations": [
                    "SuppressWarnings",
                    "ParameterizedTest",
                    "MethodSource"
                  ],
                  "methodRawCode": "@SuppressWarnings(\"unchecked\")\r\n@ParameterizedTest\r\n@MethodSource(\"providesErrorMappings\")\r\nvoid throwsAPIException(int responseStatusCode, List<String> errorMappingCodes, boolean expectDeserializedException) throws Exception {\r\n    final var authenticationProviderMock = mock(AuthenticationProvider.class);\r\n    authenticationProviderMock.authenticateRequest(any(RequestInformation.class), any(Map.class));\r\n    final var client = getMockClient(new Response.Builder().code(responseStatusCode).message(\"Not Found\").protocol(Protocol.HTTP_1_1).request(new Request.Builder().url(\"http://localhost\").build()).body(ResponseBody.create(\"test\".getBytes(\"UTF-8\"), MediaType.parse(\"application/json\"))).header(\"request-id\", \"request-id-value\").build());\r\n    final var requestInformation = new RequestInformation() {\r\n\r\n        {\r\n            setUri(new URI(\"https://localhost\"));\r\n            httpMethod = HttpMethod.GET;\r\n        }\r\n    };\r\n    final var mockEntity = mock(Parsable.class);\r\n    when(mockEntity.getFieldDeserializers()).thenReturn(new HashMap<>());\r\n    final var mockParsableFactory = mock(ParsableFactory.class);\r\n    when(mockParsableFactory.create(any(ParseNode.class))).thenReturn(mockEntity);\r\n    final var mockParseNode = mock(ParseNode.class);\r\n    when(mockParseNode.getObjectValue(any(ParsableFactory.class))).thenReturn(mockEntity);\r\n    final var mockFactory = mock(ParseNodeFactory.class);\r\n    when(mockFactory.getParseNode(any(String.class), any(InputStream.class))).thenReturn(mockParseNode);\r\n    when(mockFactory.getValidContentType()).thenReturn(\"application/json\");\r\n    final var requestAdapter = new OkHttpRequestAdapter(authenticationProviderMock, mockFactory, null, client);\r\n    final var errorMappings = errorMappingCodes == null ? null : new HashMap<String, ParsableFactory<? extends Parsable>>();\r\n    if (errorMappings != null)\r\n        errorMappingCodes.forEach((mapping) -> errorMappings.put(mapping, mockParsableFactory));\r\n    final var exception = assertThrows(ApiException.class, () -> requestAdapter.send(requestInformation, errorMappings, (node) -> mockEntity));\r\n    assertNotNull(exception);\r\n    if (expectDeserializedException)\r\n        verify(mockParseNode, times(1)).getObjectValue(mockParsableFactory);\r\n    assertEquals(responseStatusCode, exception.getResponseStatusCode());\r\n    assertTrue(exception.getResponseHeaders().containsKey(\"request-id\"));\r\n}"
                }
              }
            }
          },
          {
            "mockObjectId": 51,
            "mockRole": "mock",
            "variableName": "authenticationProviderMock",
            "variableType": "var",
            "mockedClass": "com.microsoft.kiota.authentication.AuthenticationProvider",
            "packageName": "com.microsoft.kiota.http",
            "filePath": "C:\\Java_projects\\Microsoft\\kiota-java\\components\\http\\okHttp\\src\\test\\java\\com\\microsoft\\kiota\\http\\OkHttpRequestAdapterTest.java",
            "testMethodName": "getRequestFromRequestInformationHasCorrectContentLength_JsonPayload",
            "isReuseableMock": false,
            "overlapLines": [
              297
            ],
            "testMethodRawCode": "@Test\r\nvoid getRequestFromRequestInformationHasCorrectContentLength_JsonPayload() throws Exception {\r\n    final var authenticationProviderMock = mock(AuthenticationProvider.class);\r\n    final var requestInformation = new RequestInformation();\r\n    requestInformation.setUri(new URI(\"https://localhost\"));\r\n    ByteArrayInputStream content = new ByteArrayInputStream(\"{\\\"name\\\":\\\"value\\\",\\\"array\\\":[\\\"1\\\",\\\"2\\\",\\\"3\\\"]}\".getBytes(StandardCharsets.UTF_8));\r\n    requestInformation.setStreamContent(content, \"application/json\");\r\n    requestInformation.httpMethod = HttpMethod.PUT;\r\n    final var contentLength = content.available();\r\n    requestInformation.headers.tryAdd(\"Content-Length\", String.valueOf(contentLength));\r\n    final var adapter = new OkHttpRequestAdapter(authenticationProviderMock);\r\n    final var request = adapter.getRequestFromRequestInformation(requestInformation, mock(Span.class), mock(Span.class));\r\n    assertEquals(String.valueOf(contentLength), request.headers().get(\"Content-Length\"));\r\n    assertEquals(\"application/json\", request.headers().get(\"Content-Type\"));\r\n    assertNotNull(request.body());\r\n    assertEquals(request.body().contentLength(), contentLength);\r\n    assertEquals(request.body().contentType(), MediaType.parse(\"application/json\"));\r\n}",
            "shareableMockLines": {},
            "testMockLines": {
              "297": "final var authenticationProviderMock = mock(AuthenticationProvider.class);"
            },
            "abstractedStatement": {},
            "rawStatementInfo": {
              "297": {
                "code": "final var authenticationProviderMock = mock(AuthenticationProvider.class);",
                "line": 297,
                "type": "METHOD_MOCK_CREATION",
                "locate": "Test Case",
                "abstractedStatement": "",
                "isMockRelated": true,
                "isShareable": false,
                "locationContext": {
                  "methodName": "getRequestFromRequestInformationHasCorrectContentLength_JsonPayload",
                  "methodAnnotations": [
                    "Test"
                  ],
                  "methodRawCode": "@Test\r\nvoid getRequestFromRequestInformationHasCorrectContentLength_JsonPayload() throws Exception {\r\n    final var authenticationProviderMock = mock(AuthenticationProvider.class);\r\n    final var requestInformation = new RequestInformation();\r\n    requestInformation.setUri(new URI(\"https://localhost\"));\r\n    ByteArrayInputStream content = new ByteArrayInputStream(\"{\\\"name\\\":\\\"value\\\",\\\"array\\\":[\\\"1\\\",\\\"2\\\",\\\"3\\\"]}\".getBytes(StandardCharsets.UTF_8));\r\n    requestInformation.setStreamContent(content, \"application/json\");\r\n    requestInformation.httpMethod = HttpMethod.PUT;\r\n    final var contentLength = content.available();\r\n    requestInformation.headers.tryAdd(\"Content-Length\", String.valueOf(contentLength));\r\n    final var adapter = new OkHttpRequestAdapter(authenticationProviderMock);\r\n    final var request = adapter.getRequestFromRequestInformation(requestInformation, mock(Span.class), mock(Span.class));\r\n    assertEquals(String.valueOf(contentLength), request.headers().get(\"Content-Length\"));\r\n    assertEquals(\"application/json\", request.headers().get(\"Content-Type\"));\r\n    assertNotNull(request.body());\r\n    assertEquals(request.body().contentLength(), contentLength);\r\n    assertEquals(request.body().contentType(), MediaType.parse(\"application/json\"));\r\n}"
                }
              }
            }
          },
          {
            "mockObjectId": 52,
            "mockRole": "mock",
            "variableName": "authenticationProviderMock",
            "variableType": "var",
            "mockedClass": "com.microsoft.kiota.authentication.AuthenticationProvider",
            "packageName": "com.microsoft.kiota.http",
            "filePath": "C:\\Java_projects\\Microsoft\\kiota-java\\components\\http\\okHttp\\src\\test\\java\\com\\microsoft\\kiota\\http\\OkHttpRequestAdapterTest.java",
            "testMethodName": "getRequestFromRequestInformationIncludesContentLength_FilePayload",
            "isReuseableMock": false,
            "overlapLines": [
              323
            ],
            "testMethodRawCode": "@Test\r\nvoid getRequestFromRequestInformationIncludesContentLength_FilePayload() throws Exception {\r\n    final var authenticationProviderMock = mock(AuthenticationProvider.class);\r\n    final var testFile = new File(\"./src/test/resources/helloWorld.txt\");\r\n    final var requestInformation = new RequestInformation();\r\n    requestInformation.setUri(new URI(\"https://localhost\"));\r\n    requestInformation.httpMethod = HttpMethod.PUT;\r\n    final var contentLength = testFile.length();\r\n    requestInformation.headers.add(\"Content-Length\", String.valueOf(contentLength));\r\n    try (FileInputStream content = new FileInputStream(testFile)) {\r\n        requestInformation.setStreamContent(content, \"application/octet-stream\");\r\n        final var adapter = new OkHttpRequestAdapter(authenticationProviderMock);\r\n        final var request = adapter.getRequestFromRequestInformation(requestInformation, mock(Span.class), mock(Span.class));\r\n        assertEquals(String.valueOf(contentLength), request.headers().get(\"Content-Length\"));\r\n        assertEquals(\"application/octet-stream\", request.headers().get(\"Content-Type\"));\r\n        assertNotNull(request.body());\r\n        assertEquals(request.body().contentLength(), contentLength);\r\n        assertEquals(request.body().contentType(), MediaType.parse(\"application/octet-stream\"));\r\n    }\r\n}",
            "shareableMockLines": {},
            "testMockLines": {
              "323": "final var authenticationProviderMock = mock(AuthenticationProvider.class);"
            },
            "abstractedStatement": {},
            "rawStatementInfo": {
              "323": {
                "code": "final var authenticationProviderMock = mock(AuthenticationProvider.class);",
                "line": 323,
                "type": "METHOD_MOCK_CREATION",
                "locate": "Test Case",
                "abstractedStatement": "",
                "isMockRelated": true,
                "isShareable": false,
                "locationContext": {
                  "methodName": "getRequestFromRequestInformationIncludesContentLength_FilePayload",
                  "methodAnnotations": [
                    "Test"
                  ],
                  "methodRawCode": "@Test\r\nvoid getRequestFromRequestInformationIncludesContentLength_FilePayload() throws Exception {\r\n    final var authenticationProviderMock = mock(AuthenticationProvider.class);\r\n    final var testFile = new File(\"./src/test/resources/helloWorld.txt\");\r\n    final var requestInformation = new RequestInformation();\r\n    requestInformation.setUri(new URI(\"https://localhost\"));\r\n    requestInformation.httpMethod = HttpMethod.PUT;\r\n    final var contentLength = testFile.length();\r\n    requestInformation.headers.add(\"Content-Length\", String.valueOf(contentLength));\r\n    try (FileInputStream content = new FileInputStream(testFile)) {\r\n        requestInformation.setStreamContent(content, \"application/octet-stream\");\r\n        final var adapter = new OkHttpRequestAdapter(authenticationProviderMock);\r\n        final var request = adapter.getRequestFromRequestInformation(requestInformation, mock(Span.class), mock(Span.class));\r\n        assertEquals(String.valueOf(contentLength), request.headers().get(\"Content-Length\"));\r\n        assertEquals(\"application/octet-stream\", request.headers().get(\"Content-Type\"));\r\n        assertNotNull(request.body());\r\n        assertEquals(request.body().contentLength(), contentLength);\r\n        assertEquals(request.body().contentType(), MediaType.parse(\"application/octet-stream\"));\r\n    }\r\n}"
                }
              }
            }
          },
          {
            "mockObjectId": 53,
            "mockRole": "mock",
            "variableName": "authenticationProviderMock",
            "variableType": "var",
            "mockedClass": "com.microsoft.kiota.authentication.AuthenticationProvider",
            "packageName": "com.microsoft.kiota.http",
            "filePath": "C:\\Java_projects\\Microsoft\\kiota-java\\components\\http\\okHttp\\src\\test\\java\\com\\microsoft\\kiota\\http\\OkHttpRequestAdapterTest.java",
            "testMethodName": "getRequestFromRequestInformationWithoutContentLengthOverrideForStreamBody",
            "isReuseableMock": false,
            "overlapLines": [
              350
            ],
            "testMethodRawCode": "@Test\r\nvoid getRequestFromRequestInformationWithoutContentLengthOverrideForStreamBody() throws Exception {\r\n    final var authenticationProviderMock = mock(AuthenticationProvider.class);\r\n    final var testFile = new File(\"./src/test/resources/helloWorld.txt\");\r\n    final var requestInformation = new RequestInformation();\r\n    requestInformation.setUri(new URI(\"https://localhost\"));\r\n    requestInformation.httpMethod = HttpMethod.PUT;\r\n    try (FileInputStream content = new FileInputStream(testFile)) {\r\n        requestInformation.setStreamContent(content, \"application/octet-stream\");\r\n        final var adapter = new OkHttpRequestAdapter(authenticationProviderMock);\r\n        final var request = adapter.getRequestFromRequestInformation(requestInformation, mock(Span.class), mock(Span.class));\r\n        assertEquals(\"application/octet-stream\", request.headers().get(\"Content-Type\"));\r\n        assertNotNull(request.body());\r\n        assertEquals(-1L, request.body().contentLength());\r\n        assertEquals(request.body().contentType(), MediaType.parse(\"application/octet-stream\"));\r\n    }\r\n}",
            "shareableMockLines": {},
            "testMockLines": {
              "350": "final var authenticationProviderMock = mock(AuthenticationProvider.class);"
            },
            "abstractedStatement": {},
            "rawStatementInfo": {
              "350": {
                "code": "final var authenticationProviderMock = mock(AuthenticationProvider.class);",
                "line": 350,
                "type": "METHOD_MOCK_CREATION",
                "locate": "Test Case",
                "abstractedStatement": "",
                "isMockRelated": true,
                "isShareable": false,
                "locationContext": {
                  "methodName": "getRequestFromRequestInformationWithoutContentLengthOverrideForStreamBody",
                  "methodAnnotations": [
                    "Test"
                  ],
                  "methodRawCode": "@Test\r\nvoid getRequestFromRequestInformationWithoutContentLengthOverrideForStreamBody() throws Exception {\r\n    final var authenticationProviderMock = mock(AuthenticationProvider.class);\r\n    final var testFile = new File(\"./src/test/resources/helloWorld.txt\");\r\n    final var requestInformation = new RequestInformation();\r\n    requestInformation.setUri(new URI(\"https://localhost\"));\r\n    requestInformation.httpMethod = HttpMethod.PUT;\r\n    try (FileInputStream content = new FileInputStream(testFile)) {\r\n        requestInformation.setStreamContent(content, \"application/octet-stream\");\r\n        final var adapter = new OkHttpRequestAdapter(authenticationProviderMock);\r\n        final var request = adapter.getRequestFromRequestInformation(requestInformation, mock(Span.class), mock(Span.class));\r\n        assertEquals(\"application/octet-stream\", request.headers().get(\"Content-Type\"));\r\n        assertNotNull(request.body());\r\n        assertEquals(-1L, request.body().contentLength());\r\n        assertEquals(request.body().contentType(), MediaType.parse(\"application/octet-stream\"));\r\n    }\r\n}"
                }
              }
            }
          },
          {
            "mockObjectId": 54,
            "mockRole": "mock",
            "variableName": "authenticationProviderMock",
            "variableType": "var",
            "mockedClass": "com.microsoft.kiota.authentication.AuthenticationProvider",
            "packageName": "com.microsoft.kiota.http",
            "filePath": "C:\\Java_projects\\Microsoft\\kiota-java\\components\\http\\okHttp\\src\\test\\java\\com\\microsoft\\kiota\\http\\OkHttpRequestAdapterTest.java",
            "testMethodName": "getRequestFromRequestInformationWithoutContentLengthOverrideForJsonPayload",
            "isReuseableMock": false,
            "overlapLines": [
              374
            ],
            "testMethodRawCode": "@Test\r\nvoid getRequestFromRequestInformationWithoutContentLengthOverrideForJsonPayload() throws Exception {\r\n    final var authenticationProviderMock = mock(AuthenticationProvider.class);\r\n    final var requestInformation = new RequestInformation();\r\n    requestInformation.setUri(new URI(\"https://localhost\"));\r\n    ByteArrayInputStream content = new ByteArrayInputStream(\"{\\\"name\\\":\\\"value\\\",\\\"array\\\":[\\\"1\\\",\\\"2\\\",\\\"3\\\"]}\".getBytes(StandardCharsets.UTF_8));\r\n    requestInformation.setStreamContent(content, \"application/json\");\r\n    requestInformation.httpMethod = HttpMethod.PUT;\r\n    final var contentLength = content.available();\r\n    final var adapter = new OkHttpRequestAdapter(authenticationProviderMock);\r\n    final var request = adapter.getRequestFromRequestInformation(requestInformation, mock(Span.class), mock(Span.class));\r\n    assertEquals(\"application/json\", request.headers().get(\"Content-Type\"));\r\n    assertNotNull(request.body());\r\n    assertEquals(contentLength, request.body().contentLength());\r\n    assertEquals(MediaType.parse(\"application/json\"), request.body().contentType());\r\n}",
            "shareableMockLines": {},
            "testMockLines": {
              "374": "final var authenticationProviderMock = mock(AuthenticationProvider.class);"
            },
            "abstractedStatement": {},
            "rawStatementInfo": {
              "374": {
                "code": "final var authenticationProviderMock = mock(AuthenticationProvider.class);",
                "line": 374,
                "type": "METHOD_MOCK_CREATION",
                "locate": "Test Case",
                "abstractedStatement": "",
                "isMockRelated": true,
                "isShareable": false,
                "locationContext": {
                  "methodName": "getRequestFromRequestInformationWithoutContentLengthOverrideForJsonPayload",
                  "methodAnnotations": [
                    "Test"
                  ],
                  "methodRawCode": "@Test\r\nvoid getRequestFromRequestInformationWithoutContentLengthOverrideForJsonPayload() throws Exception {\r\n    final var authenticationProviderMock = mock(AuthenticationProvider.class);\r\n    final var requestInformation = new RequestInformation();\r\n    requestInformation.setUri(new URI(\"https://localhost\"));\r\n    ByteArrayInputStream content = new ByteArrayInputStream(\"{\\\"name\\\":\\\"value\\\",\\\"array\\\":[\\\"1\\\",\\\"2\\\",\\\"3\\\"]}\".getBytes(StandardCharsets.UTF_8));\r\n    requestInformation.setStreamContent(content, \"application/json\");\r\n    requestInformation.httpMethod = HttpMethod.PUT;\r\n    final var contentLength = content.available();\r\n    final var adapter = new OkHttpRequestAdapter(authenticationProviderMock);\r\n    final var request = adapter.getRequestFromRequestInformation(requestInformation, mock(Span.class), mock(Span.class));\r\n    assertEquals(\"application/json\", request.headers().get(\"Content-Type\"));\r\n    assertNotNull(request.body());\r\n    assertEquals(contentLength, request.body().contentLength());\r\n    assertEquals(MediaType.parse(\"application/json\"), request.body().contentType());\r\n}"
                }
              }
            }
          },
          {
            "mockObjectId": 55,
            "mockRole": "mock",
            "variableName": "authenticationProviderMock",
            "variableType": "var",
            "mockedClass": "com.microsoft.kiota.authentication.AuthenticationProvider",
            "packageName": "com.microsoft.kiota.http",
            "filePath": "C:\\Java_projects\\Microsoft\\kiota-java\\components\\http\\okHttp\\src\\test\\java\\com\\microsoft\\kiota\\http\\OkHttpRequestAdapterTest.java",
            "testMethodName": "getRequestFromRequestInformationWithoutContentLengthOverrideWithEmptyPayload",
            "isReuseableMock": false,
            "overlapLines": [
              399
            ],
            "testMethodRawCode": "@Test\r\nvoid getRequestFromRequestInformationWithoutContentLengthOverrideWithEmptyPayload() throws Exception {\r\n    final var authenticationProviderMock = mock(AuthenticationProvider.class);\r\n    final var requestInformation = new RequestInformation();\r\n    requestInformation.setUri(new URI(\"https://localhost\"));\r\n    ByteArrayInputStream content = new ByteArrayInputStream(new byte[0]);\r\n    requestInformation.httpMethod = HttpMethod.PUT;\r\n    requestInformation.content = content;\r\n    final var adapter = new OkHttpRequestAdapter(authenticationProviderMock);\r\n    final var request = adapter.getRequestFromRequestInformation(requestInformation, mock(Span.class), mock(Span.class));\r\n    assertNull(request.headers().get(\"Content-Type\"));\r\n    assertEquals(0, request.body().contentLength());\r\n}",
            "shareableMockLines": {},
            "testMockLines": {
              "399": "final var authenticationProviderMock = mock(AuthenticationProvider.class);"
            },
            "abstractedStatement": {},
            "rawStatementInfo": {
              "399": {
                "code": "final var authenticationProviderMock = mock(AuthenticationProvider.class);",
                "line": 399,
                "type": "METHOD_MOCK_CREATION",
                "locate": "Test Case",
                "abstractedStatement": "",
                "isMockRelated": true,
                "isShareable": false,
                "locationContext": {
                  "methodName": "getRequestFromRequestInformationWithoutContentLengthOverrideWithEmptyPayload",
                  "methodAnnotations": [
                    "Test"
                  ],
                  "methodRawCode": "@Test\r\nvoid getRequestFromRequestInformationWithoutContentLengthOverrideWithEmptyPayload() throws Exception {\r\n    final var authenticationProviderMock = mock(AuthenticationProvider.class);\r\n    final var requestInformation = new RequestInformation();\r\n    requestInformation.setUri(new URI(\"https://localhost\"));\r\n    ByteArrayInputStream content = new ByteArrayInputStream(new byte[0]);\r\n    requestInformation.httpMethod = HttpMethod.PUT;\r\n    requestInformation.content = content;\r\n    final var adapter = new OkHttpRequestAdapter(authenticationProviderMock);\r\n    final var request = adapter.getRequestFromRequestInformation(requestInformation, mock(Span.class), mock(Span.class));\r\n    assertNull(request.headers().get(\"Content-Type\"));\r\n    assertEquals(0, request.body().contentLength());\r\n}"
                }
              }
            }
          }
        ]
      }
    ],
    "com.microsoft.kiota.serialization.Parsable": [
      {
        "mockedClass": "com.microsoft.kiota.serialization.Parsable",
        "packageName": "com.microsoft.kiota.http",
        "testCaseCount": 3,
        "sequenceCount": 3,
        "sharedStatementLineCount": 1,
        "locReduced": 3,
        "mockObjectCount": 3,
        "sharedStatements": [
          "when(com.microsoft.kiota.serialization.Parsable.getFieldDeserializers()).thenReturn(java.util.HashMap)"
        ],
        "sequences": [
          {
            "mockObjectId": 41,
            "mockRole": "mock",
            "variableName": "mockEntity",
            "variableType": "var",
            "mockedClass": "com.microsoft.kiota.serialization.Parsable",
            "packageName": "com.microsoft.kiota.http",
            "filePath": "C:\\Java_projects\\Microsoft\\kiota-java\\components\\http\\okHttp\\src\\test\\java\\com\\microsoft\\kiota\\http\\OkHttpRequestAdapterTest.java",
            "testMethodName": "sendReturnsNullOnNoContent",
            "isReuseableMock": false,
            "overlapLines": [
              171
            ],
            "testMethodRawCode": "@ParameterizedTest\r\n@ValueSource(ints = { 200, 201, 202, 203, 204, 205 })\r\nvoid sendReturnsNullOnNoContent(int statusCode) throws Exception {\r\n    final var authenticationProviderMock = mock(AuthenticationProvider.class);\r\n    authenticationProviderMock.authenticateRequest(any(RequestInformation.class), any(Map.class));\r\n    final var client = getMockClient(new Response.Builder().code(statusCode).message(\"OK\").protocol(Protocol.HTTP_1_1).request(new Request.Builder().url(\"http://localhost\").build()).body(null).build());\r\n    final var requestAdapter = new OkHttpRequestAdapter(authenticationProviderMock, null, null, client);\r\n    final var requestInformation = new RequestInformation() {\r\n\r\n        {\r\n            setUri(new URI(\"https://localhost\"));\r\n            httpMethod = HttpMethod.GET;\r\n        }\r\n    };\r\n    final var mockEntity = mock(Parsable.class);\r\n    when(mockEntity.getFieldDeserializers()).thenReturn(new HashMap<>());\r\n    final var response = requestAdapter.send(requestInformation, null, (node) -> mockEntity);\r\n    assertNull(response);\r\n}",
            "shareableMockLines": {},
            "testMockLines": {
              "170": "final var mockEntity = mock(Parsable.class);",
              "171": "when(mockEntity.getFieldDeserializers()).thenReturn(new HashMap<>());"
            },
            "abstractedStatement": {
              "171": "when(com.microsoft.kiota.serialization.Parsable.getFieldDeserializers()).thenReturn(java.util.HashMap)"
            },
            "rawStatementInfo": {
              "170": {
                "code": "final var mockEntity = mock(Parsable.class);",
                "line": 170,
                "type": "METHOD_MOCK_CREATION",
                "locate": "Test Case",
                "abstractedStatement": "",
                "isMockRelated": true,
                "isShareable": false,
                "locationContext": {
                  "methodName": "sendReturnsNullOnNoContent",
                  "methodAnnotations": [
                    "ParameterizedTest",
                    "ValueSource"
                  ],
                  "methodRawCode": "@ParameterizedTest\r\n@ValueSource(ints = { 200, 201, 202, 203, 204, 205 })\r\nvoid sendReturnsNullOnNoContent(int statusCode) throws Exception {\r\n    final var authenticationProviderMock = mock(AuthenticationProvider.class);\r\n    authenticationProviderMock.authenticateRequest(any(RequestInformation.class), any(Map.class));\r\n    final var client = getMockClient(new Response.Builder().code(statusCode).message(\"OK\").protocol(Protocol.HTTP_1_1).request(new Request.Builder().url(\"http://localhost\").build()).body(null).build());\r\n    final var requestAdapter = new OkHttpRequestAdapter(authenticationProviderMock, null, null, client);\r\n    final var requestInformation = new RequestInformation() {\r\n\r\n        {\r\n            setUri(new URI(\"https://localhost\"));\r\n            httpMethod = HttpMethod.GET;\r\n        }\r\n    };\r\n    final var mockEntity = mock(Parsable.class);\r\n    when(mockEntity.getFieldDeserializers()).thenReturn(new HashMap<>());\r\n    final var response = requestAdapter.send(requestInformation, null, (node) -> mockEntity);\r\n    assertNull(response);\r\n}"
                }
              },
              "171": {
                "code": "when(mockEntity.getFieldDeserializers()).thenReturn(new HashMap<>());",
                "line": 171,
                "type": "STUBBING",
                "locate": "Test Case",
                "abstractedStatement": "when(com.microsoft.kiota.serialization.Parsable.getFieldDeserializers()).thenReturn(java.util.HashMap)",
                "isMockRelated": true,
                "isShareable": false,
                "locationContext": {
                  "methodName": "sendReturnsNullOnNoContent",
                  "methodAnnotations": [
                    "ParameterizedTest",
                    "ValueSource"
                  ],
                  "methodRawCode": "@ParameterizedTest\r\n@ValueSource(ints = { 200, 201, 202, 203, 204, 205 })\r\nvoid sendReturnsNullOnNoContent(int statusCode) throws Exception {\r\n    final var authenticationProviderMock = mock(AuthenticationProvider.class);\r\n    authenticationProviderMock.authenticateRequest(any(RequestInformation.class), any(Map.class));\r\n    final var client = getMockClient(new Response.Builder().code(statusCode).message(\"OK\").protocol(Protocol.HTTP_1_1).request(new Request.Builder().url(\"http://localhost\").build()).body(null).build());\r\n    final var requestAdapter = new OkHttpRequestAdapter(authenticationProviderMock, null, null, client);\r\n    final var requestInformation = new RequestInformation() {\r\n\r\n        {\r\n            setUri(new URI(\"https://localhost\"));\r\n            httpMethod = HttpMethod.GET;\r\n        }\r\n    };\r\n    final var mockEntity = mock(Parsable.class);\r\n    when(mockEntity.getFieldDeserializers()).thenReturn(new HashMap<>());\r\n    final var response = requestAdapter.send(requestInformation, null, (node) -> mockEntity);\r\n    assertNull(response);\r\n}"
                }
              }
            }
          },
          {
            "mockObjectId": 43,
            "mockRole": "mock",
            "variableName": "mockEntity",
            "variableType": "var",
            "mockedClass": "com.microsoft.kiota.serialization.Parsable",
            "packageName": "com.microsoft.kiota.http",
            "filePath": "C:\\Java_projects\\Microsoft\\kiota-java\\components\\http\\okHttp\\src\\test\\java\\com\\microsoft\\kiota\\http\\OkHttpRequestAdapterTest.java",
            "testMethodName": "sendReturnsObjectOnContent",
            "isReuseableMock": false,
            "overlapLines": [
              202
            ],
            "testMethodRawCode": "@ParameterizedTest\r\n@ValueSource(ints = { 200, 201, 202, 203 })\r\nvoid sendReturnsObjectOnContent(int statusCode) throws Exception {\r\n    final var authenticationProviderMock = mock(AuthenticationProvider.class);\r\n    authenticationProviderMock.authenticateRequest(any(RequestInformation.class), any(Map.class));\r\n    final var client = getMockClient(new Response.Builder().code(statusCode).message(\"OK\").protocol(Protocol.HTTP_1_1).request(new Request.Builder().url(\"http://localhost\").build()).body(ResponseBody.create(\"test\".getBytes(\"UTF-8\"), MediaType.parse(\"application/json\"))).build());\r\n    final var requestInformation = new RequestInformation() {\r\n\r\n        {\r\n            setUri(new URI(\"https://localhost\"));\r\n            httpMethod = HttpMethod.GET;\r\n        }\r\n    };\r\n    final var mockEntity = mock(Parsable.class);\r\n    when(mockEntity.getFieldDeserializers()).thenReturn(new HashMap<>());\r\n    final var mockParseNode = mock(ParseNode.class);\r\n    when(mockParseNode.getObjectValue(any(ParsableFactory.class))).thenReturn(mockEntity);\r\n    final var mockFactory = mock(ParseNodeFactory.class);\r\n    when(mockFactory.getParseNode(any(String.class), any(InputStream.class))).thenReturn(mockParseNode);\r\n    when(mockFactory.getValidContentType()).thenReturn(\"application/json\");\r\n    final var requestAdapter = new OkHttpRequestAdapter(authenticationProviderMock, mockFactory, null, client);\r\n    final var response = requestAdapter.send(requestInformation, null, (node) -> mockEntity);\r\n    assertNotNull(response);\r\n}",
            "shareableMockLines": {},
            "testMockLines": {
              "201": "final var mockEntity = mock(Parsable.class);",
              "202": "when(mockEntity.getFieldDeserializers()).thenReturn(new HashMap<>());"
            },
            "abstractedStatement": {
              "202": "when(com.microsoft.kiota.serialization.Parsable.getFieldDeserializers()).thenReturn(java.util.HashMap)"
            },
            "rawStatementInfo": {
              "201": {
                "code": "final var mockEntity = mock(Parsable.class);",
                "line": 201,
                "type": "METHOD_MOCK_CREATION",
                "locate": "Test Case",
                "abstractedStatement": "",
                "isMockRelated": true,
                "isShareable": false,
                "locationContext": {
                  "methodName": "sendReturnsObjectOnContent",
                  "methodAnnotations": [
                    "ParameterizedTest",
                    "ValueSource"
                  ],
                  "methodRawCode": "@ParameterizedTest\r\n@ValueSource(ints = { 200, 201, 202, 203 })\r\nvoid sendReturnsObjectOnContent(int statusCode) throws Exception {\r\n    final var authenticationProviderMock = mock(AuthenticationProvider.class);\r\n    authenticationProviderMock.authenticateRequest(any(RequestInformation.class), any(Map.class));\r\n    final var client = getMockClient(new Response.Builder().code(statusCode).message(\"OK\").protocol(Protocol.HTTP_1_1).request(new Request.Builder().url(\"http://localhost\").build()).body(ResponseBody.create(\"test\".getBytes(\"UTF-8\"), MediaType.parse(\"application/json\"))).build());\r\n    final var requestInformation = new RequestInformation() {\r\n\r\n        {\r\n            setUri(new URI(\"https://localhost\"));\r\n            httpMethod = HttpMethod.GET;\r\n        }\r\n    };\r\n    final var mockEntity = mock(Parsable.class);\r\n    when(mockEntity.getFieldDeserializers()).thenReturn(new HashMap<>());\r\n    final var mockParseNode = mock(ParseNode.class);\r\n    when(mockParseNode.getObjectValue(any(ParsableFactory.class))).thenReturn(mockEntity);\r\n    final var mockFactory = mock(ParseNodeFactory.class);\r\n    when(mockFactory.getParseNode(any(String.class), any(InputStream.class))).thenReturn(mockParseNode);\r\n    when(mockFactory.getValidContentType()).thenReturn(\"application/json\");\r\n    final var requestAdapter = new OkHttpRequestAdapter(authenticationProviderMock, mockFactory, null, client);\r\n    final var response = requestAdapter.send(requestInformation, null, (node) -> mockEntity);\r\n    assertNotNull(response);\r\n}"
                }
              },
              "202": {
                "code": "when(mockEntity.getFieldDeserializers()).thenReturn(new HashMap<>());",
                "line": 202,
                "type": "STUBBING",
                "locate": "Test Case",
                "abstractedStatement": "when(com.microsoft.kiota.serialization.Parsable.getFieldDeserializers()).thenReturn(java.util.HashMap)",
                "isMockRelated": true,
                "isShareable": false,
                "locationContext": {
                  "methodName": "sendReturnsObjectOnContent",
                  "methodAnnotations": [
                    "ParameterizedTest",
                    "ValueSource"
                  ],
                  "methodRawCode": "@ParameterizedTest\r\n@ValueSource(ints = { 200, 201, 202, 203 })\r\nvoid sendReturnsObjectOnContent(int statusCode) throws Exception {\r\n    final var authenticationProviderMock = mock(AuthenticationProvider.class);\r\n    authenticationProviderMock.authenticateRequest(any(RequestInformation.class), any(Map.class));\r\n    final var client = getMockClient(new Response.Builder().code(statusCode).message(\"OK\").protocol(Protocol.HTTP_1_1).request(new Request.Builder().url(\"http://localhost\").build()).body(ResponseBody.create(\"test\".getBytes(\"UTF-8\"), MediaType.parse(\"application/json\"))).build());\r\n    final var requestInformation = new RequestInformation() {\r\n\r\n        {\r\n            setUri(new URI(\"https://localhost\"));\r\n            httpMethod = HttpMethod.GET;\r\n        }\r\n    };\r\n    final var mockEntity = mock(Parsable.class);\r\n    when(mockEntity.getFieldDeserializers()).thenReturn(new HashMap<>());\r\n    final var mockParseNode = mock(ParseNode.class);\r\n    when(mockParseNode.getObjectValue(any(ParsableFactory.class))).thenReturn(mockEntity);\r\n    final var mockFactory = mock(ParseNodeFactory.class);\r\n    when(mockFactory.getParseNode(any(String.class), any(InputStream.class))).thenReturn(mockParseNode);\r\n    when(mockFactory.getValidContentType()).thenReturn(\"application/json\");\r\n    final var requestAdapter = new OkHttpRequestAdapter(authenticationProviderMock, mockFactory, null, client);\r\n    final var response = requestAdapter.send(requestInformation, null, (node) -> mockEntity);\r\n    assertNotNull(response);\r\n}"
                }
              }
            }
          },
          {
            "mockObjectId": 47,
            "mockRole": "mock",
            "variableName": "mockEntity",
            "variableType": "var",
            "mockedClass": "com.microsoft.kiota.serialization.Parsable",
            "packageName": "com.microsoft.kiota.http",
            "filePath": "C:\\Java_projects\\Microsoft\\kiota-java\\components\\http\\okHttp\\src\\test\\java\\com\\microsoft\\kiota\\http\\OkHttpRequestAdapterTest.java",
            "testMethodName": "throwsAPIException",
            "isReuseableMock": false,
            "overlapLines": [
              264
            ],
            "testMethodRawCode": "@SuppressWarnings(\"unchecked\")\r\n@ParameterizedTest\r\n@MethodSource(\"providesErrorMappings\")\r\nvoid throwsAPIException(int responseStatusCode, List<String> errorMappingCodes, boolean expectDeserializedException) throws Exception {\r\n    final var authenticationProviderMock = mock(AuthenticationProvider.class);\r\n    authenticationProviderMock.authenticateRequest(any(RequestInformation.class), any(Map.class));\r\n    final var client = getMockClient(new Response.Builder().code(responseStatusCode).message(\"Not Found\").protocol(Protocol.HTTP_1_1).request(new Request.Builder().url(\"http://localhost\").build()).body(ResponseBody.create(\"test\".getBytes(\"UTF-8\"), MediaType.parse(\"application/json\"))).header(\"request-id\", \"request-id-value\").build());\r\n    final var requestInformation = new RequestInformation() {\r\n\r\n        {\r\n            setUri(new URI(\"https://localhost\"));\r\n            httpMethod = HttpMethod.GET;\r\n        }\r\n    };\r\n    final var mockEntity = mock(Parsable.class);\r\n    when(mockEntity.getFieldDeserializers()).thenReturn(new HashMap<>());\r\n    final var mockParsableFactory = mock(ParsableFactory.class);\r\n    when(mockParsableFactory.create(any(ParseNode.class))).thenReturn(mockEntity);\r\n    final var mockParseNode = mock(ParseNode.class);\r\n    when(mockParseNode.getObjectValue(any(ParsableFactory.class))).thenReturn(mockEntity);\r\n    final var mockFactory = mock(ParseNodeFactory.class);\r\n    when(mockFactory.getParseNode(any(String.class), any(InputStream.class))).thenReturn(mockParseNode);\r\n    when(mockFactory.getValidContentType()).thenReturn(\"application/json\");\r\n    final var requestAdapter = new OkHttpRequestAdapter(authenticationProviderMock, mockFactory, null, client);\r\n    final var errorMappings = errorMappingCodes == null ? null : new HashMap<String, ParsableFactory<? extends Parsable>>();\r\n    if (errorMappings != null)\r\n        errorMappingCodes.forEach((mapping) -> errorMappings.put(mapping, mockParsableFactory));\r\n    final var exception = assertThrows(ApiException.class, () -> requestAdapter.send(requestInformation, errorMappings, (node) -> mockEntity));\r\n    assertNotNull(exception);\r\n    if (expectDeserializedException)\r\n        verify(mockParseNode, times(1)).getObjectValue(mockParsableFactory);\r\n    assertEquals(responseStatusCode, exception.getResponseStatusCode());\r\n    assertTrue(exception.getResponseHeaders().containsKey(\"request-id\"));\r\n}",
            "shareableMockLines": {},
            "testMockLines": {
              "263": "final var mockEntity = mock(Parsable.class);",
              "264": "when(mockEntity.getFieldDeserializers()).thenReturn(new HashMap<>());"
            },
            "abstractedStatement": {
              "264": "when(com.microsoft.kiota.serialization.Parsable.getFieldDeserializers()).thenReturn(java.util.HashMap)"
            },
            "rawStatementInfo": {
              "263": {
                "code": "final var mockEntity = mock(Parsable.class);",
                "line": 263,
                "type": "METHOD_MOCK_CREATION",
                "locate": "Test Case",
                "abstractedStatement": "",
                "isMockRelated": true,
                "isShareable": false,
                "locationContext": {
                  "methodName": "throwsAPIException",
                  "methodAnnotations": [
                    "SuppressWarnings",
                    "ParameterizedTest",
                    "MethodSource"
                  ],
                  "methodRawCode": "@SuppressWarnings(\"unchecked\")\r\n@ParameterizedTest\r\n@MethodSource(\"providesErrorMappings\")\r\nvoid throwsAPIException(int responseStatusCode, List<String> errorMappingCodes, boolean expectDeserializedException) throws Exception {\r\n    final var authenticationProviderMock = mock(AuthenticationProvider.class);\r\n    authenticationProviderMock.authenticateRequest(any(RequestInformation.class), any(Map.class));\r\n    final var client = getMockClient(new Response.Builder().code(responseStatusCode).message(\"Not Found\").protocol(Protocol.HTTP_1_1).request(new Request.Builder().url(\"http://localhost\").build()).body(ResponseBody.create(\"test\".getBytes(\"UTF-8\"), MediaType.parse(\"application/json\"))).header(\"request-id\", \"request-id-value\").build());\r\n    final var requestInformation = new RequestInformation() {\r\n\r\n        {\r\n            setUri(new URI(\"https://localhost\"));\r\n            httpMethod = HttpMethod.GET;\r\n        }\r\n    };\r\n    final var mockEntity = mock(Parsable.class);\r\n    when(mockEntity.getFieldDeserializers()).thenReturn(new HashMap<>());\r\n    final var mockParsableFactory = mock(ParsableFactory.class);\r\n    when(mockParsableFactory.create(any(ParseNode.class))).thenReturn(mockEntity);\r\n    final var mockParseNode = mock(ParseNode.class);\r\n    when(mockParseNode.getObjectValue(any(ParsableFactory.class))).thenReturn(mockEntity);\r\n    final var mockFactory = mock(ParseNodeFactory.class);\r\n    when(mockFactory.getParseNode(any(String.class), any(InputStream.class))).thenReturn(mockParseNode);\r\n    when(mockFactory.getValidContentType()).thenReturn(\"application/json\");\r\n    final var requestAdapter = new OkHttpRequestAdapter(authenticationProviderMock, mockFactory, null, client);\r\n    final var errorMappings = errorMappingCodes == null ? null : new HashMap<String, ParsableFactory<? extends Parsable>>();\r\n    if (errorMappings != null)\r\n        errorMappingCodes.forEach((mapping) -> errorMappings.put(mapping, mockParsableFactory));\r\n    final var exception = assertThrows(ApiException.class, () -> requestAdapter.send(requestInformation, errorMappings, (node) -> mockEntity));\r\n    assertNotNull(exception);\r\n    if (expectDeserializedException)\r\n        verify(mockParseNode, times(1)).getObjectValue(mockParsableFactory);\r\n    assertEquals(responseStatusCode, exception.getResponseStatusCode());\r\n    assertTrue(exception.getResponseHeaders().containsKey(\"request-id\"));\r\n}"
                }
              },
              "264": {
                "code": "when(mockEntity.getFieldDeserializers()).thenReturn(new HashMap<>());",
                "line": 264,
                "type": "STUBBING",
                "locate": "Test Case",
                "abstractedStatement": "when(com.microsoft.kiota.serialization.Parsable.getFieldDeserializers()).thenReturn(java.util.HashMap)",
                "isMockRelated": true,
                "isShareable": false,
                "locationContext": {
                  "methodName": "throwsAPIException",
                  "methodAnnotations": [
                    "SuppressWarnings",
                    "ParameterizedTest",
                    "MethodSource"
                  ],
                  "methodRawCode": "@SuppressWarnings(\"unchecked\")\r\n@ParameterizedTest\r\n@MethodSource(\"providesErrorMappings\")\r\nvoid throwsAPIException(int responseStatusCode, List<String> errorMappingCodes, boolean expectDeserializedException) throws Exception {\r\n    final var authenticationProviderMock = mock(AuthenticationProvider.class);\r\n    authenticationProviderMock.authenticateRequest(any(RequestInformation.class), any(Map.class));\r\n    final var client = getMockClient(new Response.Builder().code(responseStatusCode).message(\"Not Found\").protocol(Protocol.HTTP_1_1).request(new Request.Builder().url(\"http://localhost\").build()).body(ResponseBody.create(\"test\".getBytes(\"UTF-8\"), MediaType.parse(\"application/json\"))).header(\"request-id\", \"request-id-value\").build());\r\n    final var requestInformation = new RequestInformation() {\r\n\r\n        {\r\n            setUri(new URI(\"https://localhost\"));\r\n            httpMethod = HttpMethod.GET;\r\n        }\r\n    };\r\n    final var mockEntity = mock(Parsable.class);\r\n    when(mockEntity.getFieldDeserializers()).thenReturn(new HashMap<>());\r\n    final var mockParsableFactory = mock(ParsableFactory.class);\r\n    when(mockParsableFactory.create(any(ParseNode.class))).thenReturn(mockEntity);\r\n    final var mockParseNode = mock(ParseNode.class);\r\n    when(mockParseNode.getObjectValue(any(ParsableFactory.class))).thenReturn(mockEntity);\r\n    final var mockFactory = mock(ParseNodeFactory.class);\r\n    when(mockFactory.getParseNode(any(String.class), any(InputStream.class))).thenReturn(mockParseNode);\r\n    when(mockFactory.getValidContentType()).thenReturn(\"application/json\");\r\n    final var requestAdapter = new OkHttpRequestAdapter(authenticationProviderMock, mockFactory, null, client);\r\n    final var errorMappings = errorMappingCodes == null ? null : new HashMap<String, ParsableFactory<? extends Parsable>>();\r\n    if (errorMappings != null)\r\n        errorMappingCodes.forEach((mapping) -> errorMappings.put(mapping, mockParsableFactory));\r\n    final var exception = assertThrows(ApiException.class, () -> requestAdapter.send(requestInformation, errorMappings, (node) -> mockEntity));\r\n    assertNotNull(exception);\r\n    if (expectDeserializedException)\r\n        verify(mockParseNode, times(1)).getObjectValue(mockParsableFactory);\r\n    assertEquals(responseStatusCode, exception.getResponseStatusCode());\r\n    assertTrue(exception.getResponseHeaders().containsKey(\"request-id\"));\r\n}"
                }
              }
            }
          }
        ]
      }
    ],
    "com.microsoft.kiota.serialization.SerializationWriterFactory": [
      {
        "mockedClass": "com.microsoft.kiota.serialization.SerializationWriterFactory",
        "packageName": "com.microsoft.kiota",
        "testCaseCount": 5,
        "sequenceCount": 5,
        "sharedStatementLineCount": 1,
        "locReduced": 5,
        "mockObjectCount": 5,
        "sharedStatements": [
          "when(com.microsoft.kiota.serialization.SerializationWriterFactory.getSerializationWriter(anyString())).thenReturn(com.microsoft.kiota.serialization.SerializationWriter)"
        ],
        "sequences": [
          {
            "mockObjectId": 8,
            "mockRole": "mock",
            "variableName": "factoryMock",
            "variableType": "SerializationWriterFactory",
            "mockedClass": "com.microsoft.kiota.serialization.SerializationWriterFactory",
            "packageName": "com.microsoft.kiota",
            "filePath": "C:\\Java_projects\\Microsoft\\kiota-java\\components\\abstractions\\src\\test\\java\\com\\microsoft\\kiota\\RequestInformationTest.java",
            "testMethodName": "SetsParsableContent",
            "isReuseableMock": false,
            "overlapLines": [
              192
            ],
            "testMethodRawCode": "@Test\r\nvoid SetsParsableContent() {\r\n    // Arrange as the request builders would\r\n    final RequestInformation requestInfo = new RequestInformation();\r\n    requestInfo.httpMethod = HttpMethod.POST;\r\n    requestInfo.urlTemplate = \"http://localhost/users\";\r\n    final SerializationWriter writerMock = mock(SerializationWriter.class);\r\n    final SerializationWriterFactory factoryMock = mock(SerializationWriterFactory.class);\r\n    when(factoryMock.getSerializationWriter(anyString())).thenReturn(writerMock);\r\n    final RequestAdapter requestAdapterMock = mock(RequestAdapter.class);\r\n    when(requestAdapterMock.getSerializationWriterFactory()).thenReturn(factoryMock);\r\n    requestInfo.setContentFromParsable(requestAdapterMock, \"application/json\", new TestEntity());\r\n    verify(writerMock, times(1)).writeObjectValue(any(), any(TestEntity.class));\r\n    verify(writerMock, never()).writeCollectionOfObjectValues(anyString(), any(ArrayList.class));\r\n}",
            "shareableMockLines": {},
            "testMockLines": {
              "191": "final SerializationWriterFactory factoryMock = mock(SerializationWriterFactory.class);",
              "192": "when(factoryMock.getSerializationWriter(anyString())).thenReturn(writerMock);"
            },
            "abstractedStatement": {
              "192": "when(com.microsoft.kiota.serialization.SerializationWriterFactory.getSerializationWriter(anyString())).thenReturn(com.microsoft.kiota.serialization.SerializationWriter)"
            },
            "rawStatementInfo": {
              "191": {
                "code": "final SerializationWriterFactory factoryMock = mock(SerializationWriterFactory.class);",
                "line": 191,
                "type": "METHOD_MOCK_CREATION",
                "locate": "Test Case",
                "abstractedStatement": "",
                "isMockRelated": true,
                "isShareable": false,
                "locationContext": {
                  "methodName": "SetsParsableContent",
                  "methodAnnotations": [
                    "Test"
                  ],
                  "methodRawCode": "@Test\r\nvoid SetsParsableContent() {\r\n    // Arrange as the request builders would\r\n    final RequestInformation requestInfo = new RequestInformation();\r\n    requestInfo.httpMethod = HttpMethod.POST;\r\n    requestInfo.urlTemplate = \"http://localhost/users\";\r\n    final SerializationWriter writerMock = mock(SerializationWriter.class);\r\n    final SerializationWriterFactory factoryMock = mock(SerializationWriterFactory.class);\r\n    when(factoryMock.getSerializationWriter(anyString())).thenReturn(writerMock);\r\n    final RequestAdapter requestAdapterMock = mock(RequestAdapter.class);\r\n    when(requestAdapterMock.getSerializationWriterFactory()).thenReturn(factoryMock);\r\n    requestInfo.setContentFromParsable(requestAdapterMock, \"application/json\", new TestEntity());\r\n    verify(writerMock, times(1)).writeObjectValue(any(), any(TestEntity.class));\r\n    verify(writerMock, never()).writeCollectionOfObjectValues(anyString(), any(ArrayList.class));\r\n}"
                }
              },
              "192": {
                "code": "when(factoryMock.getSerializationWriter(anyString())).thenReturn(writerMock);",
                "line": 192,
                "type": "STUBBING",
                "locate": "Test Case",
                "abstractedStatement": "when(com.microsoft.kiota.serialization.SerializationWriterFactory.getSerializationWriter(anyString())).thenReturn(com.microsoft.kiota.serialization.SerializationWriter)",
                "isMockRelated": true,
                "isShareable": false,
                "locationContext": {
                  "methodName": "SetsParsableContent",
                  "methodAnnotations": [
                    "Test"
                  ],
                  "methodRawCode": "@Test\r\nvoid SetsParsableContent() {\r\n    // Arrange as the request builders would\r\n    final RequestInformation requestInfo = new RequestInformation();\r\n    requestInfo.httpMethod = HttpMethod.POST;\r\n    requestInfo.urlTemplate = \"http://localhost/users\";\r\n    final SerializationWriter writerMock = mock(SerializationWriter.class);\r\n    final SerializationWriterFactory factoryMock = mock(SerializationWriterFactory.class);\r\n    when(factoryMock.getSerializationWriter(anyString())).thenReturn(writerMock);\r\n    final RequestAdapter requestAdapterMock = mock(RequestAdapter.class);\r\n    when(requestAdapterMock.getSerializationWriterFactory()).thenReturn(factoryMock);\r\n    requestInfo.setContentFromParsable(requestAdapterMock, \"application/json\", new TestEntity());\r\n    verify(writerMock, times(1)).writeObjectValue(any(), any(TestEntity.class));\r\n    verify(writerMock, never()).writeCollectionOfObjectValues(anyString(), any(ArrayList.class));\r\n}"
                }
              }
            }
          },
          {
            "mockObjectId": 11,
            "mockRole": "mock",
            "variableName": "factoryMock",
            "variableType": "SerializationWriterFactory",
            "mockedClass": "com.microsoft.kiota.serialization.SerializationWriterFactory",
            "packageName": "com.microsoft.kiota",
            "filePath": "C:\\Java_projects\\Microsoft\\kiota-java\\components\\abstractions\\src\\test\\java\\com\\microsoft\\kiota\\RequestInformationTest.java",
            "testMethodName": "SetsParsableContentCollection",
            "isReuseableMock": false,
            "overlapLines": [
              211
            ],
            "testMethodRawCode": "@Test\r\nvoid SetsParsableContentCollection() {\r\n    // Arrange as the request builders would\r\n    final RequestInformation requestInfo = new RequestInformation();\r\n    requestInfo.httpMethod = HttpMethod.POST;\r\n    requestInfo.urlTemplate = \"http://localhost/users\";\r\n    final SerializationWriter writerMock = mock(SerializationWriter.class);\r\n    final SerializationWriterFactory factoryMock = mock(SerializationWriterFactory.class);\r\n    when(factoryMock.getSerializationWriter(anyString())).thenReturn(writerMock);\r\n    final RequestAdapter requestAdapterMock = mock(RequestAdapter.class);\r\n    when(requestAdapterMock.getSerializationWriterFactory()).thenReturn(factoryMock);\r\n    requestInfo.setContentFromParsable(requestAdapterMock, \"application/json\", new TestEntity[] { new TestEntity() });\r\n    verify(writerMock, never()).writeObjectValue(any(), any(TestEntity.class));\r\n    verify(writerMock, times(1)).writeCollectionOfObjectValues(any(), any(Iterable.class));\r\n}",
            "shareableMockLines": {},
            "testMockLines": {
              "210": "final SerializationWriterFactory factoryMock = mock(SerializationWriterFactory.class);",
              "211": "when(factoryMock.getSerializationWriter(anyString())).thenReturn(writerMock);"
            },
            "abstractedStatement": {
              "211": "when(com.microsoft.kiota.serialization.SerializationWriterFactory.getSerializationWriter(anyString())).thenReturn(com.microsoft.kiota.serialization.SerializationWriter)"
            },
            "rawStatementInfo": {
              "210": {
                "code": "final SerializationWriterFactory factoryMock = mock(SerializationWriterFactory.class);",
                "line": 210,
                "type": "METHOD_MOCK_CREATION",
                "locate": "Test Case",
                "abstractedStatement": "",
                "isMockRelated": true,
                "isShareable": false,
                "locationContext": {
                  "methodName": "SetsParsableContentCollection",
                  "methodAnnotations": [
                    "Test"
                  ],
                  "methodRawCode": "@Test\r\nvoid SetsParsableContentCollection() {\r\n    // Arrange as the request builders would\r\n    final RequestInformation requestInfo = new RequestInformation();\r\n    requestInfo.httpMethod = HttpMethod.POST;\r\n    requestInfo.urlTemplate = \"http://localhost/users\";\r\n    final SerializationWriter writerMock = mock(SerializationWriter.class);\r\n    final SerializationWriterFactory factoryMock = mock(SerializationWriterFactory.class);\r\n    when(factoryMock.getSerializationWriter(anyString())).thenReturn(writerMock);\r\n    final RequestAdapter requestAdapterMock = mock(RequestAdapter.class);\r\n    when(requestAdapterMock.getSerializationWriterFactory()).thenReturn(factoryMock);\r\n    requestInfo.setContentFromParsable(requestAdapterMock, \"application/json\", new TestEntity[] { new TestEntity() });\r\n    verify(writerMock, never()).writeObjectValue(any(), any(TestEntity.class));\r\n    verify(writerMock, times(1)).writeCollectionOfObjectValues(any(), any(Iterable.class));\r\n}"
                }
              },
              "211": {
                "code": "when(factoryMock.getSerializationWriter(anyString())).thenReturn(writerMock);",
                "line": 211,
                "type": "STUBBING",
                "locate": "Test Case",
                "abstractedStatement": "when(com.microsoft.kiota.serialization.SerializationWriterFactory.getSerializationWriter(anyString())).thenReturn(com.microsoft.kiota.serialization.SerializationWriter)",
                "isMockRelated": true,
                "isShareable": false,
                "locationContext": {
                  "methodName": "SetsParsableContentCollection",
                  "methodAnnotations": [
                    "Test"
                  ],
                  "methodRawCode": "@Test\r\nvoid SetsParsableContentCollection() {\r\n    // Arrange as the request builders would\r\n    final RequestInformation requestInfo = new RequestInformation();\r\n    requestInfo.httpMethod = HttpMethod.POST;\r\n    requestInfo.urlTemplate = \"http://localhost/users\";\r\n    final SerializationWriter writerMock = mock(SerializationWriter.class);\r\n    final SerializationWriterFactory factoryMock = mock(SerializationWriterFactory.class);\r\n    when(factoryMock.getSerializationWriter(anyString())).thenReturn(writerMock);\r\n    final RequestAdapter requestAdapterMock = mock(RequestAdapter.class);\r\n    when(requestAdapterMock.getSerializationWriterFactory()).thenReturn(factoryMock);\r\n    requestInfo.setContentFromParsable(requestAdapterMock, \"application/json\", new TestEntity[] { new TestEntity() });\r\n    verify(writerMock, never()).writeObjectValue(any(), any(TestEntity.class));\r\n    verify(writerMock, times(1)).writeCollectionOfObjectValues(any(), any(Iterable.class));\r\n}"
                }
              }
            }
          },
          {
            "mockObjectId": 14,
            "mockRole": "mock",
            "variableName": "factoryMock",
            "variableType": "SerializationWriterFactory",
            "mockedClass": "com.microsoft.kiota.serialization.SerializationWriterFactory",
            "packageName": "com.microsoft.kiota",
            "filePath": "C:\\Java_projects\\Microsoft\\kiota-java\\components\\abstractions\\src\\test\\java\\com\\microsoft\\kiota\\RequestInformationTest.java",
            "testMethodName": "SetsScalarContentCollection",
            "isReuseableMock": false,
            "overlapLines": [
              229
            ],
            "testMethodRawCode": "@Test\r\nvoid SetsScalarContentCollection() {\r\n    // Arrange as the request builders would\r\n    final RequestInformation requestInfo = new RequestInformation();\r\n    requestInfo.httpMethod = HttpMethod.POST;\r\n    requestInfo.urlTemplate = \"http://localhost/users\";\r\n    final SerializationWriter writerMock = mock(SerializationWriter.class);\r\n    final SerializationWriterFactory factoryMock = mock(SerializationWriterFactory.class);\r\n    when(factoryMock.getSerializationWriter(anyString())).thenReturn(writerMock);\r\n    final RequestAdapter requestAdapterMock = mock(RequestAdapter.class);\r\n    when(requestAdapterMock.getSerializationWriterFactory()).thenReturn(factoryMock);\r\n    requestInfo.setContentFromScalarCollection(requestAdapterMock, \"application/json\", new String[] { \"foo\" });\r\n    verify(writerMock, never()).writeStringValue(any(), anyString());\r\n    verify(writerMock, times(1)).writeCollectionOfPrimitiveValues(any(), any(Iterable.class));\r\n}",
            "shareableMockLines": {},
            "testMockLines": {
              "228": "final SerializationWriterFactory factoryMock = mock(SerializationWriterFactory.class);",
              "229": "when(factoryMock.getSerializationWriter(anyString())).thenReturn(writerMock);"
            },
            "abstractedStatement": {
              "229": "when(com.microsoft.kiota.serialization.SerializationWriterFactory.getSerializationWriter(anyString())).thenReturn(com.microsoft.kiota.serialization.SerializationWriter)"
            },
            "rawStatementInfo": {
              "228": {
                "code": "final SerializationWriterFactory factoryMock = mock(SerializationWriterFactory.class);",
                "line": 228,
                "type": "METHOD_MOCK_CREATION",
                "locate": "Test Case",
                "abstractedStatement": "",
                "isMockRelated": true,
                "isShareable": false,
                "locationContext": {
                  "methodName": "SetsScalarContentCollection",
                  "methodAnnotations": [
                    "Test"
                  ],
                  "methodRawCode": "@Test\r\nvoid SetsScalarContentCollection() {\r\n    // Arrange as the request builders would\r\n    final RequestInformation requestInfo = new RequestInformation();\r\n    requestInfo.httpMethod = HttpMethod.POST;\r\n    requestInfo.urlTemplate = \"http://localhost/users\";\r\n    final SerializationWriter writerMock = mock(SerializationWriter.class);\r\n    final SerializationWriterFactory factoryMock = mock(SerializationWriterFactory.class);\r\n    when(factoryMock.getSerializationWriter(anyString())).thenReturn(writerMock);\r\n    final RequestAdapter requestAdapterMock = mock(RequestAdapter.class);\r\n    when(requestAdapterMock.getSerializationWriterFactory()).thenReturn(factoryMock);\r\n    requestInfo.setContentFromScalarCollection(requestAdapterMock, \"application/json\", new String[] { \"foo\" });\r\n    verify(writerMock, never()).writeStringValue(any(), anyString());\r\n    verify(writerMock, times(1)).writeCollectionOfPrimitiveValues(any(), any(Iterable.class));\r\n}"
                }
              },
              "229": {
                "code": "when(factoryMock.getSerializationWriter(anyString())).thenReturn(writerMock);",
                "line": 229,
                "type": "STUBBING",
                "locate": "Test Case",
                "abstractedStatement": "when(com.microsoft.kiota.serialization.SerializationWriterFactory.getSerializationWriter(anyString())).thenReturn(com.microsoft.kiota.serialization.SerializationWriter)",
                "isMockRelated": true,
                "isShareable": false,
                "locationContext": {
                  "methodName": "SetsScalarContentCollection",
                  "methodAnnotations": [
                    "Test"
                  ],
                  "methodRawCode": "@Test\r\nvoid SetsScalarContentCollection() {\r\n    // Arrange as the request builders would\r\n    final RequestInformation requestInfo = new RequestInformation();\r\n    requestInfo.httpMethod = HttpMethod.POST;\r\n    requestInfo.urlTemplate = \"http://localhost/users\";\r\n    final SerializationWriter writerMock = mock(SerializationWriter.class);\r\n    final SerializationWriterFactory factoryMock = mock(SerializationWriterFactory.class);\r\n    when(factoryMock.getSerializationWriter(anyString())).thenReturn(writerMock);\r\n    final RequestAdapter requestAdapterMock = mock(RequestAdapter.class);\r\n    when(requestAdapterMock.getSerializationWriterFactory()).thenReturn(factoryMock);\r\n    requestInfo.setContentFromScalarCollection(requestAdapterMock, \"application/json\", new String[] { \"foo\" });\r\n    verify(writerMock, never()).writeStringValue(any(), anyString());\r\n    verify(writerMock, times(1)).writeCollectionOfPrimitiveValues(any(), any(Iterable.class));\r\n}"
                }
              }
            }
          },
          {
            "mockObjectId": 17,
            "mockRole": "mock",
            "variableName": "factoryMock",
            "variableType": "SerializationWriterFactory",
            "mockedClass": "com.microsoft.kiota.serialization.SerializationWriterFactory",
            "packageName": "com.microsoft.kiota",
            "filePath": "C:\\Java_projects\\Microsoft\\kiota-java\\components\\abstractions\\src\\test\\java\\com\\microsoft\\kiota\\RequestInformationTest.java",
            "testMethodName": "SetsScalarContent",
            "isReuseableMock": false,
            "overlapLines": [
              247
            ],
            "testMethodRawCode": "@Test\r\nvoid SetsScalarContent() {\r\n    // Arrange as the request builders would\r\n    final RequestInformation requestInfo = new RequestInformation();\r\n    requestInfo.httpMethod = HttpMethod.POST;\r\n    requestInfo.urlTemplate = \"http://localhost/users\";\r\n    final SerializationWriter writerMock = mock(SerializationWriter.class);\r\n    final SerializationWriterFactory factoryMock = mock(SerializationWriterFactory.class);\r\n    when(factoryMock.getSerializationWriter(anyString())).thenReturn(writerMock);\r\n    final RequestAdapter requestAdapterMock = mock(RequestAdapter.class);\r\n    when(requestAdapterMock.getSerializationWriterFactory()).thenReturn(factoryMock);\r\n    requestInfo.setContentFromScalar(requestAdapterMock, \"application/json\", \"foo\");\r\n    verify(writerMock, times(1)).writeStringValue(any(), anyString());\r\n    verify(writerMock, never()).writeCollectionOfPrimitiveValues(any(), any(Iterable.class));\r\n}",
            "shareableMockLines": {},
            "testMockLines": {
              "246": "final SerializationWriterFactory factoryMock = mock(SerializationWriterFactory.class);",
              "247": "when(factoryMock.getSerializationWriter(anyString())).thenReturn(writerMock);"
            },
            "abstractedStatement": {
              "247": "when(com.microsoft.kiota.serialization.SerializationWriterFactory.getSerializationWriter(anyString())).thenReturn(com.microsoft.kiota.serialization.SerializationWriter)"
            },
            "rawStatementInfo": {
              "246": {
                "code": "final SerializationWriterFactory factoryMock = mock(SerializationWriterFactory.class);",
                "line": 246,
                "type": "METHOD_MOCK_CREATION",
                "locate": "Test Case",
                "abstractedStatement": "",
                "isMockRelated": true,
                "isShareable": false,
                "locationContext": {
                  "methodName": "SetsScalarContent",
                  "methodAnnotations": [
                    "Test"
                  ],
                  "methodRawCode": "@Test\r\nvoid SetsScalarContent() {\r\n    // Arrange as the request builders would\r\n    final RequestInformation requestInfo = new RequestInformation();\r\n    requestInfo.httpMethod = HttpMethod.POST;\r\n    requestInfo.urlTemplate = \"http://localhost/users\";\r\n    final SerializationWriter writerMock = mock(SerializationWriter.class);\r\n    final SerializationWriterFactory factoryMock = mock(SerializationWriterFactory.class);\r\n    when(factoryMock.getSerializationWriter(anyString())).thenReturn(writerMock);\r\n    final RequestAdapter requestAdapterMock = mock(RequestAdapter.class);\r\n    when(requestAdapterMock.getSerializationWriterFactory()).thenReturn(factoryMock);\r\n    requestInfo.setContentFromScalar(requestAdapterMock, \"application/json\", \"foo\");\r\n    verify(writerMock, times(1)).writeStringValue(any(), anyString());\r\n    verify(writerMock, never()).writeCollectionOfPrimitiveValues(any(), any(Iterable.class));\r\n}"
                }
              },
              "247": {
                "code": "when(factoryMock.getSerializationWriter(anyString())).thenReturn(writerMock);",
                "line": 247,
                "type": "STUBBING",
                "locate": "Test Case",
                "abstractedStatement": "when(com.microsoft.kiota.serialization.SerializationWriterFactory.getSerializationWriter(anyString())).thenReturn(com.microsoft.kiota.serialization.SerializationWriter)",
                "isMockRelated": true,
                "isShareable": false,
                "locationContext": {
                  "methodName": "SetsScalarContent",
                  "methodAnnotations": [
                    "Test"
                  ],
                  "methodRawCode": "@Test\r\nvoid SetsScalarContent() {\r\n    // Arrange as the request builders would\r\n    final RequestInformation requestInfo = new RequestInformation();\r\n    requestInfo.httpMethod = HttpMethod.POST;\r\n    requestInfo.urlTemplate = \"http://localhost/users\";\r\n    final SerializationWriter writerMock = mock(SerializationWriter.class);\r\n    final SerializationWriterFactory factoryMock = mock(SerializationWriterFactory.class);\r\n    when(factoryMock.getSerializationWriter(anyString())).thenReturn(writerMock);\r\n    final RequestAdapter requestAdapterMock = mock(RequestAdapter.class);\r\n    when(requestAdapterMock.getSerializationWriterFactory()).thenReturn(factoryMock);\r\n    requestInfo.setContentFromScalar(requestAdapterMock, \"application/json\", \"foo\");\r\n    verify(writerMock, times(1)).writeStringValue(any(), anyString());\r\n    verify(writerMock, never()).writeCollectionOfPrimitiveValues(any(), any(Iterable.class));\r\n}"
                }
              }
            }
          },
          {
            "mockObjectId": 20,
            "mockRole": "mock",
            "variableName": "factoryMock",
            "variableType": "SerializationWriterFactory",
            "mockedClass": "com.microsoft.kiota.serialization.SerializationWriterFactory",
            "packageName": "com.microsoft.kiota",
            "filePath": "C:\\Java_projects\\Microsoft\\kiota-java\\components\\abstractions\\src\\test\\java\\com\\microsoft\\kiota\\RequestInformationTest.java",
            "testMethodName": "SetsBoundaryOnMultipartBody",
            "isReuseableMock": false,
            "overlapLines": [
              264
            ],
            "testMethodRawCode": "@Test\r\nvoid SetsBoundaryOnMultipartBody() {\r\n    final RequestInformation requestInfo = new RequestInformation();\r\n    requestInfo.httpMethod = HttpMethod.POST;\r\n    requestInfo.urlTemplate = \"http://localhost/{URITemplate}/ParameterMapping?IsCaseSensitive={IsCaseSensitive}\";\r\n    final SerializationWriter writerMock = mock(SerializationWriter.class);\r\n    final SerializationWriterFactory factoryMock = mock(SerializationWriterFactory.class);\r\n    when(factoryMock.getSerializationWriter(anyString())).thenReturn(writerMock);\r\n    final RequestAdapter requestAdapterMock = mock(RequestAdapter.class);\r\n    when(requestAdapterMock.getSerializationWriterFactory()).thenReturn(factoryMock);\r\n    final MultipartBody multipartBody = new MultipartBody();\r\n    multipartBody.requestAdapter = requestAdapterMock;\r\n    requestInfo.setContentFromParsable(requestAdapterMock, \"multipart/form-data\", multipartBody);\r\n    assertNotNull(multipartBody.getBoundary());\r\n    assertFalse(multipartBody.getBoundary().isEmpty());\r\n    assertEquals(\"multipart/form-data; boundary=\" + multipartBody.getBoundary(), requestInfo.headers.get(\"Content-Type\").toArray()[0]);\r\n}",
            "shareableMockLines": {},
            "testMockLines": {
              "263": "final SerializationWriterFactory factoryMock = mock(SerializationWriterFactory.class);",
              "264": "when(factoryMock.getSerializationWriter(anyString())).thenReturn(writerMock);"
            },
            "abstractedStatement": {
              "264": "when(com.microsoft.kiota.serialization.SerializationWriterFactory.getSerializationWriter(anyString())).thenReturn(com.microsoft.kiota.serialization.SerializationWriter)"
            },
            "rawStatementInfo": {
              "263": {
                "code": "final SerializationWriterFactory factoryMock = mock(SerializationWriterFactory.class);",
                "line": 263,
                "type": "METHOD_MOCK_CREATION",
                "locate": "Test Case",
                "abstractedStatement": "",
                "isMockRelated": true,
                "isShareable": false,
                "locationContext": {
                  "methodName": "SetsBoundaryOnMultipartBody",
                  "methodAnnotations": [
                    "Test"
                  ],
                  "methodRawCode": "@Test\r\nvoid SetsBoundaryOnMultipartBody() {\r\n    final RequestInformation requestInfo = new RequestInformation();\r\n    requestInfo.httpMethod = HttpMethod.POST;\r\n    requestInfo.urlTemplate = \"http://localhost/{URITemplate}/ParameterMapping?IsCaseSensitive={IsCaseSensitive}\";\r\n    final SerializationWriter writerMock = mock(SerializationWriter.class);\r\n    final SerializationWriterFactory factoryMock = mock(SerializationWriterFactory.class);\r\n    when(factoryMock.getSerializationWriter(anyString())).thenReturn(writerMock);\r\n    final RequestAdapter requestAdapterMock = mock(RequestAdapter.class);\r\n    when(requestAdapterMock.getSerializationWriterFactory()).thenReturn(factoryMock);\r\n    final MultipartBody multipartBody = new MultipartBody();\r\n    multipartBody.requestAdapter = requestAdapterMock;\r\n    requestInfo.setContentFromParsable(requestAdapterMock, \"multipart/form-data\", multipartBody);\r\n    assertNotNull(multipartBody.getBoundary());\r\n    assertFalse(multipartBody.getBoundary().isEmpty());\r\n    assertEquals(\"multipart/form-data; boundary=\" + multipartBody.getBoundary(), requestInfo.headers.get(\"Content-Type\").toArray()[0]);\r\n}"
                }
              },
              "264": {
                "code": "when(factoryMock.getSerializationWriter(anyString())).thenReturn(writerMock);",
                "line": 264,
                "type": "STUBBING",
                "locate": "Test Case",
                "abstractedStatement": "when(com.microsoft.kiota.serialization.SerializationWriterFactory.getSerializationWriter(anyString())).thenReturn(com.microsoft.kiota.serialization.SerializationWriter)",
                "isMockRelated": true,
                "isShareable": false,
                "locationContext": {
                  "methodName": "SetsBoundaryOnMultipartBody",
                  "methodAnnotations": [
                    "Test"
                  ],
                  "methodRawCode": "@Test\r\nvoid SetsBoundaryOnMultipartBody() {\r\n    final RequestInformation requestInfo = new RequestInformation();\r\n    requestInfo.httpMethod = HttpMethod.POST;\r\n    requestInfo.urlTemplate = \"http://localhost/{URITemplate}/ParameterMapping?IsCaseSensitive={IsCaseSensitive}\";\r\n    final SerializationWriter writerMock = mock(SerializationWriter.class);\r\n    final SerializationWriterFactory factoryMock = mock(SerializationWriterFactory.class);\r\n    when(factoryMock.getSerializationWriter(anyString())).thenReturn(writerMock);\r\n    final RequestAdapter requestAdapterMock = mock(RequestAdapter.class);\r\n    when(requestAdapterMock.getSerializationWriterFactory()).thenReturn(factoryMock);\r\n    final MultipartBody multipartBody = new MultipartBody();\r\n    multipartBody.requestAdapter = requestAdapterMock;\r\n    requestInfo.setContentFromParsable(requestAdapterMock, \"multipart/form-data\", multipartBody);\r\n    assertNotNull(multipartBody.getBoundary());\r\n    assertFalse(multipartBody.getBoundary().isEmpty());\r\n    assertEquals(\"multipart/form-data; boundary=\" + multipartBody.getBoundary(), requestInfo.headers.get(\"Content-Type\").toArray()[0]);\r\n}"
                }
              }
            }
          }
        ]
      },
      {
        "mockedClass": "com.microsoft.kiota.serialization.SerializationWriterFactory",
        "packageName": "com.microsoft.kiota.serialization",
        "testCaseCount": 2,
        "sequenceCount": 2,
        "sharedStatementLineCount": 1,
        "locReduced": 2,
        "mockObjectCount": 2,
        "sharedStatements": [
          "when(com.microsoft.kiota.serialization.SerializationWriterFactory.getSerializationWriter(java.lang.String)).thenReturn(com.microsoft.kiota.serialization.SerializationWriter)"
        ],
        "sequences": [
          {
            "mockObjectId": 29,
            "mockRole": "mock",
            "variableName": "mockSerializationWriterFactory",
            "variableType": "var",
            "mockedClass": "com.microsoft.kiota.serialization.SerializationWriterFactory",
            "packageName": "com.microsoft.kiota.serialization",
            "filePath": "C:\\Java_projects\\Microsoft\\kiota-java\\components\\abstractions\\src\\test\\java\\com\\microsoft\\kiota\\serialization\\SerializationHelpersTest.java",
            "testMethodName": "serializesObject",
            "isReuseableMock": false,
            "overlapLines": [
              52
            ],
            "testMethodRawCode": "@Test\r\nvoid serializesObject() throws IOException {\r\n    final var mockSerializationWriter = mock(SerializationWriter.class);\r\n    when(mockSerializationWriter.getSerializedContent()).thenReturn(new ByteArrayInputStream(\"{'id':'123'}\".getBytes(_charset)));\r\n    final var mockSerializationWriterFactory = mock(SerializationWriterFactory.class);\r\n    when(mockSerializationWriterFactory.getSerializationWriter(_jsonContentType)).thenReturn(mockSerializationWriter);\r\n    SerializationWriterFactoryRegistry.defaultInstance.contentTypeAssociatedFactories.put(_jsonContentType, mockSerializationWriterFactory);\r\n    final var result = KiotaSerialization.serializeAsString(_jsonContentType, new TestEntity() {\r\n\r\n        {\r\n            setId(\"123\");\r\n        }\r\n    });\r\n    assertEquals(\"{'id':'123'}\", result);\r\n    verify(mockSerializationWriter, times(1)).writeObjectValue(eq(\"\"), any(Parsable.class));\r\n}",
            "shareableMockLines": {},
            "testMockLines": {
              "51": "final var mockSerializationWriterFactory = mock(SerializationWriterFactory.class);",
              "52": "when(mockSerializationWriterFactory.getSerializationWriter(_jsonContentType)).thenReturn(mockSerializationWriter);"
            },
            "abstractedStatement": {
              "52": "when(com.microsoft.kiota.serialization.SerializationWriterFactory.getSerializationWriter(java.lang.String)).thenReturn(com.microsoft.kiota.serialization.SerializationWriter)"
            },
            "rawStatementInfo": {
              "51": {
                "code": "final var mockSerializationWriterFactory = mock(SerializationWriterFactory.class);",
                "line": 51,
                "type": "METHOD_MOCK_CREATION",
                "locate": "Test Case",
                "abstractedStatement": "",
                "isMockRelated": true,
                "isShareable": false,
                "locationContext": {
                  "methodName": "serializesObject",
                  "methodAnnotations": [
                    "Test"
                  ],
                  "methodRawCode": "@Test\r\nvoid serializesObject() throws IOException {\r\n    final var mockSerializationWriter = mock(SerializationWriter.class);\r\n    when(mockSerializationWriter.getSerializedContent()).thenReturn(new ByteArrayInputStream(\"{'id':'123'}\".getBytes(_charset)));\r\n    final var mockSerializationWriterFactory = mock(SerializationWriterFactory.class);\r\n    when(mockSerializationWriterFactory.getSerializationWriter(_jsonContentType)).thenReturn(mockSerializationWriter);\r\n    SerializationWriterFactoryRegistry.defaultInstance.contentTypeAssociatedFactories.put(_jsonContentType, mockSerializationWriterFactory);\r\n    final var result = KiotaSerialization.serializeAsString(_jsonContentType, new TestEntity() {\r\n\r\n        {\r\n            setId(\"123\");\r\n        }\r\n    });\r\n    assertEquals(\"{'id':'123'}\", result);\r\n    verify(mockSerializationWriter, times(1)).writeObjectValue(eq(\"\"), any(Parsable.class));\r\n}"
                }
              },
              "52": {
                "code": "when(mockSerializationWriterFactory.getSerializationWriter(_jsonContentType)).thenReturn(mockSerializationWriter);",
                "line": 52,
                "type": "STUBBING",
                "locate": "Test Case",
                "abstractedStatement": "when(com.microsoft.kiota.serialization.SerializationWriterFactory.getSerializationWriter(java.lang.String)).thenReturn(com.microsoft.kiota.serialization.SerializationWriter)",
                "isMockRelated": true,
                "isShareable": false,
                "locationContext": {
                  "methodName": "serializesObject",
                  "methodAnnotations": [
                    "Test"
                  ],
                  "methodRawCode": "@Test\r\nvoid serializesObject() throws IOException {\r\n    final var mockSerializationWriter = mock(SerializationWriter.class);\r\n    when(mockSerializationWriter.getSerializedContent()).thenReturn(new ByteArrayInputStream(\"{'id':'123'}\".getBytes(_charset)));\r\n    final var mockSerializationWriterFactory = mock(SerializationWriterFactory.class);\r\n    when(mockSerializationWriterFactory.getSerializationWriter(_jsonContentType)).thenReturn(mockSerializationWriter);\r\n    SerializationWriterFactoryRegistry.defaultInstance.contentTypeAssociatedFactories.put(_jsonContentType, mockSerializationWriterFactory);\r\n    final var result = KiotaSerialization.serializeAsString(_jsonContentType, new TestEntity() {\r\n\r\n        {\r\n            setId(\"123\");\r\n        }\r\n    });\r\n    assertEquals(\"{'id':'123'}\", result);\r\n    verify(mockSerializationWriter, times(1)).writeObjectValue(eq(\"\"), any(Parsable.class));\r\n}"
                }
              }
            }
          },
          {
            "mockObjectId": 31,
            "mockRole": "mock",
            "variableName": "mockSerializationWriterFactory",
            "variableType": "var",
            "mockedClass": "com.microsoft.kiota.serialization.SerializationWriterFactory",
            "packageName": "com.microsoft.kiota.serialization",
            "filePath": "C:\\Java_projects\\Microsoft\\kiota-java\\components\\abstractions\\src\\test\\java\\com\\microsoft\\kiota\\serialization\\SerializationHelpersTest.java",
            "testMethodName": "serializesObjectCollection",
            "isReuseableMock": false,
            "overlapLines": [
              74
            ],
            "testMethodRawCode": "@Test\r\nvoid serializesObjectCollection() throws IOException {\r\n    final var mockSerializationWriter = mock(SerializationWriter.class);\r\n    when(mockSerializationWriter.getSerializedContent()).thenReturn(new ByteArrayInputStream(\"[{'id':'123'}]\".getBytes(_charset)));\r\n    final var mockSerializationWriterFactory = mock(SerializationWriterFactory.class);\r\n    when(mockSerializationWriterFactory.getSerializationWriter(_jsonContentType)).thenReturn(mockSerializationWriter);\r\n    SerializationWriterFactoryRegistry.defaultInstance.contentTypeAssociatedFactories.put(_jsonContentType, mockSerializationWriterFactory);\r\n    final var result = KiotaSerialization.serializeAsString(_jsonContentType, new ArrayList<>() {\r\n\r\n        {\r\n            add(new TestEntity() {\r\n\r\n                {\r\n                    setId(\"123\");\r\n                }\r\n            });\r\n        }\r\n    });\r\n    assertEquals(\"[{'id':'123'}]\", result);\r\n    verify(mockSerializationWriter, times(1)).writeCollectionOfObjectValues(eq(\"\"), any());\r\n}",
            "shareableMockLines": {},
            "testMockLines": {
              "73": "final var mockSerializationWriterFactory = mock(SerializationWriterFactory.class);",
              "74": "when(mockSerializationWriterFactory.getSerializationWriter(_jsonContentType)).thenReturn(mockSerializationWriter);"
            },
            "abstractedStatement": {
              "74": "when(com.microsoft.kiota.serialization.SerializationWriterFactory.getSerializationWriter(java.lang.String)).thenReturn(com.microsoft.kiota.serialization.SerializationWriter)"
            },
            "rawStatementInfo": {
              "73": {
                "code": "final var mockSerializationWriterFactory = mock(SerializationWriterFactory.class);",
                "line": 73,
                "type": "METHOD_MOCK_CREATION",
                "locate": "Test Case",
                "abstractedStatement": "",
                "isMockRelated": true,
                "isShareable": false,
                "locationContext": {
                  "methodName": "serializesObjectCollection",
                  "methodAnnotations": [
                    "Test"
                  ],
                  "methodRawCode": "@Test\r\nvoid serializesObjectCollection() throws IOException {\r\n    final var mockSerializationWriter = mock(SerializationWriter.class);\r\n    when(mockSerializationWriter.getSerializedContent()).thenReturn(new ByteArrayInputStream(\"[{'id':'123'}]\".getBytes(_charset)));\r\n    final var mockSerializationWriterFactory = mock(SerializationWriterFactory.class);\r\n    when(mockSerializationWriterFactory.getSerializationWriter(_jsonContentType)).thenReturn(mockSerializationWriter);\r\n    SerializationWriterFactoryRegistry.defaultInstance.contentTypeAssociatedFactories.put(_jsonContentType, mockSerializationWriterFactory);\r\n    final var result = KiotaSerialization.serializeAsString(_jsonContentType, new ArrayList<>() {\r\n\r\n        {\r\n            add(new TestEntity() {\r\n\r\n                {\r\n                    setId(\"123\");\r\n                }\r\n            });\r\n        }\r\n    });\r\n    assertEquals(\"[{'id':'123'}]\", result);\r\n    verify(mockSerializationWriter, times(1)).writeCollectionOfObjectValues(eq(\"\"), any());\r\n}"
                }
              },
              "74": {
                "code": "when(mockSerializationWriterFactory.getSerializationWriter(_jsonContentType)).thenReturn(mockSerializationWriter);",
                "line": 74,
                "type": "STUBBING",
                "locate": "Test Case",
                "abstractedStatement": "when(com.microsoft.kiota.serialization.SerializationWriterFactory.getSerializationWriter(java.lang.String)).thenReturn(com.microsoft.kiota.serialization.SerializationWriter)",
                "isMockRelated": true,
                "isShareable": false,
                "locationContext": {
                  "methodName": "serializesObjectCollection",
                  "methodAnnotations": [
                    "Test"
                  ],
                  "methodRawCode": "@Test\r\nvoid serializesObjectCollection() throws IOException {\r\n    final var mockSerializationWriter = mock(SerializationWriter.class);\r\n    when(mockSerializationWriter.getSerializedContent()).thenReturn(new ByteArrayInputStream(\"[{'id':'123'}]\".getBytes(_charset)));\r\n    final var mockSerializationWriterFactory = mock(SerializationWriterFactory.class);\r\n    when(mockSerializationWriterFactory.getSerializationWriter(_jsonContentType)).thenReturn(mockSerializationWriter);\r\n    SerializationWriterFactoryRegistry.defaultInstance.contentTypeAssociatedFactories.put(_jsonContentType, mockSerializationWriterFactory);\r\n    final var result = KiotaSerialization.serializeAsString(_jsonContentType, new ArrayList<>() {\r\n\r\n        {\r\n            add(new TestEntity() {\r\n\r\n                {\r\n                    setId(\"123\");\r\n                }\r\n            });\r\n        }\r\n    });\r\n    assertEquals(\"[{'id':'123'}]\", result);\r\n    verify(mockSerializationWriter, times(1)).writeCollectionOfObjectValues(eq(\"\"), any());\r\n}"
                }
              }
            }
          }
        ]
      }
    ],
    "com.azure.core.credential.TokenCredential": [
      {
        "mockedClass": "com.azure.core.credential.TokenCredential",
        "packageName": "com.microsoft.kiota.authentication",
        "testCaseCount": 4,
        "sequenceCount": 4,
        "sharedStatementLineCount": 0,
        "locReduced": 3,
        "mockObjectCount": 4,
        "sharedStatements": [],
        "sequences": [
          {
            "mockObjectId": 33,
            "mockRole": "mock",
            "variableName": "tokenCredential",
            "variableType": "var",
            "mockedClass": "com.azure.core.credential.TokenCredential",
            "packageName": "com.microsoft.kiota.authentication",
            "filePath": "C:\\Java_projects\\Microsoft\\kiota-java\\components\\authentication\\azure\\src\\test\\java\\com\\microsoft\\kiota\\authentication\\AzureIdentityAccessTokenProviderTest.java",
            "testMethodName": "testNonLocalhostHttpUrlIsInvalid",
            "isReuseableMock": false,
            "overlapLines": [
              44
            ],
            "testMethodRawCode": "@ParameterizedTest\r\n@ValueSource(strings = { \"http://graph.microsoft.com/me\" })\r\nvoid testNonLocalhostHttpUrlIsInvalid(String urlString) {\r\n    var tokenCredential = mock(TokenCredential.class);\r\n    var accessTokenProvider = new AzureIdentityAccessTokenProvider(tokenCredential, null, \"\");\r\n    assertThrows(IllegalArgumentException.class, () -> accessTokenProvider.getAuthorizationToken(new URI(urlString), new HashMap<>()));\r\n}",
            "shareableMockLines": {},
            "testMockLines": {
              "44": "var tokenCredential = mock(TokenCredential.class);"
            },
            "abstractedStatement": {},
            "rawStatementInfo": {
              "44": {
                "code": "var tokenCredential = mock(TokenCredential.class);",
                "line": 44,
                "type": "METHOD_MOCK_CREATION",
                "locate": "Test Case",
                "abstractedStatement": "",
                "isMockRelated": true,
                "isShareable": false,
                "locationContext": {
                  "methodName": "testNonLocalhostHttpUrlIsInvalid",
                  "methodAnnotations": [
                    "ParameterizedTest",
                    "ValueSource"
                  ],
                  "methodRawCode": "@ParameterizedTest\r\n@ValueSource(strings = { \"http://graph.microsoft.com/me\" })\r\nvoid testNonLocalhostHttpUrlIsInvalid(String urlString) {\r\n    var tokenCredential = mock(TokenCredential.class);\r\n    var accessTokenProvider = new AzureIdentityAccessTokenProvider(tokenCredential, null, \"\");\r\n    assertThrows(IllegalArgumentException.class, () -> accessTokenProvider.getAuthorizationToken(new URI(urlString), new HashMap<>()));\r\n}"
                }
              }
            }
          },
          {
            "mockObjectId": 34,
            "mockRole": "mock",
            "variableName": "tokenCredential",
            "variableType": "var",
            "mockedClass": "com.azure.core.credential.TokenCredential",
            "packageName": "com.microsoft.kiota.authentication",
            "filePath": "C:\\Java_projects\\Microsoft\\kiota-java\\components\\authentication\\azure\\src\\test\\java\\com\\microsoft\\kiota\\authentication\\AzureIdentityAccessTokenProviderTest.java",
            "testMethodName": "testKeepUserProvidedScopes",
            "isReuseableMock": false,
            "overlapLines": [
              55
            ],
            "testMethodRawCode": "@Test\r\nvoid testKeepUserProvidedScopes() throws URISyntaxException {\r\n    var tokenCredential = mock(TokenCredential.class);\r\n    String[] userProvidedScopes = { \"https://graph.microsoft.com/User.Read\", \"https://graph.microsoft.com/Application.Read\" };\r\n    var accessTokenProvider = new AzureIdentityAccessTokenProvider(tokenCredential, new String[] {}, userProvidedScopes);\r\n    assertScopes(tokenCredential, accessTokenProvider, userProvidedScopes);\r\n}",
            "shareableMockLines": {},
            "testMockLines": {
              "55": "var tokenCredential = mock(TokenCredential.class);"
            },
            "abstractedStatement": {},
            "rawStatementInfo": {
              "55": {
                "code": "var tokenCredential = mock(TokenCredential.class);",
                "line": 55,
                "type": "METHOD_MOCK_CREATION",
                "locate": "Test Case",
                "abstractedStatement": "",
                "isMockRelated": true,
                "isShareable": false,
                "locationContext": {
                  "methodName": "testKeepUserProvidedScopes",
                  "methodAnnotations": [
                    "Test"
                  ],
                  "methodRawCode": "@Test\r\nvoid testKeepUserProvidedScopes() throws URISyntaxException {\r\n    var tokenCredential = mock(TokenCredential.class);\r\n    String[] userProvidedScopes = { \"https://graph.microsoft.com/User.Read\", \"https://graph.microsoft.com/Application.Read\" };\r\n    var accessTokenProvider = new AzureIdentityAccessTokenProvider(tokenCredential, new String[] {}, userProvidedScopes);\r\n    assertScopes(tokenCredential, accessTokenProvider, userProvidedScopes);\r\n}"
                }
              }
            }
          },
          {
            "mockObjectId": 35,
            "mockRole": "mock",
            "variableName": "tokenCredential",
            "variableType": "var",
            "mockedClass": "com.azure.core.credential.TokenCredential",
            "packageName": "com.microsoft.kiota.authentication",
            "filePath": "C:\\Java_projects\\Microsoft\\kiota-java\\components\\authentication\\azure\\src\\test\\java\\com\\microsoft\\kiota\\authentication\\AzureIdentityAccessTokenProviderTest.java",
            "testMethodName": "testConfigureDefaultScopeWhenScopesNotProvided",
            "isReuseableMock": false,
            "overlapLines": [
              67
            ],
            "testMethodRawCode": "@Test\r\nvoid testConfigureDefaultScopeWhenScopesNotProvided() throws URISyntaxException {\r\n    var tokenCredential = mock(TokenCredential.class);\r\n    var accessTokenProvider = new AzureIdentityAccessTokenProvider(tokenCredential, new String[] {});\r\n    assertScopes(tokenCredential, accessTokenProvider, new String[] { \"https://graph.microsoft.com/.default\" });\r\n}",
            "shareableMockLines": {},
            "testMockLines": {
              "67": "var tokenCredential = mock(TokenCredential.class);"
            },
            "abstractedStatement": {},
            "rawStatementInfo": {
              "67": {
                "code": "var tokenCredential = mock(TokenCredential.class);",
                "line": 67,
                "type": "METHOD_MOCK_CREATION",
                "locate": "Test Case",
                "abstractedStatement": "",
                "isMockRelated": true,
                "isShareable": false,
                "locationContext": {
                  "methodName": "testConfigureDefaultScopeWhenScopesNotProvided",
                  "methodAnnotations": [
                    "Test"
                  ],
                  "methodRawCode": "@Test\r\nvoid testConfigureDefaultScopeWhenScopesNotProvided() throws URISyntaxException {\r\n    var tokenCredential = mock(TokenCredential.class);\r\n    var accessTokenProvider = new AzureIdentityAccessTokenProvider(tokenCredential, new String[] {});\r\n    assertScopes(tokenCredential, accessTokenProvider, new String[] { \"https://graph.microsoft.com/.default\" });\r\n}"
                }
              }
            }
          },
          {
            "mockObjectId": 36,
            "mockRole": "mock",
            "variableName": "tokenCredential",
            "variableType": "var",
            "mockedClass": "com.azure.core.credential.TokenCredential",
            "packageName": "com.microsoft.kiota.authentication",
            "filePath": "C:\\Java_projects\\Microsoft\\kiota-java\\components\\authentication\\azure\\src\\test\\java\\com\\microsoft\\kiota\\authentication\\AzureIdentityAccessTokenProviderTest.java",
            "testMethodName": "testConfigureDefaultScopeWhenScopesNullOrEmpty",
            "isReuseableMock": false,
            "overlapLines": [
              80
            ],
            "testMethodRawCode": "@ParameterizedTest\r\n@NullAndEmptySource\r\nvoid testConfigureDefaultScopeWhenScopesNullOrEmpty(String[] nullOrEmptyUserProvidedScopes) throws URISyntaxException {\r\n    var tokenCredential = mock(TokenCredential.class);\r\n    var accessTokenProvider = new AzureIdentityAccessTokenProvider(tokenCredential, new String[] {}, nullOrEmptyUserProvidedScopes);\r\n    assertScopes(tokenCredential, accessTokenProvider, new String[] { \"https://graph.microsoft.com/.default\" });\r\n}",
            "shareableMockLines": {},
            "testMockLines": {
              "80": "var tokenCredential = mock(TokenCredential.class);"
            },
            "abstractedStatement": {},
            "rawStatementInfo": {
              "80": {
                "code": "var tokenCredential = mock(TokenCredential.class);",
                "line": 80,
                "type": "METHOD_MOCK_CREATION",
                "locate": "Test Case",
                "abstractedStatement": "",
                "isMockRelated": true,
                "isShareable": false,
                "locationContext": {
                  "methodName": "testConfigureDefaultScopeWhenScopesNullOrEmpty",
                  "methodAnnotations": [
                    "ParameterizedTest",
                    "NullAndEmptySource"
                  ],
                  "methodRawCode": "@ParameterizedTest\r\n@NullAndEmptySource\r\nvoid testConfigureDefaultScopeWhenScopesNullOrEmpty(String[] nullOrEmptyUserProvidedScopes) throws URISyntaxException {\r\n    var tokenCredential = mock(TokenCredential.class);\r\n    var accessTokenProvider = new AzureIdentityAccessTokenProvider(tokenCredential, new String[] {}, nullOrEmptyUserProvidedScopes);\r\n    assertScopes(tokenCredential, accessTokenProvider, new String[] { \"https://graph.microsoft.com/.default\" });\r\n}"
                }
              }
            }
          }
        ]
      }
    ],
    "com.microsoft.kiota.RequestAdapter": [
      {
        "mockedClass": "com.microsoft.kiota.RequestAdapter",
        "packageName": "com.microsoft.kiota",
        "testCaseCount": 5,
        "sequenceCount": 5,
        "sharedStatementLineCount": 1,
        "locReduced": 5,
        "mockObjectCount": 5,
        "sharedStatements": [
          "when(com.microsoft.kiota.RequestAdapter.getSerializationWriterFactory()).thenReturn(com.microsoft.kiota.serialization.SerializationWriterFactory)"
        ],
        "sequences": [
          {
            "mockObjectId": 9,
            "mockRole": "mock",
            "variableName": "requestAdapterMock",
            "variableType": "RequestAdapter",
            "mockedClass": "com.microsoft.kiota.RequestAdapter",
            "packageName": "com.microsoft.kiota",
            "filePath": "C:\\Java_projects\\Microsoft\\kiota-java\\components\\abstractions\\src\\test\\java\\com\\microsoft\\kiota\\RequestInformationTest.java",
            "testMethodName": "SetsParsableContent",
            "isReuseableMock": false,
            "overlapLines": [
              194
            ],
            "testMethodRawCode": "@Test\r\nvoid SetsParsableContent() {\r\n    // Arrange as the request builders would\r\n    final RequestInformation requestInfo = new RequestInformation();\r\n    requestInfo.httpMethod = HttpMethod.POST;\r\n    requestInfo.urlTemplate = \"http://localhost/users\";\r\n    final SerializationWriter writerMock = mock(SerializationWriter.class);\r\n    final SerializationWriterFactory factoryMock = mock(SerializationWriterFactory.class);\r\n    when(factoryMock.getSerializationWriter(anyString())).thenReturn(writerMock);\r\n    final RequestAdapter requestAdapterMock = mock(RequestAdapter.class);\r\n    when(requestAdapterMock.getSerializationWriterFactory()).thenReturn(factoryMock);\r\n    requestInfo.setContentFromParsable(requestAdapterMock, \"application/json\", new TestEntity());\r\n    verify(writerMock, times(1)).writeObjectValue(any(), any(TestEntity.class));\r\n    verify(writerMock, never()).writeCollectionOfObjectValues(anyString(), any(ArrayList.class));\r\n}",
            "shareableMockLines": {},
            "testMockLines": {
              "193": "final RequestAdapter requestAdapterMock = mock(RequestAdapter.class);",
              "194": "when(requestAdapterMock.getSerializationWriterFactory()).thenReturn(factoryMock);",
              "195": "requestInfo.setContentFromParsable(requestAdapterMock, \"application/json\", new TestEntity());"
            },
            "abstractedStatement": {
              "194": "when(com.microsoft.kiota.RequestAdapter.getSerializationWriterFactory()).thenReturn(com.microsoft.kiota.serialization.SerializationWriterFactory)"
            },
            "rawStatementInfo": {
              "193": {
                "code": "final RequestAdapter requestAdapterMock = mock(RequestAdapter.class);",
                "line": 193,
                "type": "METHOD_MOCK_CREATION",
                "locate": "Test Case",
                "abstractedStatement": "",
                "isMockRelated": true,
                "isShareable": false,
                "locationContext": {
                  "methodName": "SetsParsableContent",
                  "methodAnnotations": [
                    "Test"
                  ],
                  "methodRawCode": "@Test\r\nvoid SetsParsableContent() {\r\n    // Arrange as the request builders would\r\n    final RequestInformation requestInfo = new RequestInformation();\r\n    requestInfo.httpMethod = HttpMethod.POST;\r\n    requestInfo.urlTemplate = \"http://localhost/users\";\r\n    final SerializationWriter writerMock = mock(SerializationWriter.class);\r\n    final SerializationWriterFactory factoryMock = mock(SerializationWriterFactory.class);\r\n    when(factoryMock.getSerializationWriter(anyString())).thenReturn(writerMock);\r\n    final RequestAdapter requestAdapterMock = mock(RequestAdapter.class);\r\n    when(requestAdapterMock.getSerializationWriterFactory()).thenReturn(factoryMock);\r\n    requestInfo.setContentFromParsable(requestAdapterMock, \"application/json\", new TestEntity());\r\n    verify(writerMock, times(1)).writeObjectValue(any(), any(TestEntity.class));\r\n    verify(writerMock, never()).writeCollectionOfObjectValues(anyString(), any(ArrayList.class));\r\n}"
                }
              },
              "194": {
                "code": "when(requestAdapterMock.getSerializationWriterFactory()).thenReturn(factoryMock);",
                "line": 194,
                "type": "STUBBING",
                "locate": "Test Case",
                "abstractedStatement": "when(com.microsoft.kiota.RequestAdapter.getSerializationWriterFactory()).thenReturn(com.microsoft.kiota.serialization.SerializationWriterFactory)",
                "isMockRelated": true,
                "isShareable": false,
                "locationContext": {
                  "methodName": "SetsParsableContent",
                  "methodAnnotations": [
                    "Test"
                  ],
                  "methodRawCode": "@Test\r\nvoid SetsParsableContent() {\r\n    // Arrange as the request builders would\r\n    final RequestInformation requestInfo = new RequestInformation();\r\n    requestInfo.httpMethod = HttpMethod.POST;\r\n    requestInfo.urlTemplate = \"http://localhost/users\";\r\n    final SerializationWriter writerMock = mock(SerializationWriter.class);\r\n    final SerializationWriterFactory factoryMock = mock(SerializationWriterFactory.class);\r\n    when(factoryMock.getSerializationWriter(anyString())).thenReturn(writerMock);\r\n    final RequestAdapter requestAdapterMock = mock(RequestAdapter.class);\r\n    when(requestAdapterMock.getSerializationWriterFactory()).thenReturn(factoryMock);\r\n    requestInfo.setContentFromParsable(requestAdapterMock, \"application/json\", new TestEntity());\r\n    verify(writerMock, times(1)).writeObjectValue(any(), any(TestEntity.class));\r\n    verify(writerMock, never()).writeCollectionOfObjectValues(anyString(), any(ArrayList.class));\r\n}"
                }
              },
              "195": {
                "code": "requestInfo.setContentFromParsable(requestAdapterMock, \"application/json\", new TestEntity());",
                "line": 195,
                "type": "REFERENCE",
                "locate": "Test Case",
                "abstractedStatement": "",
                "isMockRelated": false,
                "isShareable": false,
                "locationContext": {
                  "methodName": "SetsParsableContent",
                  "methodAnnotations": [
                    "Test"
                  ],
                  "methodRawCode": "@Test\r\nvoid SetsParsableContent() {\r\n    // Arrange as the request builders would\r\n    final RequestInformation requestInfo = new RequestInformation();\r\n    requestInfo.httpMethod = HttpMethod.POST;\r\n    requestInfo.urlTemplate = \"http://localhost/users\";\r\n    final SerializationWriter writerMock = mock(SerializationWriter.class);\r\n    final SerializationWriterFactory factoryMock = mock(SerializationWriterFactory.class);\r\n    when(factoryMock.getSerializationWriter(anyString())).thenReturn(writerMock);\r\n    final RequestAdapter requestAdapterMock = mock(RequestAdapter.class);\r\n    when(requestAdapterMock.getSerializationWriterFactory()).thenReturn(factoryMock);\r\n    requestInfo.setContentFromParsable(requestAdapterMock, \"application/json\", new TestEntity());\r\n    verify(writerMock, times(1)).writeObjectValue(any(), any(TestEntity.class));\r\n    verify(writerMock, never()).writeCollectionOfObjectValues(anyString(), any(ArrayList.class));\r\n}"
                }
              }
            }
          },
          {
            "mockObjectId": 12,
            "mockRole": "mock",
            "variableName": "requestAdapterMock",
            "variableType": "RequestAdapter",
            "mockedClass": "com.microsoft.kiota.RequestAdapter",
            "packageName": "com.microsoft.kiota",
            "filePath": "C:\\Java_projects\\Microsoft\\kiota-java\\components\\abstractions\\src\\test\\java\\com\\microsoft\\kiota\\RequestInformationTest.java",
            "testMethodName": "SetsParsableContentCollection",
            "isReuseableMock": false,
            "overlapLines": [
              213
            ],
            "testMethodRawCode": "@Test\r\nvoid SetsParsableContentCollection() {\r\n    // Arrange as the request builders would\r\n    final RequestInformation requestInfo = new RequestInformation();\r\n    requestInfo.httpMethod = HttpMethod.POST;\r\n    requestInfo.urlTemplate = \"http://localhost/users\";\r\n    final SerializationWriter writerMock = mock(SerializationWriter.class);\r\n    final SerializationWriterFactory factoryMock = mock(SerializationWriterFactory.class);\r\n    when(factoryMock.getSerializationWriter(anyString())).thenReturn(writerMock);\r\n    final RequestAdapter requestAdapterMock = mock(RequestAdapter.class);\r\n    when(requestAdapterMock.getSerializationWriterFactory()).thenReturn(factoryMock);\r\n    requestInfo.setContentFromParsable(requestAdapterMock, \"application/json\", new TestEntity[] { new TestEntity() });\r\n    verify(writerMock, never()).writeObjectValue(any(), any(TestEntity.class));\r\n    verify(writerMock, times(1)).writeCollectionOfObjectValues(any(), any(Iterable.class));\r\n}",
            "shareableMockLines": {},
            "testMockLines": {
              "212": "final RequestAdapter requestAdapterMock = mock(RequestAdapter.class);",
              "213": "when(requestAdapterMock.getSerializationWriterFactory()).thenReturn(factoryMock);",
              "214": "requestInfo.setContentFromParsable(requestAdapterMock, \"application/json\", new TestEntity[] { new TestEntity() });"
            },
            "abstractedStatement": {
              "213": "when(com.microsoft.kiota.RequestAdapter.getSerializationWriterFactory()).thenReturn(com.microsoft.kiota.serialization.SerializationWriterFactory)"
            },
            "rawStatementInfo": {
              "212": {
                "code": "final RequestAdapter requestAdapterMock = mock(RequestAdapter.class);",
                "line": 212,
                "type": "METHOD_MOCK_CREATION",
                "locate": "Test Case",
                "abstractedStatement": "",
                "isMockRelated": true,
                "isShareable": false,
                "locationContext": {
                  "methodName": "SetsParsableContentCollection",
                  "methodAnnotations": [
                    "Test"
                  ],
                  "methodRawCode": "@Test\r\nvoid SetsParsableContentCollection() {\r\n    // Arrange as the request builders would\r\n    final RequestInformation requestInfo = new RequestInformation();\r\n    requestInfo.httpMethod = HttpMethod.POST;\r\n    requestInfo.urlTemplate = \"http://localhost/users\";\r\n    final SerializationWriter writerMock = mock(SerializationWriter.class);\r\n    final SerializationWriterFactory factoryMock = mock(SerializationWriterFactory.class);\r\n    when(factoryMock.getSerializationWriter(anyString())).thenReturn(writerMock);\r\n    final RequestAdapter requestAdapterMock = mock(RequestAdapter.class);\r\n    when(requestAdapterMock.getSerializationWriterFactory()).thenReturn(factoryMock);\r\n    requestInfo.setContentFromParsable(requestAdapterMock, \"application/json\", new TestEntity[] { new TestEntity() });\r\n    verify(writerMock, never()).writeObjectValue(any(), any(TestEntity.class));\r\n    verify(writerMock, times(1)).writeCollectionOfObjectValues(any(), any(Iterable.class));\r\n}"
                }
              },
              "213": {
                "code": "when(requestAdapterMock.getSerializationWriterFactory()).thenReturn(factoryMock);",
                "line": 213,
                "type": "STUBBING",
                "locate": "Test Case",
                "abstractedStatement": "when(com.microsoft.kiota.RequestAdapter.getSerializationWriterFactory()).thenReturn(com.microsoft.kiota.serialization.SerializationWriterFactory)",
                "isMockRelated": true,
                "isShareable": false,
                "locationContext": {
                  "methodName": "SetsParsableContentCollection",
                  "methodAnnotations": [
                    "Test"
                  ],
                  "methodRawCode": "@Test\r\nvoid SetsParsableContentCollection() {\r\n    // Arrange as the request builders would\r\n    final RequestInformation requestInfo = new RequestInformation();\r\n    requestInfo.httpMethod = HttpMethod.POST;\r\n    requestInfo.urlTemplate = \"http://localhost/users\";\r\n    final SerializationWriter writerMock = mock(SerializationWriter.class);\r\n    final SerializationWriterFactory factoryMock = mock(SerializationWriterFactory.class);\r\n    when(factoryMock.getSerializationWriter(anyString())).thenReturn(writerMock);\r\n    final RequestAdapter requestAdapterMock = mock(RequestAdapter.class);\r\n    when(requestAdapterMock.getSerializationWriterFactory()).thenReturn(factoryMock);\r\n    requestInfo.setContentFromParsable(requestAdapterMock, \"application/json\", new TestEntity[] { new TestEntity() });\r\n    verify(writerMock, never()).writeObjectValue(any(), any(TestEntity.class));\r\n    verify(writerMock, times(1)).writeCollectionOfObjectValues(any(), any(Iterable.class));\r\n}"
                }
              },
              "214": {
                "code": "requestInfo.setContentFromParsable(requestAdapterMock, \"application/json\", new TestEntity[] { new TestEntity() });",
                "line": 214,
                "type": "REFERENCE",
                "locate": "Test Case",
                "abstractedStatement": "",
                "isMockRelated": false,
                "isShareable": false,
                "locationContext": {
                  "methodName": "SetsParsableContentCollection",
                  "methodAnnotations": [
                    "Test"
                  ],
                  "methodRawCode": "@Test\r\nvoid SetsParsableContentCollection() {\r\n    // Arrange as the request builders would\r\n    final RequestInformation requestInfo = new RequestInformation();\r\n    requestInfo.httpMethod = HttpMethod.POST;\r\n    requestInfo.urlTemplate = \"http://localhost/users\";\r\n    final SerializationWriter writerMock = mock(SerializationWriter.class);\r\n    final SerializationWriterFactory factoryMock = mock(SerializationWriterFactory.class);\r\n    when(factoryMock.getSerializationWriter(anyString())).thenReturn(writerMock);\r\n    final RequestAdapter requestAdapterMock = mock(RequestAdapter.class);\r\n    when(requestAdapterMock.getSerializationWriterFactory()).thenReturn(factoryMock);\r\n    requestInfo.setContentFromParsable(requestAdapterMock, \"application/json\", new TestEntity[] { new TestEntity() });\r\n    verify(writerMock, never()).writeObjectValue(any(), any(TestEntity.class));\r\n    verify(writerMock, times(1)).writeCollectionOfObjectValues(any(), any(Iterable.class));\r\n}"
                }
              }
            }
          },
          {
            "mockObjectId": 15,
            "mockRole": "mock",
            "variableName": "requestAdapterMock",
            "variableType": "RequestAdapter",
            "mockedClass": "com.microsoft.kiota.RequestAdapter",
            "packageName": "com.microsoft.kiota",
            "filePath": "C:\\Java_projects\\Microsoft\\kiota-java\\components\\abstractions\\src\\test\\java\\com\\microsoft\\kiota\\RequestInformationTest.java",
            "testMethodName": "SetsScalarContentCollection",
            "isReuseableMock": false,
            "overlapLines": [
              231
            ],
            "testMethodRawCode": "@Test\r\nvoid SetsScalarContentCollection() {\r\n    // Arrange as the request builders would\r\n    final RequestInformation requestInfo = new RequestInformation();\r\n    requestInfo.httpMethod = HttpMethod.POST;\r\n    requestInfo.urlTemplate = \"http://localhost/users\";\r\n    final SerializationWriter writerMock = mock(SerializationWriter.class);\r\n    final SerializationWriterFactory factoryMock = mock(SerializationWriterFactory.class);\r\n    when(factoryMock.getSerializationWriter(anyString())).thenReturn(writerMock);\r\n    final RequestAdapter requestAdapterMock = mock(RequestAdapter.class);\r\n    when(requestAdapterMock.getSerializationWriterFactory()).thenReturn(factoryMock);\r\n    requestInfo.setContentFromScalarCollection(requestAdapterMock, \"application/json\", new String[] { \"foo\" });\r\n    verify(writerMock, never()).writeStringValue(any(), anyString());\r\n    verify(writerMock, times(1)).writeCollectionOfPrimitiveValues(any(), any(Iterable.class));\r\n}",
            "shareableMockLines": {},
            "testMockLines": {
              "230": "final RequestAdapter requestAdapterMock = mock(RequestAdapter.class);",
              "231": "when(requestAdapterMock.getSerializationWriterFactory()).thenReturn(factoryMock);",
              "232": "requestInfo.setContentFromScalarCollection(requestAdapterMock, \"application/json\", new String[] { \"foo\" });"
            },
            "abstractedStatement": {
              "231": "when(com.microsoft.kiota.RequestAdapter.getSerializationWriterFactory()).thenReturn(com.microsoft.kiota.serialization.SerializationWriterFactory)"
            },
            "rawStatementInfo": {
              "230": {
                "code": "final RequestAdapter requestAdapterMock = mock(RequestAdapter.class);",
                "line": 230,
                "type": "METHOD_MOCK_CREATION",
                "locate": "Test Case",
                "abstractedStatement": "",
                "isMockRelated": true,
                "isShareable": false,
                "locationContext": {
                  "methodName": "SetsScalarContentCollection",
                  "methodAnnotations": [
                    "Test"
                  ],
                  "methodRawCode": "@Test\r\nvoid SetsScalarContentCollection() {\r\n    // Arrange as the request builders would\r\n    final RequestInformation requestInfo = new RequestInformation();\r\n    requestInfo.httpMethod = HttpMethod.POST;\r\n    requestInfo.urlTemplate = \"http://localhost/users\";\r\n    final SerializationWriter writerMock = mock(SerializationWriter.class);\r\n    final SerializationWriterFactory factoryMock = mock(SerializationWriterFactory.class);\r\n    when(factoryMock.getSerializationWriter(anyString())).thenReturn(writerMock);\r\n    final RequestAdapter requestAdapterMock = mock(RequestAdapter.class);\r\n    when(requestAdapterMock.getSerializationWriterFactory()).thenReturn(factoryMock);\r\n    requestInfo.setContentFromScalarCollection(requestAdapterMock, \"application/json\", new String[] { \"foo\" });\r\n    verify(writerMock, never()).writeStringValue(any(), anyString());\r\n    verify(writerMock, times(1)).writeCollectionOfPrimitiveValues(any(), any(Iterable.class));\r\n}"
                }
              },
              "231": {
                "code": "when(requestAdapterMock.getSerializationWriterFactory()).thenReturn(factoryMock);",
                "line": 231,
                "type": "STUBBING",
                "locate": "Test Case",
                "abstractedStatement": "when(com.microsoft.kiota.RequestAdapter.getSerializationWriterFactory()).thenReturn(com.microsoft.kiota.serialization.SerializationWriterFactory)",
                "isMockRelated": true,
                "isShareable": false,
                "locationContext": {
                  "methodName": "SetsScalarContentCollection",
                  "methodAnnotations": [
                    "Test"
                  ],
                  "methodRawCode": "@Test\r\nvoid SetsScalarContentCollection() {\r\n    // Arrange as the request builders would\r\n    final RequestInformation requestInfo = new RequestInformation();\r\n    requestInfo.httpMethod = HttpMethod.POST;\r\n    requestInfo.urlTemplate = \"http://localhost/users\";\r\n    final SerializationWriter writerMock = mock(SerializationWriter.class);\r\n    final SerializationWriterFactory factoryMock = mock(SerializationWriterFactory.class);\r\n    when(factoryMock.getSerializationWriter(anyString())).thenReturn(writerMock);\r\n    final RequestAdapter requestAdapterMock = mock(RequestAdapter.class);\r\n    when(requestAdapterMock.getSerializationWriterFactory()).thenReturn(factoryMock);\r\n    requestInfo.setContentFromScalarCollection(requestAdapterMock, \"application/json\", new String[] { \"foo\" });\r\n    verify(writerMock, never()).writeStringValue(any(), anyString());\r\n    verify(writerMock, times(1)).writeCollectionOfPrimitiveValues(any(), any(Iterable.class));\r\n}"
                }
              },
              "232": {
                "code": "requestInfo.setContentFromScalarCollection(requestAdapterMock, \"application/json\", new String[] { \"foo\" });",
                "line": 232,
                "type": "REFERENCE",
                "locate": "Test Case",
                "abstractedStatement": "",
                "isMockRelated": false,
                "isShareable": false,
                "locationContext": {
                  "methodName": "SetsScalarContentCollection",
                  "methodAnnotations": [
                    "Test"
                  ],
                  "methodRawCode": "@Test\r\nvoid SetsScalarContentCollection() {\r\n    // Arrange as the request builders would\r\n    final RequestInformation requestInfo = new RequestInformation();\r\n    requestInfo.httpMethod = HttpMethod.POST;\r\n    requestInfo.urlTemplate = \"http://localhost/users\";\r\n    final SerializationWriter writerMock = mock(SerializationWriter.class);\r\n    final SerializationWriterFactory factoryMock = mock(SerializationWriterFactory.class);\r\n    when(factoryMock.getSerializationWriter(anyString())).thenReturn(writerMock);\r\n    final RequestAdapter requestAdapterMock = mock(RequestAdapter.class);\r\n    when(requestAdapterMock.getSerializationWriterFactory()).thenReturn(factoryMock);\r\n    requestInfo.setContentFromScalarCollection(requestAdapterMock, \"application/json\", new String[] { \"foo\" });\r\n    verify(writerMock, never()).writeStringValue(any(), anyString());\r\n    verify(writerMock, times(1)).writeCollectionOfPrimitiveValues(any(), any(Iterable.class));\r\n}"
                }
              }
            }
          },
          {
            "mockObjectId": 18,
            "mockRole": "mock",
            "variableName": "requestAdapterMock",
            "variableType": "RequestAdapter",
            "mockedClass": "com.microsoft.kiota.RequestAdapter",
            "packageName": "com.microsoft.kiota",
            "filePath": "C:\\Java_projects\\Microsoft\\kiota-java\\components\\abstractions\\src\\test\\java\\com\\microsoft\\kiota\\RequestInformationTest.java",
            "testMethodName": "SetsScalarContent",
            "isReuseableMock": false,
            "overlapLines": [
              249
            ],
            "testMethodRawCode": "@Test\r\nvoid SetsScalarContent() {\r\n    // Arrange as the request builders would\r\n    final RequestInformation requestInfo = new RequestInformation();\r\n    requestInfo.httpMethod = HttpMethod.POST;\r\n    requestInfo.urlTemplate = \"http://localhost/users\";\r\n    final SerializationWriter writerMock = mock(SerializationWriter.class);\r\n    final SerializationWriterFactory factoryMock = mock(SerializationWriterFactory.class);\r\n    when(factoryMock.getSerializationWriter(anyString())).thenReturn(writerMock);\r\n    final RequestAdapter requestAdapterMock = mock(RequestAdapter.class);\r\n    when(requestAdapterMock.getSerializationWriterFactory()).thenReturn(factoryMock);\r\n    requestInfo.setContentFromScalar(requestAdapterMock, \"application/json\", \"foo\");\r\n    verify(writerMock, times(1)).writeStringValue(any(), anyString());\r\n    verify(writerMock, never()).writeCollectionOfPrimitiveValues(any(), any(Iterable.class));\r\n}",
            "shareableMockLines": {},
            "testMockLines": {
              "248": "final RequestAdapter requestAdapterMock = mock(RequestAdapter.class);",
              "249": "when(requestAdapterMock.getSerializationWriterFactory()).thenReturn(factoryMock);",
              "250": "requestInfo.setContentFromScalar(requestAdapterMock, \"application/json\", \"foo\");"
            },
            "abstractedStatement": {
              "249": "when(com.microsoft.kiota.RequestAdapter.getSerializationWriterFactory()).thenReturn(com.microsoft.kiota.serialization.SerializationWriterFactory)"
            },
            "rawStatementInfo": {
              "248": {
                "code": "final RequestAdapter requestAdapterMock = mock(RequestAdapter.class);",
                "line": 248,
                "type": "METHOD_MOCK_CREATION",
                "locate": "Test Case",
                "abstractedStatement": "",
                "isMockRelated": true,
                "isShareable": false,
                "locationContext": {
                  "methodName": "SetsScalarContent",
                  "methodAnnotations": [
                    "Test"
                  ],
                  "methodRawCode": "@Test\r\nvoid SetsScalarContent() {\r\n    // Arrange as the request builders would\r\n    final RequestInformation requestInfo = new RequestInformation();\r\n    requestInfo.httpMethod = HttpMethod.POST;\r\n    requestInfo.urlTemplate = \"http://localhost/users\";\r\n    final SerializationWriter writerMock = mock(SerializationWriter.class);\r\n    final SerializationWriterFactory factoryMock = mock(SerializationWriterFactory.class);\r\n    when(factoryMock.getSerializationWriter(anyString())).thenReturn(writerMock);\r\n    final RequestAdapter requestAdapterMock = mock(RequestAdapter.class);\r\n    when(requestAdapterMock.getSerializationWriterFactory()).thenReturn(factoryMock);\r\n    requestInfo.setContentFromScalar(requestAdapterMock, \"application/json\", \"foo\");\r\n    verify(writerMock, times(1)).writeStringValue(any(), anyString());\r\n    verify(writerMock, never()).writeCollectionOfPrimitiveValues(any(), any(Iterable.class));\r\n}"
                }
              },
              "249": {
                "code": "when(requestAdapterMock.getSerializationWriterFactory()).thenReturn(factoryMock);",
                "line": 249,
                "type": "STUBBING",
                "locate": "Test Case",
                "abstractedStatement": "when(com.microsoft.kiota.RequestAdapter.getSerializationWriterFactory()).thenReturn(com.microsoft.kiota.serialization.SerializationWriterFactory)",
                "isMockRelated": true,
                "isShareable": false,
                "locationContext": {
                  "methodName": "SetsScalarContent",
                  "methodAnnotations": [
                    "Test"
                  ],
                  "methodRawCode": "@Test\r\nvoid SetsScalarContent() {\r\n    // Arrange as the request builders would\r\n    final RequestInformation requestInfo = new RequestInformation();\r\n    requestInfo.httpMethod = HttpMethod.POST;\r\n    requestInfo.urlTemplate = \"http://localhost/users\";\r\n    final SerializationWriter writerMock = mock(SerializationWriter.class);\r\n    final SerializationWriterFactory factoryMock = mock(SerializationWriterFactory.class);\r\n    when(factoryMock.getSerializationWriter(anyString())).thenReturn(writerMock);\r\n    final RequestAdapter requestAdapterMock = mock(RequestAdapter.class);\r\n    when(requestAdapterMock.getSerializationWriterFactory()).thenReturn(factoryMock);\r\n    requestInfo.setContentFromScalar(requestAdapterMock, \"application/json\", \"foo\");\r\n    verify(writerMock, times(1)).writeStringValue(any(), anyString());\r\n    verify(writerMock, never()).writeCollectionOfPrimitiveValues(any(), any(Iterable.class));\r\n}"
                }
              },
              "250": {
                "code": "requestInfo.setContentFromScalar(requestAdapterMock, \"application/json\", \"foo\");",
                "line": 250,
                "type": "REFERENCE",
                "locate": "Test Case",
                "abstractedStatement": "",
                "isMockRelated": false,
                "isShareable": false,
                "locationContext": {
                  "methodName": "SetsScalarContent",
                  "methodAnnotations": [
                    "Test"
                  ],
                  "methodRawCode": "@Test\r\nvoid SetsScalarContent() {\r\n    // Arrange as the request builders would\r\n    final RequestInformation requestInfo = new RequestInformation();\r\n    requestInfo.httpMethod = HttpMethod.POST;\r\n    requestInfo.urlTemplate = \"http://localhost/users\";\r\n    final SerializationWriter writerMock = mock(SerializationWriter.class);\r\n    final SerializationWriterFactory factoryMock = mock(SerializationWriterFactory.class);\r\n    when(factoryMock.getSerializationWriter(anyString())).thenReturn(writerMock);\r\n    final RequestAdapter requestAdapterMock = mock(RequestAdapter.class);\r\n    when(requestAdapterMock.getSerializationWriterFactory()).thenReturn(factoryMock);\r\n    requestInfo.setContentFromScalar(requestAdapterMock, \"application/json\", \"foo\");\r\n    verify(writerMock, times(1)).writeStringValue(any(), anyString());\r\n    verify(writerMock, never()).writeCollectionOfPrimitiveValues(any(), any(Iterable.class));\r\n}"
                }
              }
            }
          },
          {
            "mockObjectId": 21,
            "mockRole": "mock",
            "variableName": "requestAdapterMock",
            "variableType": "RequestAdapter",
            "mockedClass": "com.microsoft.kiota.RequestAdapter",
            "packageName": "com.microsoft.kiota",
            "filePath": "C:\\Java_projects\\Microsoft\\kiota-java\\components\\abstractions\\src\\test\\java\\com\\microsoft\\kiota\\RequestInformationTest.java",
            "testMethodName": "SetsBoundaryOnMultipartBody",
            "isReuseableMock": false,
            "overlapLines": [
              266
            ],
            "testMethodRawCode": "@Test\r\nvoid SetsBoundaryOnMultipartBody() {\r\n    final RequestInformation requestInfo = new RequestInformation();\r\n    requestInfo.httpMethod = HttpMethod.POST;\r\n    requestInfo.urlTemplate = \"http://localhost/{URITemplate}/ParameterMapping?IsCaseSensitive={IsCaseSensitive}\";\r\n    final SerializationWriter writerMock = mock(SerializationWriter.class);\r\n    final SerializationWriterFactory factoryMock = mock(SerializationWriterFactory.class);\r\n    when(factoryMock.getSerializationWriter(anyString())).thenReturn(writerMock);\r\n    final RequestAdapter requestAdapterMock = mock(RequestAdapter.class);\r\n    when(requestAdapterMock.getSerializationWriterFactory()).thenReturn(factoryMock);\r\n    final MultipartBody multipartBody = new MultipartBody();\r\n    multipartBody.requestAdapter = requestAdapterMock;\r\n    requestInfo.setContentFromParsable(requestAdapterMock, \"multipart/form-data\", multipartBody);\r\n    assertNotNull(multipartBody.getBoundary());\r\n    assertFalse(multipartBody.getBoundary().isEmpty());\r\n    assertEquals(\"multipart/form-data; boundary=\" + multipartBody.getBoundary(), requestInfo.headers.get(\"Content-Type\").toArray()[0]);\r\n}",
            "shareableMockLines": {},
            "testMockLines": {
              "265": "final RequestAdapter requestAdapterMock = mock(RequestAdapter.class);",
              "266": "when(requestAdapterMock.getSerializationWriterFactory()).thenReturn(factoryMock);"
            },
            "abstractedStatement": {
              "266": "when(com.microsoft.kiota.RequestAdapter.getSerializationWriterFactory()).thenReturn(com.microsoft.kiota.serialization.SerializationWriterFactory)"
            },
            "rawStatementInfo": {
              "265": {
                "code": "final RequestAdapter requestAdapterMock = mock(RequestAdapter.class);",
                "line": 265,
                "type": "METHOD_MOCK_CREATION",
                "locate": "Test Case",
                "abstractedStatement": "",
                "isMockRelated": true,
                "isShareable": false,
                "locationContext": {
                  "methodName": "SetsBoundaryOnMultipartBody",
                  "methodAnnotations": [
                    "Test"
                  ],
                  "methodRawCode": "@Test\r\nvoid SetsBoundaryOnMultipartBody() {\r\n    final RequestInformation requestInfo = new RequestInformation();\r\n    requestInfo.httpMethod = HttpMethod.POST;\r\n    requestInfo.urlTemplate = \"http://localhost/{URITemplate}/ParameterMapping?IsCaseSensitive={IsCaseSensitive}\";\r\n    final SerializationWriter writerMock = mock(SerializationWriter.class);\r\n    final SerializationWriterFactory factoryMock = mock(SerializationWriterFactory.class);\r\n    when(factoryMock.getSerializationWriter(anyString())).thenReturn(writerMock);\r\n    final RequestAdapter requestAdapterMock = mock(RequestAdapter.class);\r\n    when(requestAdapterMock.getSerializationWriterFactory()).thenReturn(factoryMock);\r\n    final MultipartBody multipartBody = new MultipartBody();\r\n    multipartBody.requestAdapter = requestAdapterMock;\r\n    requestInfo.setContentFromParsable(requestAdapterMock, \"multipart/form-data\", multipartBody);\r\n    assertNotNull(multipartBody.getBoundary());\r\n    assertFalse(multipartBody.getBoundary().isEmpty());\r\n    assertEquals(\"multipart/form-data; boundary=\" + multipartBody.getBoundary(), requestInfo.headers.get(\"Content-Type\").toArray()[0]);\r\n}"
                }
              },
              "266": {
                "code": "when(requestAdapterMock.getSerializationWriterFactory()).thenReturn(factoryMock);",
                "line": 266,
                "type": "STUBBING",
                "locate": "Test Case",
                "abstractedStatement": "when(com.microsoft.kiota.RequestAdapter.getSerializationWriterFactory()).thenReturn(com.microsoft.kiota.serialization.SerializationWriterFactory)",
                "isMockRelated": true,
                "isShareable": false,
                "locationContext": {
                  "methodName": "SetsBoundaryOnMultipartBody",
                  "methodAnnotations": [
                    "Test"
                  ],
                  "methodRawCode": "@Test\r\nvoid SetsBoundaryOnMultipartBody() {\r\n    final RequestInformation requestInfo = new RequestInformation();\r\n    requestInfo.httpMethod = HttpMethod.POST;\r\n    requestInfo.urlTemplate = \"http://localhost/{URITemplate}/ParameterMapping?IsCaseSensitive={IsCaseSensitive}\";\r\n    final SerializationWriter writerMock = mock(SerializationWriter.class);\r\n    final SerializationWriterFactory factoryMock = mock(SerializationWriterFactory.class);\r\n    when(factoryMock.getSerializationWriter(anyString())).thenReturn(writerMock);\r\n    final RequestAdapter requestAdapterMock = mock(RequestAdapter.class);\r\n    when(requestAdapterMock.getSerializationWriterFactory()).thenReturn(factoryMock);\r\n    final MultipartBody multipartBody = new MultipartBody();\r\n    multipartBody.requestAdapter = requestAdapterMock;\r\n    requestInfo.setContentFromParsable(requestAdapterMock, \"multipart/form-data\", multipartBody);\r\n    assertNotNull(multipartBody.getBoundary());\r\n    assertFalse(multipartBody.getBoundary().isEmpty());\r\n    assertEquals(\"multipart/form-data; boundary=\" + multipartBody.getBoundary(), requestInfo.headers.get(\"Content-Type\").toArray()[0]);\r\n}"
                }
              }
            }
          }
        ]
      },
      {
        "mockedClass": "com.microsoft.kiota.RequestAdapter",
        "packageName": "com.microsoft.kiota",
        "testCaseCount": 3,
        "sequenceCount": 3,
        "sharedStatementLineCount": 0,
        "locReduced": 2,
        "mockObjectCount": 3,
        "sharedStatements": [],
        "sequences": [
          {
            "mockObjectId": 2,
            "mockRole": "mock",
            "variableName": "requestAdapter",
            "variableType": "RequestAdapter",
            "mockedClass": "com.microsoft.kiota.RequestAdapter",
            "packageName": "com.microsoft.kiota",
            "filePath": "C:\\Java_projects\\Microsoft\\kiota-java\\components\\abstractions\\src\\test\\java\\com\\microsoft\\kiota\\MultiPartBodyTest.java",
            "testMethodName": "requiresPartsForSerialization",
            "isReuseableMock": false,
            "overlapLines": [
              45
            ],
            "testMethodRawCode": "@Test\r\nvoid requiresPartsForSerialization() {\r\n    final MultipartBody multipartBody = new MultipartBody();\r\n    final SerializationWriter writer = mock(SerializationWriter.class);\r\n    final RequestAdapter requestAdapter = mock(RequestAdapter.class);\r\n    multipartBody.requestAdapter = requestAdapter;\r\n    assertThrows(IllegalStateException.class, () -> multipartBody.serialize(writer));\r\n}",
            "shareableMockLines": {},
            "testMockLines": {
              "45": "final RequestAdapter requestAdapter = mock(RequestAdapter.class);"
            },
            "abstractedStatement": {},
            "rawStatementInfo": {
              "45": {
                "code": "final RequestAdapter requestAdapter = mock(RequestAdapter.class);",
                "line": 45,
                "type": "METHOD_MOCK_CREATION",
                "locate": "Test Case",
                "abstractedStatement": "",
                "isMockRelated": true,
                "isShareable": false,
                "locationContext": {
                  "methodName": "requiresPartsForSerialization",
                  "methodAnnotations": [
                    "Test"
                  ],
                  "methodRawCode": "@Test\r\nvoid requiresPartsForSerialization() {\r\n    final MultipartBody multipartBody = new MultipartBody();\r\n    final SerializationWriter writer = mock(SerializationWriter.class);\r\n    final RequestAdapter requestAdapter = mock(RequestAdapter.class);\r\n    multipartBody.requestAdapter = requestAdapter;\r\n    assertThrows(IllegalStateException.class, () -> multipartBody.serialize(writer));\r\n}"
                }
              }
            }
          },
          {
            "mockObjectId": 3,
            "mockRole": "mock",
            "variableName": "requestAdapter",
            "variableType": "RequestAdapter",
            "mockedClass": "com.microsoft.kiota.RequestAdapter",
            "packageName": "com.microsoft.kiota",
            "filePath": "C:\\Java_projects\\Microsoft\\kiota-java\\components\\abstractions\\src\\test\\java\\com\\microsoft\\kiota\\MultiPartBodyTest.java",
            "testMethodName": "addsPart",
            "isReuseableMock": false,
            "overlapLines": [
              53
            ],
            "testMethodRawCode": "@Test\r\nvoid addsPart() {\r\n    final MultipartBody multipartBody = new MultipartBody();\r\n    final RequestAdapter requestAdapter = mock(RequestAdapter.class);\r\n    multipartBody.requestAdapter = requestAdapter;\r\n    multipartBody.addOrReplacePart(\"foo\", \"bar\", \"baz\");\r\n    final Object result = multipartBody.getPartValue(\"foo\");\r\n    assertNotNull(result);\r\n    assertTrue(result instanceof String);\r\n}",
            "shareableMockLines": {},
            "testMockLines": {
              "53": "final RequestAdapter requestAdapter = mock(RequestAdapter.class);"
            },
            "abstractedStatement": {},
            "rawStatementInfo": {
              "53": {
                "code": "final RequestAdapter requestAdapter = mock(RequestAdapter.class);",
                "line": 53,
                "type": "METHOD_MOCK_CREATION",
                "locate": "Test Case",
                "abstractedStatement": "",
                "isMockRelated": true,
                "isShareable": false,
                "locationContext": {
                  "methodName": "addsPart",
                  "methodAnnotations": [
                    "Test"
                  ],
                  "methodRawCode": "@Test\r\nvoid addsPart() {\r\n    final MultipartBody multipartBody = new MultipartBody();\r\n    final RequestAdapter requestAdapter = mock(RequestAdapter.class);\r\n    multipartBody.requestAdapter = requestAdapter;\r\n    multipartBody.addOrReplacePart(\"foo\", \"bar\", \"baz\");\r\n    final Object result = multipartBody.getPartValue(\"foo\");\r\n    assertNotNull(result);\r\n    assertTrue(result instanceof String);\r\n}"
                }
              }
            }
          },
          {
            "mockObjectId": 4,
            "mockRole": "mock",
            "variableName": "requestAdapter",
            "variableType": "RequestAdapter",
            "mockedClass": "com.microsoft.kiota.RequestAdapter",
            "packageName": "com.microsoft.kiota",
            "filePath": "C:\\Java_projects\\Microsoft\\kiota-java\\components\\abstractions\\src\\test\\java\\com\\microsoft\\kiota\\MultiPartBodyTest.java",
            "testMethodName": "removesPart",
            "isReuseableMock": false,
            "overlapLines": [
              64
            ],
            "testMethodRawCode": "@Test\r\nvoid removesPart() {\r\n    final MultipartBody multipartBody = new MultipartBody();\r\n    final RequestAdapter requestAdapter = mock(RequestAdapter.class);\r\n    multipartBody.requestAdapter = requestAdapter;\r\n    multipartBody.addOrReplacePart(\"foo\", \"bar\", \"baz\");\r\n    multipartBody.removePart(\"FOO\");\r\n    final Object result = multipartBody.getPartValue(\"foo\");\r\n    assertNull(result);\r\n}",
            "shareableMockLines": {},
            "testMockLines": {
              "64": "final RequestAdapter requestAdapter = mock(RequestAdapter.class);"
            },
            "abstractedStatement": {},
            "rawStatementInfo": {
              "64": {
                "code": "final RequestAdapter requestAdapter = mock(RequestAdapter.class);",
                "line": 64,
                "type": "METHOD_MOCK_CREATION",
                "locate": "Test Case",
                "abstractedStatement": "",
                "isMockRelated": true,
                "isShareable": false,
                "locationContext": {
                  "methodName": "removesPart",
                  "methodAnnotations": [
                    "Test"
                  ],
                  "methodRawCode": "@Test\r\nvoid removesPart() {\r\n    final MultipartBody multipartBody = new MultipartBody();\r\n    final RequestAdapter requestAdapter = mock(RequestAdapter.class);\r\n    multipartBody.requestAdapter = requestAdapter;\r\n    multipartBody.addOrReplacePart(\"foo\", \"bar\", \"baz\");\r\n    multipartBody.removePart(\"FOO\");\r\n    final Object result = multipartBody.getPartValue(\"foo\");\r\n    assertNull(result);\r\n}"
                }
              }
            }
          }
        ]
      }
    ],
    "com.microsoft.kiota.serialization.ParseNodeFactory": [
      {
        "mockedClass": "com.microsoft.kiota.serialization.ParseNodeFactory",
        "packageName": "com.microsoft.kiota.http",
        "testCaseCount": 2,
        "sequenceCount": 2,
        "sharedStatementLineCount": 2,
        "locReduced": 4,
        "mockObjectCount": 2,
        "sharedStatements": [
          "when(com.microsoft.kiota.serialization.ParseNodeFactory.getParseNode(any(String.class), any(InputStream.class))).thenReturn(com.microsoft.kiota.serialization.ParseNode)",
          "when(com.microsoft.kiota.serialization.ParseNodeFactory.getValidContentType()).thenReturn(java.lang.String)"
        ],
        "sequences": [
          {
            "mockObjectId": 45,
            "mockRole": "mock",
            "variableName": "mockFactory",
            "variableType": "var",
            "mockedClass": "com.microsoft.kiota.serialization.ParseNodeFactory",
            "packageName": "com.microsoft.kiota.http",
            "filePath": "C:\\Java_projects\\Microsoft\\kiota-java\\components\\http\\okHttp\\src\\test\\java\\com\\microsoft\\kiota\\http\\OkHttpRequestAdapterTest.java",
            "testMethodName": "sendReturnsObjectOnContent",
            "isReuseableMock": false,
            "overlapLines": [
              206,
              208
            ],
            "testMethodRawCode": "@ParameterizedTest\r\n@ValueSource(ints = { 200, 201, 202, 203 })\r\nvoid sendReturnsObjectOnContent(int statusCode) throws Exception {\r\n    final var authenticationProviderMock = mock(AuthenticationProvider.class);\r\n    authenticationProviderMock.authenticateRequest(any(RequestInformation.class), any(Map.class));\r\n    final var client = getMockClient(new Response.Builder().code(statusCode).message(\"OK\").protocol(Protocol.HTTP_1_1).request(new Request.Builder().url(\"http://localhost\").build()).body(ResponseBody.create(\"test\".getBytes(\"UTF-8\"), MediaType.parse(\"application/json\"))).build());\r\n    final var requestInformation = new RequestInformation() {\r\n\r\n        {\r\n            setUri(new URI(\"https://localhost\"));\r\n            httpMethod = HttpMethod.GET;\r\n        }\r\n    };\r\n    final var mockEntity = mock(Parsable.class);\r\n    when(mockEntity.getFieldDeserializers()).thenReturn(new HashMap<>());\r\n    final var mockParseNode = mock(ParseNode.class);\r\n    when(mockParseNode.getObjectValue(any(ParsableFactory.class))).thenReturn(mockEntity);\r\n    final var mockFactory = mock(ParseNodeFactory.class);\r\n    when(mockFactory.getParseNode(any(String.class), any(InputStream.class))).thenReturn(mockParseNode);\r\n    when(mockFactory.getValidContentType()).thenReturn(\"application/json\");\r\n    final var requestAdapter = new OkHttpRequestAdapter(authenticationProviderMock, mockFactory, null, client);\r\n    final var response = requestAdapter.send(requestInformation, null, (node) -> mockEntity);\r\n    assertNotNull(response);\r\n}",
            "shareableMockLines": {},
            "testMockLines": {
              "205": "final var mockFactory = mock(ParseNodeFactory.class);",
              "206": "when(mockFactory.getParseNode(any(String.class), any(InputStream.class))).thenReturn(mockParseNode);",
              "208": "when(mockFactory.getValidContentType()).thenReturn(\"application/json\");"
            },
            "abstractedStatement": {
              "206": "when(com.microsoft.kiota.serialization.ParseNodeFactory.getParseNode(any(String.class), any(InputStream.class))).thenReturn(com.microsoft.kiota.serialization.ParseNode)",
              "208": "when(com.microsoft.kiota.serialization.ParseNodeFactory.getValidContentType()).thenReturn(java.lang.String)"
            },
            "rawStatementInfo": {
              "205": {
                "code": "final var mockFactory = mock(ParseNodeFactory.class);",
                "line": 205,
                "type": "METHOD_MOCK_CREATION",
                "locate": "Test Case",
                "abstractedStatement": "",
                "isMockRelated": true,
                "isShareable": false,
                "locationContext": {
                  "methodName": "sendReturnsObjectOnContent",
                  "methodAnnotations": [
                    "ParameterizedTest",
                    "ValueSource"
                  ],
                  "methodRawCode": "@ParameterizedTest\r\n@ValueSource(ints = { 200, 201, 202, 203 })\r\nvoid sendReturnsObjectOnContent(int statusCode) throws Exception {\r\n    final var authenticationProviderMock = mock(AuthenticationProvider.class);\r\n    authenticationProviderMock.authenticateRequest(any(RequestInformation.class), any(Map.class));\r\n    final var client = getMockClient(new Response.Builder().code(statusCode).message(\"OK\").protocol(Protocol.HTTP_1_1).request(new Request.Builder().url(\"http://localhost\").build()).body(ResponseBody.create(\"test\".getBytes(\"UTF-8\"), MediaType.parse(\"application/json\"))).build());\r\n    final var requestInformation = new RequestInformation() {\r\n\r\n        {\r\n            setUri(new URI(\"https://localhost\"));\r\n            httpMethod = HttpMethod.GET;\r\n        }\r\n    };\r\n    final var mockEntity = mock(Parsable.class);\r\n    when(mockEntity.getFieldDeserializers()).thenReturn(new HashMap<>());\r\n    final var mockParseNode = mock(ParseNode.class);\r\n    when(mockParseNode.getObjectValue(any(ParsableFactory.class))).thenReturn(mockEntity);\r\n    final var mockFactory = mock(ParseNodeFactory.class);\r\n    when(mockFactory.getParseNode(any(String.class), any(InputStream.class))).thenReturn(mockParseNode);\r\n    when(mockFactory.getValidContentType()).thenReturn(\"application/json\");\r\n    final var requestAdapter = new OkHttpRequestAdapter(authenticationProviderMock, mockFactory, null, client);\r\n    final var response = requestAdapter.send(requestInformation, null, (node) -> mockEntity);\r\n    assertNotNull(response);\r\n}"
                }
              },
              "206": {
                "code": "when(mockFactory.getParseNode(any(String.class), any(InputStream.class))).thenReturn(mockParseNode);",
                "line": 206,
                "type": "STUBBING",
                "locate": "Test Case",
                "abstractedStatement": "when(com.microsoft.kiota.serialization.ParseNodeFactory.getParseNode(any(String.class), any(InputStream.class))).thenReturn(com.microsoft.kiota.serialization.ParseNode)",
                "isMockRelated": true,
                "isShareable": false,
                "locationContext": {
                  "methodName": "sendReturnsObjectOnContent",
                  "methodAnnotations": [
                    "ParameterizedTest",
                    "ValueSource"
                  ],
                  "methodRawCode": "@ParameterizedTest\r\n@ValueSource(ints = { 200, 201, 202, 203 })\r\nvoid sendReturnsObjectOnContent(int statusCode) throws Exception {\r\n    final var authenticationProviderMock = mock(AuthenticationProvider.class);\r\n    authenticationProviderMock.authenticateRequest(any(RequestInformation.class), any(Map.class));\r\n    final var client = getMockClient(new Response.Builder().code(statusCode).message(\"OK\").protocol(Protocol.HTTP_1_1).request(new Request.Builder().url(\"http://localhost\").build()).body(ResponseBody.create(\"test\".getBytes(\"UTF-8\"), MediaType.parse(\"application/json\"))).build());\r\n    final var requestInformation = new RequestInformation() {\r\n\r\n        {\r\n            setUri(new URI(\"https://localhost\"));\r\n            httpMethod = HttpMethod.GET;\r\n        }\r\n    };\r\n    final var mockEntity = mock(Parsable.class);\r\n    when(mockEntity.getFieldDeserializers()).thenReturn(new HashMap<>());\r\n    final var mockParseNode = mock(ParseNode.class);\r\n    when(mockParseNode.getObjectValue(any(ParsableFactory.class))).thenReturn(mockEntity);\r\n    final var mockFactory = mock(ParseNodeFactory.class);\r\n    when(mockFactory.getParseNode(any(String.class), any(InputStream.class))).thenReturn(mockParseNode);\r\n    when(mockFactory.getValidContentType()).thenReturn(\"application/json\");\r\n    final var requestAdapter = new OkHttpRequestAdapter(authenticationProviderMock, mockFactory, null, client);\r\n    final var response = requestAdapter.send(requestInformation, null, (node) -> mockEntity);\r\n    assertNotNull(response);\r\n}"
                }
              },
              "208": {
                "code": "when(mockFactory.getValidContentType()).thenReturn(\"application/json\");",
                "line": 208,
                "type": "STUBBING",
                "locate": "Test Case",
                "abstractedStatement": "when(com.microsoft.kiota.serialization.ParseNodeFactory.getValidContentType()).thenReturn(java.lang.String)",
                "isMockRelated": true,
                "isShareable": false,
                "locationContext": {
                  "methodName": "sendReturnsObjectOnContent",
                  "methodAnnotations": [
                    "ParameterizedTest",
                    "ValueSource"
                  ],
                  "methodRawCode": "@ParameterizedTest\r\n@ValueSource(ints = { 200, 201, 202, 203 })\r\nvoid sendReturnsObjectOnContent(int statusCode) throws Exception {\r\n    final var authenticationProviderMock = mock(AuthenticationProvider.class);\r\n    authenticationProviderMock.authenticateRequest(any(RequestInformation.class), any(Map.class));\r\n    final var client = getMockClient(new Response.Builder().code(statusCode).message(\"OK\").protocol(Protocol.HTTP_1_1).request(new Request.Builder().url(\"http://localhost\").build()).body(ResponseBody.create(\"test\".getBytes(\"UTF-8\"), MediaType.parse(\"application/json\"))).build());\r\n    final var requestInformation = new RequestInformation() {\r\n\r\n        {\r\n            setUri(new URI(\"https://localhost\"));\r\n            httpMethod = HttpMethod.GET;\r\n        }\r\n    };\r\n    final var mockEntity = mock(Parsable.class);\r\n    when(mockEntity.getFieldDeserializers()).thenReturn(new HashMap<>());\r\n    final var mockParseNode = mock(ParseNode.class);\r\n    when(mockParseNode.getObjectValue(any(ParsableFactory.class))).thenReturn(mockEntity);\r\n    final var mockFactory = mock(ParseNodeFactory.class);\r\n    when(mockFactory.getParseNode(any(String.class), any(InputStream.class))).thenReturn(mockParseNode);\r\n    when(mockFactory.getValidContentType()).thenReturn(\"application/json\");\r\n    final var requestAdapter = new OkHttpRequestAdapter(authenticationProviderMock, mockFactory, null, client);\r\n    final var response = requestAdapter.send(requestInformation, null, (node) -> mockEntity);\r\n    assertNotNull(response);\r\n}"
                }
              }
            }
          },
          {
            "mockObjectId": 50,
            "mockRole": "mock",
            "variableName": "mockFactory",
            "variableType": "var",
            "mockedClass": "com.microsoft.kiota.serialization.ParseNodeFactory",
            "packageName": "com.microsoft.kiota.http",
            "filePath": "C:\\Java_projects\\Microsoft\\kiota-java\\components\\http\\okHttp\\src\\test\\java\\com\\microsoft\\kiota\\http\\OkHttpRequestAdapterTest.java",
            "testMethodName": "throwsAPIException",
            "isReuseableMock": false,
            "overlapLines": [
              270,
              272
            ],
            "testMethodRawCode": "@SuppressWarnings(\"unchecked\")\r\n@ParameterizedTest\r\n@MethodSource(\"providesErrorMappings\")\r\nvoid throwsAPIException(int responseStatusCode, List<String> errorMappingCodes, boolean expectDeserializedException) throws Exception {\r\n    final var authenticationProviderMock = mock(AuthenticationProvider.class);\r\n    authenticationProviderMock.authenticateRequest(any(RequestInformation.class), any(Map.class));\r\n    final var client = getMockClient(new Response.Builder().code(responseStatusCode).message(\"Not Found\").protocol(Protocol.HTTP_1_1).request(new Request.Builder().url(\"http://localhost\").build()).body(ResponseBody.create(\"test\".getBytes(\"UTF-8\"), MediaType.parse(\"application/json\"))).header(\"request-id\", \"request-id-value\").build());\r\n    final var requestInformation = new RequestInformation() {\r\n\r\n        {\r\n            setUri(new URI(\"https://localhost\"));\r\n            httpMethod = HttpMethod.GET;\r\n        }\r\n    };\r\n    final var mockEntity = mock(Parsable.class);\r\n    when(mockEntity.getFieldDeserializers()).thenReturn(new HashMap<>());\r\n    final var mockParsableFactory = mock(ParsableFactory.class);\r\n    when(mockParsableFactory.create(any(ParseNode.class))).thenReturn(mockEntity);\r\n    final var mockParseNode = mock(ParseNode.class);\r\n    when(mockParseNode.getObjectValue(any(ParsableFactory.class))).thenReturn(mockEntity);\r\n    final var mockFactory = mock(ParseNodeFactory.class);\r\n    when(mockFactory.getParseNode(any(String.class), any(InputStream.class))).thenReturn(mockParseNode);\r\n    when(mockFactory.getValidContentType()).thenReturn(\"application/json\");\r\n    final var requestAdapter = new OkHttpRequestAdapter(authenticationProviderMock, mockFactory, null, client);\r\n    final var errorMappings = errorMappingCodes == null ? null : new HashMap<String, ParsableFactory<? extends Parsable>>();\r\n    if (errorMappings != null)\r\n        errorMappingCodes.forEach((mapping) -> errorMappings.put(mapping, mockParsableFactory));\r\n    final var exception = assertThrows(ApiException.class, () -> requestAdapter.send(requestInformation, errorMappings, (node) -> mockEntity));\r\n    assertNotNull(exception);\r\n    if (expectDeserializedException)\r\n        verify(mockParseNode, times(1)).getObjectValue(mockParsableFactory);\r\n    assertEquals(responseStatusCode, exception.getResponseStatusCode());\r\n    assertTrue(exception.getResponseHeaders().containsKey(\"request-id\"));\r\n}",
            "shareableMockLines": {},
            "testMockLines": {
              "269": "final var mockFactory = mock(ParseNodeFactory.class);",
              "270": "when(mockFactory.getParseNode(any(String.class), any(InputStream.class))).thenReturn(mockParseNode);",
              "272": "when(mockFactory.getValidContentType()).thenReturn(\"application/json\");"
            },
            "abstractedStatement": {
              "270": "when(com.microsoft.kiota.serialization.ParseNodeFactory.getParseNode(any(String.class), any(InputStream.class))).thenReturn(com.microsoft.kiota.serialization.ParseNode)",
              "272": "when(com.microsoft.kiota.serialization.ParseNodeFactory.getValidContentType()).thenReturn(java.lang.String)"
            },
            "rawStatementInfo": {
              "269": {
                "code": "final var mockFactory = mock(ParseNodeFactory.class);",
                "line": 269,
                "type": "METHOD_MOCK_CREATION",
                "locate": "Test Case",
                "abstractedStatement": "",
                "isMockRelated": true,
                "isShareable": false,
                "locationContext": {
                  "methodName": "throwsAPIException",
                  "methodAnnotations": [
                    "SuppressWarnings",
                    "ParameterizedTest",
                    "MethodSource"
                  ],
                  "methodRawCode": "@SuppressWarnings(\"unchecked\")\r\n@ParameterizedTest\r\n@MethodSource(\"providesErrorMappings\")\r\nvoid throwsAPIException(int responseStatusCode, List<String> errorMappingCodes, boolean expectDeserializedException) throws Exception {\r\n    final var authenticationProviderMock = mock(AuthenticationProvider.class);\r\n    authenticationProviderMock.authenticateRequest(any(RequestInformation.class), any(Map.class));\r\n    final var client = getMockClient(new Response.Builder().code(responseStatusCode).message(\"Not Found\").protocol(Protocol.HTTP_1_1).request(new Request.Builder().url(\"http://localhost\").build()).body(ResponseBody.create(\"test\".getBytes(\"UTF-8\"), MediaType.parse(\"application/json\"))).header(\"request-id\", \"request-id-value\").build());\r\n    final var requestInformation = new RequestInformation() {\r\n\r\n        {\r\n            setUri(new URI(\"https://localhost\"));\r\n            httpMethod = HttpMethod.GET;\r\n        }\r\n    };\r\n    final var mockEntity = mock(Parsable.class);\r\n    when(mockEntity.getFieldDeserializers()).thenReturn(new HashMap<>());\r\n    final var mockParsableFactory = mock(ParsableFactory.class);\r\n    when(mockParsableFactory.create(any(ParseNode.class))).thenReturn(mockEntity);\r\n    final var mockParseNode = mock(ParseNode.class);\r\n    when(mockParseNode.getObjectValue(any(ParsableFactory.class))).thenReturn(mockEntity);\r\n    final var mockFactory = mock(ParseNodeFactory.class);\r\n    when(mockFactory.getParseNode(any(String.class), any(InputStream.class))).thenReturn(mockParseNode);\r\n    when(mockFactory.getValidContentType()).thenReturn(\"application/json\");\r\n    final var requestAdapter = new OkHttpRequestAdapter(authenticationProviderMock, mockFactory, null, client);\r\n    final var errorMappings = errorMappingCodes == null ? null : new HashMap<String, ParsableFactory<? extends Parsable>>();\r\n    if (errorMappings != null)\r\n        errorMappingCodes.forEach((mapping) -> errorMappings.put(mapping, mockParsableFactory));\r\n    final var exception = assertThrows(ApiException.class, () -> requestAdapter.send(requestInformation, errorMappings, (node) -> mockEntity));\r\n    assertNotNull(exception);\r\n    if (expectDeserializedException)\r\n        verify(mockParseNode, times(1)).getObjectValue(mockParsableFactory);\r\n    assertEquals(responseStatusCode, exception.getResponseStatusCode());\r\n    assertTrue(exception.getResponseHeaders().containsKey(\"request-id\"));\r\n}"
                }
              },
              "270": {
                "code": "when(mockFactory.getParseNode(any(String.class), any(InputStream.class))).thenReturn(mockParseNode);",
                "line": 270,
                "type": "STUBBING",
                "locate": "Test Case",
                "abstractedStatement": "when(com.microsoft.kiota.serialization.ParseNodeFactory.getParseNode(any(String.class), any(InputStream.class))).thenReturn(com.microsoft.kiota.serialization.ParseNode)",
                "isMockRelated": true,
                "isShareable": false,
                "locationContext": {
                  "methodName": "throwsAPIException",
                  "methodAnnotations": [
                    "SuppressWarnings",
                    "ParameterizedTest",
                    "MethodSource"
                  ],
                  "methodRawCode": "@SuppressWarnings(\"unchecked\")\r\n@ParameterizedTest\r\n@MethodSource(\"providesErrorMappings\")\r\nvoid throwsAPIException(int responseStatusCode, List<String> errorMappingCodes, boolean expectDeserializedException) throws Exception {\r\n    final var authenticationProviderMock = mock(AuthenticationProvider.class);\r\n    authenticationProviderMock.authenticateRequest(any(RequestInformation.class), any(Map.class));\r\n    final var client = getMockClient(new Response.Builder().code(responseStatusCode).message(\"Not Found\").protocol(Protocol.HTTP_1_1).request(new Request.Builder().url(\"http://localhost\").build()).body(ResponseBody.create(\"test\".getBytes(\"UTF-8\"), MediaType.parse(\"application/json\"))).header(\"request-id\", \"request-id-value\").build());\r\n    final var requestInformation = new RequestInformation() {\r\n\r\n        {\r\n            setUri(new URI(\"https://localhost\"));\r\n            httpMethod = HttpMethod.GET;\r\n        }\r\n    };\r\n    final var mockEntity = mock(Parsable.class);\r\n    when(mockEntity.getFieldDeserializers()).thenReturn(new HashMap<>());\r\n    final var mockParsableFactory = mock(ParsableFactory.class);\r\n    when(mockParsableFactory.create(any(ParseNode.class))).thenReturn(mockEntity);\r\n    final var mockParseNode = mock(ParseNode.class);\r\n    when(mockParseNode.getObjectValue(any(ParsableFactory.class))).thenReturn(mockEntity);\r\n    final var mockFactory = mock(ParseNodeFactory.class);\r\n    when(mockFactory.getParseNode(any(String.class), any(InputStream.class))).thenReturn(mockParseNode);\r\n    when(mockFactory.getValidContentType()).thenReturn(\"application/json\");\r\n    final var requestAdapter = new OkHttpRequestAdapter(authenticationProviderMock, mockFactory, null, client);\r\n    final var errorMappings = errorMappingCodes == null ? null : new HashMap<String, ParsableFactory<? extends Parsable>>();\r\n    if (errorMappings != null)\r\n        errorMappingCodes.forEach((mapping) -> errorMappings.put(mapping, mockParsableFactory));\r\n    final var exception = assertThrows(ApiException.class, () -> requestAdapter.send(requestInformation, errorMappings, (node) -> mockEntity));\r\n    assertNotNull(exception);\r\n    if (expectDeserializedException)\r\n        verify(mockParseNode, times(1)).getObjectValue(mockParsableFactory);\r\n    assertEquals(responseStatusCode, exception.getResponseStatusCode());\r\n    assertTrue(exception.getResponseHeaders().containsKey(\"request-id\"));\r\n}"
                }
              },
              "272": {
                "code": "when(mockFactory.getValidContentType()).thenReturn(\"application/json\");",
                "line": 272,
                "type": "STUBBING",
                "locate": "Test Case",
                "abstractedStatement": "when(com.microsoft.kiota.serialization.ParseNodeFactory.getValidContentType()).thenReturn(java.lang.String)",
                "isMockRelated": true,
                "isShareable": false,
                "locationContext": {
                  "methodName": "throwsAPIException",
                  "methodAnnotations": [
                    "SuppressWarnings",
                    "ParameterizedTest",
                    "MethodSource"
                  ],
                  "methodRawCode": "@SuppressWarnings(\"unchecked\")\r\n@ParameterizedTest\r\n@MethodSource(\"providesErrorMappings\")\r\nvoid throwsAPIException(int responseStatusCode, List<String> errorMappingCodes, boolean expectDeserializedException) throws Exception {\r\n    final var authenticationProviderMock = mock(AuthenticationProvider.class);\r\n    authenticationProviderMock.authenticateRequest(any(RequestInformation.class), any(Map.class));\r\n    final var client = getMockClient(new Response.Builder().code(responseStatusCode).message(\"Not Found\").protocol(Protocol.HTTP_1_1).request(new Request.Builder().url(\"http://localhost\").build()).body(ResponseBody.create(\"test\".getBytes(\"UTF-8\"), MediaType.parse(\"application/json\"))).header(\"request-id\", \"request-id-value\").build());\r\n    final var requestInformation = new RequestInformation() {\r\n\r\n        {\r\n            setUri(new URI(\"https://localhost\"));\r\n            httpMethod = HttpMethod.GET;\r\n        }\r\n    };\r\n    final var mockEntity = mock(Parsable.class);\r\n    when(mockEntity.getFieldDeserializers()).thenReturn(new HashMap<>());\r\n    final var mockParsableFactory = mock(ParsableFactory.class);\r\n    when(mockParsableFactory.create(any(ParseNode.class))).thenReturn(mockEntity);\r\n    final var mockParseNode = mock(ParseNode.class);\r\n    when(mockParseNode.getObjectValue(any(ParsableFactory.class))).thenReturn(mockEntity);\r\n    final var mockFactory = mock(ParseNodeFactory.class);\r\n    when(mockFactory.getParseNode(any(String.class), any(InputStream.class))).thenReturn(mockParseNode);\r\n    when(mockFactory.getValidContentType()).thenReturn(\"application/json\");\r\n    final var requestAdapter = new OkHttpRequestAdapter(authenticationProviderMock, mockFactory, null, client);\r\n    final var errorMappings = errorMappingCodes == null ? null : new HashMap<String, ParsableFactory<? extends Parsable>>();\r\n    if (errorMappings != null)\r\n        errorMappingCodes.forEach((mapping) -> errorMappings.put(mapping, mockParsableFactory));\r\n    final var exception = assertThrows(ApiException.class, () -> requestAdapter.send(requestInformation, errorMappings, (node) -> mockEntity));\r\n    assertNotNull(exception);\r\n    if (expectDeserializedException)\r\n        verify(mockParseNode, times(1)).getObjectValue(mockParsableFactory);\r\n    assertEquals(responseStatusCode, exception.getResponseStatusCode());\r\n    assertTrue(exception.getResponseHeaders().containsKey(\"request-id\"));\r\n}"
                }
              }
            }
          }
        ]
      },
      {
        "mockedClass": "com.microsoft.kiota.serialization.ParseNodeFactory",
        "packageName": "com.microsoft.kiota.serialization",
        "testCaseCount": 3,
        "sequenceCount": 3,
        "sharedStatementLineCount": 1,
        "locReduced": 3,
        "mockObjectCount": 3,
        "sharedStatements": [
          "when(com.microsoft.kiota.serialization.ParseNodeFactory.getParseNode(any(), any())).thenReturn(com.microsoft.kiota.serialization.ParseNode)"
        ],
        "sequences": [
          {
            "mockObjectId": 23,
            "mockRole": "mock",
            "variableName": "mockParseNodeFactory",
            "variableType": "ParseNodeFactory",
            "mockedClass": "com.microsoft.kiota.serialization.ParseNodeFactory",
            "packageName": "com.microsoft.kiota.serialization",
            "filePath": "C:\\Java_projects\\Microsoft\\kiota-java\\components\\abstractions\\src\\test\\java\\com\\microsoft\\kiota\\serialization\\DeserializationHelpersTest.java",
            "testMethodName": "deserializesObjectWithoutReflection",
            "isReuseableMock": false,
            "overlapLines": [
              84
            ],
            "testMethodRawCode": "@Test\r\nvoid deserializesObjectWithoutReflection() throws IOException {\r\n    final String strValue = \"{'id':'123'}\";\r\n    final ParseNode mockParseNode = mock(ParseNode.class);\r\n    when(mockParseNode.getObjectValue(any())).thenReturn(new TestEntity() {\r\n\r\n        {\r\n            setId(\"123\");\r\n        }\r\n    });\r\n    final ParseNodeFactory mockParseNodeFactory = mock(ParseNodeFactory.class);\r\n    when(mockParseNodeFactory.getParseNode(any(), any())).thenReturn(mockParseNode);\r\n    ParseNodeFactoryRegistry.defaultInstance.contentTypeAssociatedFactories.put(_jsonContentType, mockParseNodeFactory);\r\n    final var result = KiotaSerialization.deserialize(_jsonContentType, strValue, TestEntity::createFromDiscriminatorValue);\r\n    assertEquals(\"123\", result.getId());\r\n}",
            "shareableMockLines": {},
            "testMockLines": {
              "83": "final ParseNodeFactory mockParseNodeFactory = mock(ParseNodeFactory.class);",
              "84": "when(mockParseNodeFactory.getParseNode(any(), any())).thenReturn(mockParseNode);",
              "85": "ParseNodeFactoryRegistry.defaultInstance.contentTypeAssociatedFactories.put(_jsonContentType, mockParseNodeFactory);"
            },
            "abstractedStatement": {
              "84": "when(com.microsoft.kiota.serialization.ParseNodeFactory.getParseNode(any(), any())).thenReturn(com.microsoft.kiota.serialization.ParseNode)"
            },
            "rawStatementInfo": {
              "83": {
                "code": "final ParseNodeFactory mockParseNodeFactory = mock(ParseNodeFactory.class);",
                "line": 83,
                "type": "METHOD_MOCK_CREATION",
                "locate": "Test Case",
                "abstractedStatement": "",
                "isMockRelated": true,
                "isShareable": false,
                "locationContext": {
                  "methodName": "deserializesObjectWithoutReflection",
                  "methodAnnotations": [
                    "Test"
                  ],
                  "methodRawCode": "@Test\r\nvoid deserializesObjectWithoutReflection() throws IOException {\r\n    final String strValue = \"{'id':'123'}\";\r\n    final ParseNode mockParseNode = mock(ParseNode.class);\r\n    when(mockParseNode.getObjectValue(any())).thenReturn(new TestEntity() {\r\n\r\n        {\r\n            setId(\"123\");\r\n        }\r\n    });\r\n    final ParseNodeFactory mockParseNodeFactory = mock(ParseNodeFactory.class);\r\n    when(mockParseNodeFactory.getParseNode(any(), any())).thenReturn(mockParseNode);\r\n    ParseNodeFactoryRegistry.defaultInstance.contentTypeAssociatedFactories.put(_jsonContentType, mockParseNodeFactory);\r\n    final var result = KiotaSerialization.deserialize(_jsonContentType, strValue, TestEntity::createFromDiscriminatorValue);\r\n    assertEquals(\"123\", result.getId());\r\n}"
                }
              },
              "84": {
                "code": "when(mockParseNodeFactory.getParseNode(any(), any())).thenReturn(mockParseNode);",
                "line": 84,
                "type": "STUBBING",
                "locate": "Test Case",
                "abstractedStatement": "when(com.microsoft.kiota.serialization.ParseNodeFactory.getParseNode(any(), any())).thenReturn(com.microsoft.kiota.serialization.ParseNode)",
                "isMockRelated": true,
                "isShareable": false,
                "locationContext": {
                  "methodName": "deserializesObjectWithoutReflection",
                  "methodAnnotations": [
                    "Test"
                  ],
                  "methodRawCode": "@Test\r\nvoid deserializesObjectWithoutReflection() throws IOException {\r\n    final String strValue = \"{'id':'123'}\";\r\n    final ParseNode mockParseNode = mock(ParseNode.class);\r\n    when(mockParseNode.getObjectValue(any())).thenReturn(new TestEntity() {\r\n\r\n        {\r\n            setId(\"123\");\r\n        }\r\n    });\r\n    final ParseNodeFactory mockParseNodeFactory = mock(ParseNodeFactory.class);\r\n    when(mockParseNodeFactory.getParseNode(any(), any())).thenReturn(mockParseNode);\r\n    ParseNodeFactoryRegistry.defaultInstance.contentTypeAssociatedFactories.put(_jsonContentType, mockParseNodeFactory);\r\n    final var result = KiotaSerialization.deserialize(_jsonContentType, strValue, TestEntity::createFromDiscriminatorValue);\r\n    assertEquals(\"123\", result.getId());\r\n}"
                }
              },
              "85": {
                "code": "ParseNodeFactoryRegistry.defaultInstance.contentTypeAssociatedFactories.put(_jsonContentType, mockParseNodeFactory);",
                "line": 85,
                "type": "REFERENCE",
                "locate": "Test Case",
                "abstractedStatement": "",
                "isMockRelated": false,
                "isShareable": false,
                "locationContext": {
                  "methodName": "deserializesObjectWithoutReflection",
                  "methodAnnotations": [
                    "Test"
                  ],
                  "methodRawCode": "@Test\r\nvoid deserializesObjectWithoutReflection() throws IOException {\r\n    final String strValue = \"{'id':'123'}\";\r\n    final ParseNode mockParseNode = mock(ParseNode.class);\r\n    when(mockParseNode.getObjectValue(any())).thenReturn(new TestEntity() {\r\n\r\n        {\r\n            setId(\"123\");\r\n        }\r\n    });\r\n    final ParseNodeFactory mockParseNodeFactory = mock(ParseNodeFactory.class);\r\n    when(mockParseNodeFactory.getParseNode(any(), any())).thenReturn(mockParseNode);\r\n    ParseNodeFactoryRegistry.defaultInstance.contentTypeAssociatedFactories.put(_jsonContentType, mockParseNodeFactory);\r\n    final var result = KiotaSerialization.deserialize(_jsonContentType, strValue, TestEntity::createFromDiscriminatorValue);\r\n    assertEquals(\"123\", result.getId());\r\n}"
                }
              }
            }
          },
          {
            "mockObjectId": 25,
            "mockRole": "mock",
            "variableName": "mockParseNodeFactory",
            "variableType": "ParseNodeFactory",
            "mockedClass": "com.microsoft.kiota.serialization.ParseNodeFactory",
            "packageName": "com.microsoft.kiota.serialization",
            "filePath": "C:\\Java_projects\\Microsoft\\kiota-java\\components\\abstractions\\src\\test\\java\\com\\microsoft\\kiota\\serialization\\DeserializationHelpersTest.java",
            "testMethodName": "deserializesObjectWithReflection",
            "isReuseableMock": false,
            "overlapLines": [
              106
            ],
            "testMethodRawCode": "@Test\r\nvoid deserializesObjectWithReflection() throws IOException {\r\n    final String strValue = \"{'id':'123'}\";\r\n    final ParseNode mockParseNode = mock(ParseNode.class);\r\n    when(mockParseNode.getObjectValue(any())).thenReturn(new TestEntity() {\r\n\r\n        {\r\n            setId(\"123\");\r\n        }\r\n    });\r\n    final ParseNodeFactory mockParseNodeFactory = mock(ParseNodeFactory.class);\r\n    when(mockParseNodeFactory.getParseNode(any(), any())).thenReturn(mockParseNode);\r\n    ParseNodeFactoryRegistry.defaultInstance.contentTypeAssociatedFactories.put(_jsonContentType, mockParseNodeFactory);\r\n    final var result = KiotaSerialization.deserialize(_jsonContentType, strValue, TestEntity::createFromDiscriminatorValue);\r\n    assertEquals(\"123\", result.getId());\r\n}",
            "shareableMockLines": {},
            "testMockLines": {
              "105": "final ParseNodeFactory mockParseNodeFactory = mock(ParseNodeFactory.class);",
              "106": "when(mockParseNodeFactory.getParseNode(any(), any())).thenReturn(mockParseNode);",
              "107": "ParseNodeFactoryRegistry.defaultInstance.contentTypeAssociatedFactories.put(_jsonContentType, mockParseNodeFactory);"
            },
            "abstractedStatement": {
              "106": "when(com.microsoft.kiota.serialization.ParseNodeFactory.getParseNode(any(), any())).thenReturn(com.microsoft.kiota.serialization.ParseNode)"
            },
            "rawStatementInfo": {
              "105": {
                "code": "final ParseNodeFactory mockParseNodeFactory = mock(ParseNodeFactory.class);",
                "line": 105,
                "type": "METHOD_MOCK_CREATION",
                "locate": "Test Case",
                "abstractedStatement": "",
                "isMockRelated": true,
                "isShareable": false,
                "locationContext": {
                  "methodName": "deserializesObjectWithReflection",
                  "methodAnnotations": [
                    "Test"
                  ],
                  "methodRawCode": "@Test\r\nvoid deserializesObjectWithReflection() throws IOException {\r\n    final String strValue = \"{'id':'123'}\";\r\n    final ParseNode mockParseNode = mock(ParseNode.class);\r\n    when(mockParseNode.getObjectValue(any())).thenReturn(new TestEntity() {\r\n\r\n        {\r\n            setId(\"123\");\r\n        }\r\n    });\r\n    final ParseNodeFactory mockParseNodeFactory = mock(ParseNodeFactory.class);\r\n    when(mockParseNodeFactory.getParseNode(any(), any())).thenReturn(mockParseNode);\r\n    ParseNodeFactoryRegistry.defaultInstance.contentTypeAssociatedFactories.put(_jsonContentType, mockParseNodeFactory);\r\n    final var result = KiotaSerialization.deserialize(_jsonContentType, strValue, TestEntity::createFromDiscriminatorValue);\r\n    assertEquals(\"123\", result.getId());\r\n}"
                }
              },
              "106": {
                "code": "when(mockParseNodeFactory.getParseNode(any(), any())).thenReturn(mockParseNode);",
                "line": 106,
                "type": "STUBBING",
                "locate": "Test Case",
                "abstractedStatement": "when(com.microsoft.kiota.serialization.ParseNodeFactory.getParseNode(any(), any())).thenReturn(com.microsoft.kiota.serialization.ParseNode)",
                "isMockRelated": true,
                "isShareable": false,
                "locationContext": {
                  "methodName": "deserializesObjectWithReflection",
                  "methodAnnotations": [
                    "Test"
                  ],
                  "methodRawCode": "@Test\r\nvoid deserializesObjectWithReflection() throws IOException {\r\n    final String strValue = \"{'id':'123'}\";\r\n    final ParseNode mockParseNode = mock(ParseNode.class);\r\n    when(mockParseNode.getObjectValue(any())).thenReturn(new TestEntity() {\r\n\r\n        {\r\n            setId(\"123\");\r\n        }\r\n    });\r\n    final ParseNodeFactory mockParseNodeFactory = mock(ParseNodeFactory.class);\r\n    when(mockParseNodeFactory.getParseNode(any(), any())).thenReturn(mockParseNode);\r\n    ParseNodeFactoryRegistry.defaultInstance.contentTypeAssociatedFactories.put(_jsonContentType, mockParseNodeFactory);\r\n    final var result = KiotaSerialization.deserialize(_jsonContentType, strValue, TestEntity::createFromDiscriminatorValue);\r\n    assertEquals(\"123\", result.getId());\r\n}"
                }
              },
              "107": {
                "code": "ParseNodeFactoryRegistry.defaultInstance.contentTypeAssociatedFactories.put(_jsonContentType, mockParseNodeFactory);",
                "line": 107,
                "type": "REFERENCE",
                "locate": "Test Case",
                "abstractedStatement": "",
                "isMockRelated": false,
                "isShareable": false,
                "locationContext": {
                  "methodName": "deserializesObjectWithReflection",
                  "methodAnnotations": [
                    "Test"
                  ],
                  "methodRawCode": "@Test\r\nvoid deserializesObjectWithReflection() throws IOException {\r\n    final String strValue = \"{'id':'123'}\";\r\n    final ParseNode mockParseNode = mock(ParseNode.class);\r\n    when(mockParseNode.getObjectValue(any())).thenReturn(new TestEntity() {\r\n\r\n        {\r\n            setId(\"123\");\r\n        }\r\n    });\r\n    final ParseNodeFactory mockParseNodeFactory = mock(ParseNodeFactory.class);\r\n    when(mockParseNodeFactory.getParseNode(any(), any())).thenReturn(mockParseNode);\r\n    ParseNodeFactoryRegistry.defaultInstance.contentTypeAssociatedFactories.put(_jsonContentType, mockParseNodeFactory);\r\n    final var result = KiotaSerialization.deserialize(_jsonContentType, strValue, TestEntity::createFromDiscriminatorValue);\r\n    assertEquals(\"123\", result.getId());\r\n}"
                }
              }
            }
          },
          {
            "mockObjectId": 27,
            "mockRole": "mock",
            "variableName": "mockParseNodeFactory",
            "variableType": "ParseNodeFactory",
            "mockedClass": "com.microsoft.kiota.serialization.ParseNodeFactory",
            "packageName": "com.microsoft.kiota.serialization",
            "filePath": "C:\\Java_projects\\Microsoft\\kiota-java\\components\\abstractions\\src\\test\\java\\com\\microsoft\\kiota\\serialization\\DeserializationHelpersTest.java",
            "testMethodName": "deserializesCollectionOfObjects",
            "isReuseableMock": false,
            "overlapLines": [
              133
            ],
            "testMethodRawCode": "@Test\r\nvoid deserializesCollectionOfObjects() throws IOException {\r\n    final String strValue = \"{'id':'123'}\";\r\n    final ParseNode mockParseNode = mock(ParseNode.class);\r\n    when(mockParseNode.getCollectionOfObjectValues(any())).thenReturn(new ArrayList<Parsable>() {\r\n\r\n        {\r\n            add(new TestEntity() {\r\n\r\n                {\r\n                    setId(\"123\");\r\n                }\r\n            });\r\n        }\r\n    });\r\n    final ParseNodeFactory mockParseNodeFactory = mock(ParseNodeFactory.class);\r\n    when(mockParseNodeFactory.getParseNode(any(), any())).thenReturn(mockParseNode);\r\n    ParseNodeFactoryRegistry.defaultInstance.contentTypeAssociatedFactories.put(_jsonContentType, mockParseNodeFactory);\r\n    final var result = KiotaSerialization.deserializeCollection(_jsonContentType, strValue, TestEntity::createFromDiscriminatorValue);\r\n    assertEquals(\"123\", result.get(0).getId());\r\n}",
            "shareableMockLines": {},
            "testMockLines": {
              "132": "final ParseNodeFactory mockParseNodeFactory = mock(ParseNodeFactory.class);",
              "133": "when(mockParseNodeFactory.getParseNode(any(), any())).thenReturn(mockParseNode);",
              "134": "ParseNodeFactoryRegistry.defaultInstance.contentTypeAssociatedFactories.put(_jsonContentType, mockParseNodeFactory);"
            },
            "abstractedStatement": {
              "133": "when(com.microsoft.kiota.serialization.ParseNodeFactory.getParseNode(any(), any())).thenReturn(com.microsoft.kiota.serialization.ParseNode)"
            },
            "rawStatementInfo": {
              "132": {
                "code": "final ParseNodeFactory mockParseNodeFactory = mock(ParseNodeFactory.class);",
                "line": 132,
                "type": "METHOD_MOCK_CREATION",
                "locate": "Test Case",
                "abstractedStatement": "",
                "isMockRelated": true,
                "isShareable": false,
                "locationContext": {
                  "methodName": "deserializesCollectionOfObjects",
                  "methodAnnotations": [
                    "Test"
                  ],
                  "methodRawCode": "@Test\r\nvoid deserializesCollectionOfObjects() throws IOException {\r\n    final String strValue = \"{'id':'123'}\";\r\n    final ParseNode mockParseNode = mock(ParseNode.class);\r\n    when(mockParseNode.getCollectionOfObjectValues(any())).thenReturn(new ArrayList<Parsable>() {\r\n\r\n        {\r\n            add(new TestEntity() {\r\n\r\n                {\r\n                    setId(\"123\");\r\n                }\r\n            });\r\n        }\r\n    });\r\n    final ParseNodeFactory mockParseNodeFactory = mock(ParseNodeFactory.class);\r\n    when(mockParseNodeFactory.getParseNode(any(), any())).thenReturn(mockParseNode);\r\n    ParseNodeFactoryRegistry.defaultInstance.contentTypeAssociatedFactories.put(_jsonContentType, mockParseNodeFactory);\r\n    final var result = KiotaSerialization.deserializeCollection(_jsonContentType, strValue, TestEntity::createFromDiscriminatorValue);\r\n    assertEquals(\"123\", result.get(0).getId());\r\n}"
                }
              },
              "133": {
                "code": "when(mockParseNodeFactory.getParseNode(any(), any())).thenReturn(mockParseNode);",
                "line": 133,
                "type": "STUBBING",
                "locate": "Test Case",
                "abstractedStatement": "when(com.microsoft.kiota.serialization.ParseNodeFactory.getParseNode(any(), any())).thenReturn(com.microsoft.kiota.serialization.ParseNode)",
                "isMockRelated": true,
                "isShareable": false,
                "locationContext": {
                  "methodName": "deserializesCollectionOfObjects",
                  "methodAnnotations": [
                    "Test"
                  ],
                  "methodRawCode": "@Test\r\nvoid deserializesCollectionOfObjects() throws IOException {\r\n    final String strValue = \"{'id':'123'}\";\r\n    final ParseNode mockParseNode = mock(ParseNode.class);\r\n    when(mockParseNode.getCollectionOfObjectValues(any())).thenReturn(new ArrayList<Parsable>() {\r\n\r\n        {\r\n            add(new TestEntity() {\r\n\r\n                {\r\n                    setId(\"123\");\r\n                }\r\n            });\r\n        }\r\n    });\r\n    final ParseNodeFactory mockParseNodeFactory = mock(ParseNodeFactory.class);\r\n    when(mockParseNodeFactory.getParseNode(any(), any())).thenReturn(mockParseNode);\r\n    ParseNodeFactoryRegistry.defaultInstance.contentTypeAssociatedFactories.put(_jsonContentType, mockParseNodeFactory);\r\n    final var result = KiotaSerialization.deserializeCollection(_jsonContentType, strValue, TestEntity::createFromDiscriminatorValue);\r\n    assertEquals(\"123\", result.get(0).getId());\r\n}"
                }
              },
              "134": {
                "code": "ParseNodeFactoryRegistry.defaultInstance.contentTypeAssociatedFactories.put(_jsonContentType, mockParseNodeFactory);",
                "line": 134,
                "type": "REFERENCE",
                "locate": "Test Case",
                "abstractedStatement": "",
                "isMockRelated": false,
                "isShareable": false,
                "locationContext": {
                  "methodName": "deserializesCollectionOfObjects",
                  "methodAnnotations": [
                    "Test"
                  ],
                  "methodRawCode": "@Test\r\nvoid deserializesCollectionOfObjects() throws IOException {\r\n    final String strValue = \"{'id':'123'}\";\r\n    final ParseNode mockParseNode = mock(ParseNode.class);\r\n    when(mockParseNode.getCollectionOfObjectValues(any())).thenReturn(new ArrayList<Parsable>() {\r\n\r\n        {\r\n            add(new TestEntity() {\r\n\r\n                {\r\n                    setId(\"123\");\r\n                }\r\n            });\r\n        }\r\n    });\r\n    final ParseNodeFactory mockParseNodeFactory = mock(ParseNodeFactory.class);\r\n    when(mockParseNodeFactory.getParseNode(any(), any())).thenReturn(mockParseNode);\r\n    ParseNodeFactoryRegistry.defaultInstance.contentTypeAssociatedFactories.put(_jsonContentType, mockParseNodeFactory);\r\n    final var result = KiotaSerialization.deserializeCollection(_jsonContentType, strValue, TestEntity::createFromDiscriminatorValue);\r\n    assertEquals(\"123\", result.get(0).getId());\r\n}"
                }
              }
            }
          }
        ]
      }
    ],
    "com.microsoft.kiota.serialization.ParseNode": [
      {
        "mockedClass": "com.microsoft.kiota.serialization.ParseNode",
        "packageName": "com.microsoft.kiota.serialization",
        "testCaseCount": 2,
        "sequenceCount": 2,
        "sharedStatementLineCount": 1,
        "locReduced": 2,
        "mockObjectCount": 2,
        "sharedStatements": [
          "when(com.microsoft.kiota.serialization.ParseNode.getObjectValue(any())).thenReturn(new TestEntity() {\r\n\r\n    {\r\n        setId(\"123\");\r\n    }\r\n})"
        ],
        "sequences": [
          {
            "mockObjectId": 22,
            "mockRole": "mock",
            "variableName": "mockParseNode",
            "variableType": "ParseNode",
            "mockedClass": "com.microsoft.kiota.serialization.ParseNode",
            "packageName": "com.microsoft.kiota.serialization",
            "filePath": "C:\\Java_projects\\Microsoft\\kiota-java\\components\\abstractions\\src\\test\\java\\com\\microsoft\\kiota\\serialization\\DeserializationHelpersTest.java",
            "testMethodName": "deserializesObjectWithoutReflection",
            "isReuseableMock": false,
            "overlapLines": [
              76
            ],
            "testMethodRawCode": "@Test\r\nvoid deserializesObjectWithoutReflection() throws IOException {\r\n    final String strValue = \"{'id':'123'}\";\r\n    final ParseNode mockParseNode = mock(ParseNode.class);\r\n    when(mockParseNode.getObjectValue(any())).thenReturn(new TestEntity() {\r\n\r\n        {\r\n            setId(\"123\");\r\n        }\r\n    });\r\n    final ParseNodeFactory mockParseNodeFactory = mock(ParseNodeFactory.class);\r\n    when(mockParseNodeFactory.getParseNode(any(), any())).thenReturn(mockParseNode);\r\n    ParseNodeFactoryRegistry.defaultInstance.contentTypeAssociatedFactories.put(_jsonContentType, mockParseNodeFactory);\r\n    final var result = KiotaSerialization.deserialize(_jsonContentType, strValue, TestEntity::createFromDiscriminatorValue);\r\n    assertEquals(\"123\", result.getId());\r\n}",
            "shareableMockLines": {},
            "testMockLines": {
              "75": "final ParseNode mockParseNode = mock(ParseNode.class);",
              "76": "when(mockParseNode.getObjectValue(any())).thenReturn(new TestEntity() {\r\n\r\n    {\r\n        setId(\"123\");\r\n    }\r\n});"
            },
            "abstractedStatement": {
              "76": "when(com.microsoft.kiota.serialization.ParseNode.getObjectValue(any())).thenReturn(new TestEntity() {\r\n\r\n    {\r\n        setId(\"123\");\r\n    }\r\n})"
            },
            "rawStatementInfo": {
              "75": {
                "code": "final ParseNode mockParseNode = mock(ParseNode.class);",
                "line": 75,
                "type": "METHOD_MOCK_CREATION",
                "locate": "Test Case",
                "abstractedStatement": "",
                "isMockRelated": true,
                "isShareable": false,
                "locationContext": {
                  "methodName": "deserializesObjectWithoutReflection",
                  "methodAnnotations": [
                    "Test"
                  ],
                  "methodRawCode": "@Test\r\nvoid deserializesObjectWithoutReflection() throws IOException {\r\n    final String strValue = \"{'id':'123'}\";\r\n    final ParseNode mockParseNode = mock(ParseNode.class);\r\n    when(mockParseNode.getObjectValue(any())).thenReturn(new TestEntity() {\r\n\r\n        {\r\n            setId(\"123\");\r\n        }\r\n    });\r\n    final ParseNodeFactory mockParseNodeFactory = mock(ParseNodeFactory.class);\r\n    when(mockParseNodeFactory.getParseNode(any(), any())).thenReturn(mockParseNode);\r\n    ParseNodeFactoryRegistry.defaultInstance.contentTypeAssociatedFactories.put(_jsonContentType, mockParseNodeFactory);\r\n    final var result = KiotaSerialization.deserialize(_jsonContentType, strValue, TestEntity::createFromDiscriminatorValue);\r\n    assertEquals(\"123\", result.getId());\r\n}"
                }
              },
              "76": {
                "code": "when(mockParseNode.getObjectValue(any())).thenReturn(new TestEntity() {\r\n\r\n    {\r\n        setId(\"123\");\r\n    }\r\n});",
                "line": 76,
                "type": "STUBBING",
                "locate": "Test Case",
                "abstractedStatement": "when(com.microsoft.kiota.serialization.ParseNode.getObjectValue(any())).thenReturn(new TestEntity() {\r\n\r\n    {\r\n        setId(\"123\");\r\n    }\r\n})",
                "isMockRelated": true,
                "isShareable": false,
                "locationContext": {
                  "methodName": "deserializesObjectWithoutReflection",
                  "methodAnnotations": [
                    "Test"
                  ],
                  "methodRawCode": "@Test\r\nvoid deserializesObjectWithoutReflection() throws IOException {\r\n    final String strValue = \"{'id':'123'}\";\r\n    final ParseNode mockParseNode = mock(ParseNode.class);\r\n    when(mockParseNode.getObjectValue(any())).thenReturn(new TestEntity() {\r\n\r\n        {\r\n            setId(\"123\");\r\n        }\r\n    });\r\n    final ParseNodeFactory mockParseNodeFactory = mock(ParseNodeFactory.class);\r\n    when(mockParseNodeFactory.getParseNode(any(), any())).thenReturn(mockParseNode);\r\n    ParseNodeFactoryRegistry.defaultInstance.contentTypeAssociatedFactories.put(_jsonContentType, mockParseNodeFactory);\r\n    final var result = KiotaSerialization.deserialize(_jsonContentType, strValue, TestEntity::createFromDiscriminatorValue);\r\n    assertEquals(\"123\", result.getId());\r\n}"
                }
              }
            }
          },
          {
            "mockObjectId": 24,
            "mockRole": "mock",
            "variableName": "mockParseNode",
            "variableType": "ParseNode",
            "mockedClass": "com.microsoft.kiota.serialization.ParseNode",
            "packageName": "com.microsoft.kiota.serialization",
            "filePath": "C:\\Java_projects\\Microsoft\\kiota-java\\components\\abstractions\\src\\test\\java\\com\\microsoft\\kiota\\serialization\\DeserializationHelpersTest.java",
            "testMethodName": "deserializesObjectWithReflection",
            "isReuseableMock": false,
            "overlapLines": [
              98
            ],
            "testMethodRawCode": "@Test\r\nvoid deserializesObjectWithReflection() throws IOException {\r\n    final String strValue = \"{'id':'123'}\";\r\n    final ParseNode mockParseNode = mock(ParseNode.class);\r\n    when(mockParseNode.getObjectValue(any())).thenReturn(new TestEntity() {\r\n\r\n        {\r\n            setId(\"123\");\r\n        }\r\n    });\r\n    final ParseNodeFactory mockParseNodeFactory = mock(ParseNodeFactory.class);\r\n    when(mockParseNodeFactory.getParseNode(any(), any())).thenReturn(mockParseNode);\r\n    ParseNodeFactoryRegistry.defaultInstance.contentTypeAssociatedFactories.put(_jsonContentType, mockParseNodeFactory);\r\n    final var result = KiotaSerialization.deserialize(_jsonContentType, strValue, TestEntity::createFromDiscriminatorValue);\r\n    assertEquals(\"123\", result.getId());\r\n}",
            "shareableMockLines": {},
            "testMockLines": {
              "97": "final ParseNode mockParseNode = mock(ParseNode.class);",
              "98": "when(mockParseNode.getObjectValue(any())).thenReturn(new TestEntity() {\r\n\r\n    {\r\n        setId(\"123\");\r\n    }\r\n});"
            },
            "abstractedStatement": {
              "98": "when(com.microsoft.kiota.serialization.ParseNode.getObjectValue(any())).thenReturn(new TestEntity() {\r\n\r\n    {\r\n        setId(\"123\");\r\n    }\r\n})"
            },
            "rawStatementInfo": {
              "97": {
                "code": "final ParseNode mockParseNode = mock(ParseNode.class);",
                "line": 97,
                "type": "METHOD_MOCK_CREATION",
                "locate": "Test Case",
                "abstractedStatement": "",
                "isMockRelated": true,
                "isShareable": false,
                "locationContext": {
                  "methodName": "deserializesObjectWithReflection",
                  "methodAnnotations": [
                    "Test"
                  ],
                  "methodRawCode": "@Test\r\nvoid deserializesObjectWithReflection() throws IOException {\r\n    final String strValue = \"{'id':'123'}\";\r\n    final ParseNode mockParseNode = mock(ParseNode.class);\r\n    when(mockParseNode.getObjectValue(any())).thenReturn(new TestEntity() {\r\n\r\n        {\r\n            setId(\"123\");\r\n        }\r\n    });\r\n    final ParseNodeFactory mockParseNodeFactory = mock(ParseNodeFactory.class);\r\n    when(mockParseNodeFactory.getParseNode(any(), any())).thenReturn(mockParseNode);\r\n    ParseNodeFactoryRegistry.defaultInstance.contentTypeAssociatedFactories.put(_jsonContentType, mockParseNodeFactory);\r\n    final var result = KiotaSerialization.deserialize(_jsonContentType, strValue, TestEntity::createFromDiscriminatorValue);\r\n    assertEquals(\"123\", result.getId());\r\n}"
                }
              },
              "98": {
                "code": "when(mockParseNode.getObjectValue(any())).thenReturn(new TestEntity() {\r\n\r\n    {\r\n        setId(\"123\");\r\n    }\r\n});",
                "line": 98,
                "type": "STUBBING",
                "locate": "Test Case",
                "abstractedStatement": "when(com.microsoft.kiota.serialization.ParseNode.getObjectValue(any())).thenReturn(new TestEntity() {\r\n\r\n    {\r\n        setId(\"123\");\r\n    }\r\n})",
                "isMockRelated": true,
                "isShareable": false,
                "locationContext": {
                  "methodName": "deserializesObjectWithReflection",
                  "methodAnnotations": [
                    "Test"
                  ],
                  "methodRawCode": "@Test\r\nvoid deserializesObjectWithReflection() throws IOException {\r\n    final String strValue = \"{'id':'123'}\";\r\n    final ParseNode mockParseNode = mock(ParseNode.class);\r\n    when(mockParseNode.getObjectValue(any())).thenReturn(new TestEntity() {\r\n\r\n        {\r\n            setId(\"123\");\r\n        }\r\n    });\r\n    final ParseNodeFactory mockParseNodeFactory = mock(ParseNodeFactory.class);\r\n    when(mockParseNodeFactory.getParseNode(any(), any())).thenReturn(mockParseNode);\r\n    ParseNodeFactoryRegistry.defaultInstance.contentTypeAssociatedFactories.put(_jsonContentType, mockParseNodeFactory);\r\n    final var result = KiotaSerialization.deserialize(_jsonContentType, strValue, TestEntity::createFromDiscriminatorValue);\r\n    assertEquals(\"123\", result.getId());\r\n}"
                }
              }
            }
          }
        ]
      },
      {
        "mockedClass": "com.microsoft.kiota.serialization.ParseNode",
        "packageName": "com.microsoft.kiota.http",
        "testCaseCount": 2,
        "sequenceCount": 2,
        "sharedStatementLineCount": 1,
        "locReduced": 2,
        "mockObjectCount": 2,
        "sharedStatements": [
          "when(com.microsoft.kiota.serialization.ParseNode.getObjectValue(any(ParsableFactory.class))).thenReturn(com.microsoft.kiota.serialization.Parsable)"
        ],
        "sequences": [
          {
            "mockObjectId": 44,
            "mockRole": "mock",
            "variableName": "mockParseNode",
            "variableType": "var",
            "mockedClass": "com.microsoft.kiota.serialization.ParseNode",
            "packageName": "com.microsoft.kiota.http",
            "filePath": "C:\\Java_projects\\Microsoft\\kiota-java\\components\\http\\okHttp\\src\\test\\java\\com\\microsoft\\kiota\\http\\OkHttpRequestAdapterTest.java",
            "testMethodName": "sendReturnsObjectOnContent",
            "isReuseableMock": false,
            "overlapLines": [
              204
            ],
            "testMethodRawCode": "@ParameterizedTest\r\n@ValueSource(ints = { 200, 201, 202, 203 })\r\nvoid sendReturnsObjectOnContent(int statusCode) throws Exception {\r\n    final var authenticationProviderMock = mock(AuthenticationProvider.class);\r\n    authenticationProviderMock.authenticateRequest(any(RequestInformation.class), any(Map.class));\r\n    final var client = getMockClient(new Response.Builder().code(statusCode).message(\"OK\").protocol(Protocol.HTTP_1_1).request(new Request.Builder().url(\"http://localhost\").build()).body(ResponseBody.create(\"test\".getBytes(\"UTF-8\"), MediaType.parse(\"application/json\"))).build());\r\n    final var requestInformation = new RequestInformation() {\r\n\r\n        {\r\n            setUri(new URI(\"https://localhost\"));\r\n            httpMethod = HttpMethod.GET;\r\n        }\r\n    };\r\n    final var mockEntity = mock(Parsable.class);\r\n    when(mockEntity.getFieldDeserializers()).thenReturn(new HashMap<>());\r\n    final var mockParseNode = mock(ParseNode.class);\r\n    when(mockParseNode.getObjectValue(any(ParsableFactory.class))).thenReturn(mockEntity);\r\n    final var mockFactory = mock(ParseNodeFactory.class);\r\n    when(mockFactory.getParseNode(any(String.class), any(InputStream.class))).thenReturn(mockParseNode);\r\n    when(mockFactory.getValidContentType()).thenReturn(\"application/json\");\r\n    final var requestAdapter = new OkHttpRequestAdapter(authenticationProviderMock, mockFactory, null, client);\r\n    final var response = requestAdapter.send(requestInformation, null, (node) -> mockEntity);\r\n    assertNotNull(response);\r\n}",
            "shareableMockLines": {},
            "testMockLines": {
              "203": "final var mockParseNode = mock(ParseNode.class);",
              "204": "when(mockParseNode.getObjectValue(any(ParsableFactory.class))).thenReturn(mockEntity);"
            },
            "abstractedStatement": {
              "204": "when(com.microsoft.kiota.serialization.ParseNode.getObjectValue(any(ParsableFactory.class))).thenReturn(com.microsoft.kiota.serialization.Parsable)"
            },
            "rawStatementInfo": {
              "203": {
                "code": "final var mockParseNode = mock(ParseNode.class);",
                "line": 203,
                "type": "METHOD_MOCK_CREATION",
                "locate": "Test Case",
                "abstractedStatement": "",
                "isMockRelated": true,
                "isShareable": false,
                "locationContext": {
                  "methodName": "sendReturnsObjectOnContent",
                  "methodAnnotations": [
                    "ParameterizedTest",
                    "ValueSource"
                  ],
                  "methodRawCode": "@ParameterizedTest\r\n@ValueSource(ints = { 200, 201, 202, 203 })\r\nvoid sendReturnsObjectOnContent(int statusCode) throws Exception {\r\n    final var authenticationProviderMock = mock(AuthenticationProvider.class);\r\n    authenticationProviderMock.authenticateRequest(any(RequestInformation.class), any(Map.class));\r\n    final var client = getMockClient(new Response.Builder().code(statusCode).message(\"OK\").protocol(Protocol.HTTP_1_1).request(new Request.Builder().url(\"http://localhost\").build()).body(ResponseBody.create(\"test\".getBytes(\"UTF-8\"), MediaType.parse(\"application/json\"))).build());\r\n    final var requestInformation = new RequestInformation() {\r\n\r\n        {\r\n            setUri(new URI(\"https://localhost\"));\r\n            httpMethod = HttpMethod.GET;\r\n        }\r\n    };\r\n    final var mockEntity = mock(Parsable.class);\r\n    when(mockEntity.getFieldDeserializers()).thenReturn(new HashMap<>());\r\n    final var mockParseNode = mock(ParseNode.class);\r\n    when(mockParseNode.getObjectValue(any(ParsableFactory.class))).thenReturn(mockEntity);\r\n    final var mockFactory = mock(ParseNodeFactory.class);\r\n    when(mockFactory.getParseNode(any(String.class), any(InputStream.class))).thenReturn(mockParseNode);\r\n    when(mockFactory.getValidContentType()).thenReturn(\"application/json\");\r\n    final var requestAdapter = new OkHttpRequestAdapter(authenticationProviderMock, mockFactory, null, client);\r\n    final var response = requestAdapter.send(requestInformation, null, (node) -> mockEntity);\r\n    assertNotNull(response);\r\n}"
                }
              },
              "204": {
                "code": "when(mockParseNode.getObjectValue(any(ParsableFactory.class))).thenReturn(mockEntity);",
                "line": 204,
                "type": "STUBBING",
                "locate": "Test Case",
                "abstractedStatement": "when(com.microsoft.kiota.serialization.ParseNode.getObjectValue(any(ParsableFactory.class))).thenReturn(com.microsoft.kiota.serialization.Parsable)",
                "isMockRelated": true,
                "isShareable": false,
                "locationContext": {
                  "methodName": "sendReturnsObjectOnContent",
                  "methodAnnotations": [
                    "ParameterizedTest",
                    "ValueSource"
                  ],
                  "methodRawCode": "@ParameterizedTest\r\n@ValueSource(ints = { 200, 201, 202, 203 })\r\nvoid sendReturnsObjectOnContent(int statusCode) throws Exception {\r\n    final var authenticationProviderMock = mock(AuthenticationProvider.class);\r\n    authenticationProviderMock.authenticateRequest(any(RequestInformation.class), any(Map.class));\r\n    final var client = getMockClient(new Response.Builder().code(statusCode).message(\"OK\").protocol(Protocol.HTTP_1_1).request(new Request.Builder().url(\"http://localhost\").build()).body(ResponseBody.create(\"test\".getBytes(\"UTF-8\"), MediaType.parse(\"application/json\"))).build());\r\n    final var requestInformation = new RequestInformation() {\r\n\r\n        {\r\n            setUri(new URI(\"https://localhost\"));\r\n            httpMethod = HttpMethod.GET;\r\n        }\r\n    };\r\n    final var mockEntity = mock(Parsable.class);\r\n    when(mockEntity.getFieldDeserializers()).thenReturn(new HashMap<>());\r\n    final var mockParseNode = mock(ParseNode.class);\r\n    when(mockParseNode.getObjectValue(any(ParsableFactory.class))).thenReturn(mockEntity);\r\n    final var mockFactory = mock(ParseNodeFactory.class);\r\n    when(mockFactory.getParseNode(any(String.class), any(InputStream.class))).thenReturn(mockParseNode);\r\n    when(mockFactory.getValidContentType()).thenReturn(\"application/json\");\r\n    final var requestAdapter = new OkHttpRequestAdapter(authenticationProviderMock, mockFactory, null, client);\r\n    final var response = requestAdapter.send(requestInformation, null, (node) -> mockEntity);\r\n    assertNotNull(response);\r\n}"
                }
              }
            }
          },
          {
            "mockObjectId": 49,
            "mockRole": "mock",
            "variableName": "mockParseNode",
            "variableType": "var",
            "mockedClass": "com.microsoft.kiota.serialization.ParseNode",
            "packageName": "com.microsoft.kiota.http",
            "filePath": "C:\\Java_projects\\Microsoft\\kiota-java\\components\\http\\okHttp\\src\\test\\java\\com\\microsoft\\kiota\\http\\OkHttpRequestAdapterTest.java",
            "testMethodName": "throwsAPIException",
            "isReuseableMock": false,
            "overlapLines": [
              268
            ],
            "testMethodRawCode": "@SuppressWarnings(\"unchecked\")\r\n@ParameterizedTest\r\n@MethodSource(\"providesErrorMappings\")\r\nvoid throwsAPIException(int responseStatusCode, List<String> errorMappingCodes, boolean expectDeserializedException) throws Exception {\r\n    final var authenticationProviderMock = mock(AuthenticationProvider.class);\r\n    authenticationProviderMock.authenticateRequest(any(RequestInformation.class), any(Map.class));\r\n    final var client = getMockClient(new Response.Builder().code(responseStatusCode).message(\"Not Found\").protocol(Protocol.HTTP_1_1).request(new Request.Builder().url(\"http://localhost\").build()).body(ResponseBody.create(\"test\".getBytes(\"UTF-8\"), MediaType.parse(\"application/json\"))).header(\"request-id\", \"request-id-value\").build());\r\n    final var requestInformation = new RequestInformation() {\r\n\r\n        {\r\n            setUri(new URI(\"https://localhost\"));\r\n            httpMethod = HttpMethod.GET;\r\n        }\r\n    };\r\n    final var mockEntity = mock(Parsable.class);\r\n    when(mockEntity.getFieldDeserializers()).thenReturn(new HashMap<>());\r\n    final var mockParsableFactory = mock(ParsableFactory.class);\r\n    when(mockParsableFactory.create(any(ParseNode.class))).thenReturn(mockEntity);\r\n    final var mockParseNode = mock(ParseNode.class);\r\n    when(mockParseNode.getObjectValue(any(ParsableFactory.class))).thenReturn(mockEntity);\r\n    final var mockFactory = mock(ParseNodeFactory.class);\r\n    when(mockFactory.getParseNode(any(String.class), any(InputStream.class))).thenReturn(mockParseNode);\r\n    when(mockFactory.getValidContentType()).thenReturn(\"application/json\");\r\n    final var requestAdapter = new OkHttpRequestAdapter(authenticationProviderMock, mockFactory, null, client);\r\n    final var errorMappings = errorMappingCodes == null ? null : new HashMap<String, ParsableFactory<? extends Parsable>>();\r\n    if (errorMappings != null)\r\n        errorMappingCodes.forEach((mapping) -> errorMappings.put(mapping, mockParsableFactory));\r\n    final var exception = assertThrows(ApiException.class, () -> requestAdapter.send(requestInformation, errorMappings, (node) -> mockEntity));\r\n    assertNotNull(exception);\r\n    if (expectDeserializedException)\r\n        verify(mockParseNode, times(1)).getObjectValue(mockParsableFactory);\r\n    assertEquals(responseStatusCode, exception.getResponseStatusCode());\r\n    assertTrue(exception.getResponseHeaders().containsKey(\"request-id\"));\r\n}",
            "shareableMockLines": {},
            "testMockLines": {
              "267": "final var mockParseNode = mock(ParseNode.class);",
              "268": "when(mockParseNode.getObjectValue(any(ParsableFactory.class))).thenReturn(mockEntity);"
            },
            "abstractedStatement": {
              "268": "when(com.microsoft.kiota.serialization.ParseNode.getObjectValue(any(ParsableFactory.class))).thenReturn(com.microsoft.kiota.serialization.Parsable)"
            },
            "rawStatementInfo": {
              "267": {
                "code": "final var mockParseNode = mock(ParseNode.class);",
                "line": 267,
                "type": "METHOD_MOCK_CREATION",
                "locate": "Test Case",
                "abstractedStatement": "",
                "isMockRelated": true,
                "isShareable": false,
                "locationContext": {
                  "methodName": "throwsAPIException",
                  "methodAnnotations": [
                    "SuppressWarnings",
                    "ParameterizedTest",
                    "MethodSource"
                  ],
                  "methodRawCode": "@SuppressWarnings(\"unchecked\")\r\n@ParameterizedTest\r\n@MethodSource(\"providesErrorMappings\")\r\nvoid throwsAPIException(int responseStatusCode, List<String> errorMappingCodes, boolean expectDeserializedException) throws Exception {\r\n    final var authenticationProviderMock = mock(AuthenticationProvider.class);\r\n    authenticationProviderMock.authenticateRequest(any(RequestInformation.class), any(Map.class));\r\n    final var client = getMockClient(new Response.Builder().code(responseStatusCode).message(\"Not Found\").protocol(Protocol.HTTP_1_1).request(new Request.Builder().url(\"http://localhost\").build()).body(ResponseBody.create(\"test\".getBytes(\"UTF-8\"), MediaType.parse(\"application/json\"))).header(\"request-id\", \"request-id-value\").build());\r\n    final var requestInformation = new RequestInformation() {\r\n\r\n        {\r\n            setUri(new URI(\"https://localhost\"));\r\n            httpMethod = HttpMethod.GET;\r\n        }\r\n    };\r\n    final var mockEntity = mock(Parsable.class);\r\n    when(mockEntity.getFieldDeserializers()).thenReturn(new HashMap<>());\r\n    final var mockParsableFactory = mock(ParsableFactory.class);\r\n    when(mockParsableFactory.create(any(ParseNode.class))).thenReturn(mockEntity);\r\n    final var mockParseNode = mock(ParseNode.class);\r\n    when(mockParseNode.getObjectValue(any(ParsableFactory.class))).thenReturn(mockEntity);\r\n    final var mockFactory = mock(ParseNodeFactory.class);\r\n    when(mockFactory.getParseNode(any(String.class), any(InputStream.class))).thenReturn(mockParseNode);\r\n    when(mockFactory.getValidContentType()).thenReturn(\"application/json\");\r\n    final var requestAdapter = new OkHttpRequestAdapter(authenticationProviderMock, mockFactory, null, client);\r\n    final var errorMappings = errorMappingCodes == null ? null : new HashMap<String, ParsableFactory<? extends Parsable>>();\r\n    if (errorMappings != null)\r\n        errorMappingCodes.forEach((mapping) -> errorMappings.put(mapping, mockParsableFactory));\r\n    final var exception = assertThrows(ApiException.class, () -> requestAdapter.send(requestInformation, errorMappings, (node) -> mockEntity));\r\n    assertNotNull(exception);\r\n    if (expectDeserializedException)\r\n        verify(mockParseNode, times(1)).getObjectValue(mockParsableFactory);\r\n    assertEquals(responseStatusCode, exception.getResponseStatusCode());\r\n    assertTrue(exception.getResponseHeaders().containsKey(\"request-id\"));\r\n}"
                }
              },
              "268": {
                "code": "when(mockParseNode.getObjectValue(any(ParsableFactory.class))).thenReturn(mockEntity);",
                "line": 268,
                "type": "STUBBING",
                "locate": "Test Case",
                "abstractedStatement": "when(com.microsoft.kiota.serialization.ParseNode.getObjectValue(any(ParsableFactory.class))).thenReturn(com.microsoft.kiota.serialization.Parsable)",
                "isMockRelated": true,
                "isShareable": false,
                "locationContext": {
                  "methodName": "throwsAPIException",
                  "methodAnnotations": [
                    "SuppressWarnings",
                    "ParameterizedTest",
                    "MethodSource"
                  ],
                  "methodRawCode": "@SuppressWarnings(\"unchecked\")\r\n@ParameterizedTest\r\n@MethodSource(\"providesErrorMappings\")\r\nvoid throwsAPIException(int responseStatusCode, List<String> errorMappingCodes, boolean expectDeserializedException) throws Exception {\r\n    final var authenticationProviderMock = mock(AuthenticationProvider.class);\r\n    authenticationProviderMock.authenticateRequest(any(RequestInformation.class), any(Map.class));\r\n    final var client = getMockClient(new Response.Builder().code(responseStatusCode).message(\"Not Found\").protocol(Protocol.HTTP_1_1).request(new Request.Builder().url(\"http://localhost\").build()).body(ResponseBody.create(\"test\".getBytes(\"UTF-8\"), MediaType.parse(\"application/json\"))).header(\"request-id\", \"request-id-value\").build());\r\n    final var requestInformation = new RequestInformation() {\r\n\r\n        {\r\n            setUri(new URI(\"https://localhost\"));\r\n            httpMethod = HttpMethod.GET;\r\n        }\r\n    };\r\n    final var mockEntity = mock(Parsable.class);\r\n    when(mockEntity.getFieldDeserializers()).thenReturn(new HashMap<>());\r\n    final var mockParsableFactory = mock(ParsableFactory.class);\r\n    when(mockParsableFactory.create(any(ParseNode.class))).thenReturn(mockEntity);\r\n    final var mockParseNode = mock(ParseNode.class);\r\n    when(mockParseNode.getObjectValue(any(ParsableFactory.class))).thenReturn(mockEntity);\r\n    final var mockFactory = mock(ParseNodeFactory.class);\r\n    when(mockFactory.getParseNode(any(String.class), any(InputStream.class))).thenReturn(mockParseNode);\r\n    when(mockFactory.getValidContentType()).thenReturn(\"application/json\");\r\n    final var requestAdapter = new OkHttpRequestAdapter(authenticationProviderMock, mockFactory, null, client);\r\n    final var errorMappings = errorMappingCodes == null ? null : new HashMap<String, ParsableFactory<? extends Parsable>>();\r\n    if (errorMappings != null)\r\n        errorMappingCodes.forEach((mapping) -> errorMappings.put(mapping, mockParsableFactory));\r\n    final var exception = assertThrows(ApiException.class, () -> requestAdapter.send(requestInformation, errorMappings, (node) -> mockEntity));\r\n    assertNotNull(exception);\r\n    if (expectDeserializedException)\r\n        verify(mockParseNode, times(1)).getObjectValue(mockParsableFactory);\r\n    assertEquals(responseStatusCode, exception.getResponseStatusCode());\r\n    assertTrue(exception.getResponseHeaders().containsKey(\"request-id\"));\r\n}"
                }
              }
            }
          }
        ]
      }
    ]
  },
  "detectedMockObjects": [
    {
      "rawMockObjectId": 0,
      "variableName": "writer",
      "variableType": "SerializationWriter",
      "mockedClass": "com.microsoft.kiota.serialization.SerializationWriter",
      "isReuseableMock": false,
      "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— None\n\nVerification:\n— None",
      "mockRole": "mock",
      "classContext": {
        "packageName": "com.microsoft.kiota",
        "filePath": "C:\\Java_projects\\Microsoft\\kiota-java\\components\\abstractions\\src\\test\\java\\com\\microsoft\\kiota\\MultiPartBodyTest.java"
      },
      "statements": [
        {
          "code": "final SerializationWriter writer = mock(SerializationWriter.class);",
          "line": 37,
          "type": "METHOD_MOCK_CREATION",
          "locate": "Test Case",
          "abstractedStatement": "",
          "isMockRelated": true,
          "isShareable": false,
          "locationContext": {
            "methodName": "requiresRequestAdapter",
            "methodAnnotations": [
              "Test"
            ],
            "methodRawCode": "@Test\r\nvoid requiresRequestAdapter() {\r\n    final MultipartBody multipartBody = new MultipartBody();\r\n    final SerializationWriter writer = mock(SerializationWriter.class);\r\n    assertThrows(IllegalStateException.class, () -> multipartBody.serialize(writer));\r\n}"
          }
        },
        {
          "code": "assertThrows(IllegalStateException.class, () -> multipartBody.serialize(writer));",
          "line": 38,
          "type": "REFERENCE",
          "locate": "Test Case",
          "abstractedStatement": "",
          "isMockRelated": false,
          "isShareable": false,
          "locationContext": {
            "methodName": "requiresRequestAdapter",
            "methodAnnotations": [
              "Test"
            ],
            "methodRawCode": "@Test\r\nvoid requiresRequestAdapter() {\r\n    final MultipartBody multipartBody = new MultipartBody();\r\n    final SerializationWriter writer = mock(SerializationWriter.class);\r\n    assertThrows(IllegalStateException.class, () -> multipartBody.serialize(writer));\r\n}"
          }
        }
      ]
    },
    {
      "rawMockObjectId": 1,
      "variableName": "writer",
      "variableType": "SerializationWriter",
      "mockedClass": "com.microsoft.kiota.serialization.SerializationWriter",
      "isReuseableMock": false,
      "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— None\n\nVerification:\n— None",
      "mockRole": "mock",
      "classContext": {
        "packageName": "com.microsoft.kiota",
        "filePath": "C:\\Java_projects\\Microsoft\\kiota-java\\components\\abstractions\\src\\test\\java\\com\\microsoft\\kiota\\MultiPartBodyTest.java"
      },
      "statements": [
        {
          "code": "final SerializationWriter writer = mock(SerializationWriter.class);",
          "line": 44,
          "type": "METHOD_MOCK_CREATION",
          "locate": "Test Case",
          "abstractedStatement": "",
          "isMockRelated": true,
          "isShareable": false,
          "locationContext": {
            "methodName": "requiresPartsForSerialization",
            "methodAnnotations": [
              "Test"
            ],
            "methodRawCode": "@Test\r\nvoid requiresPartsForSerialization() {\r\n    final MultipartBody multipartBody = new MultipartBody();\r\n    final SerializationWriter writer = mock(SerializationWriter.class);\r\n    final RequestAdapter requestAdapter = mock(RequestAdapter.class);\r\n    multipartBody.requestAdapter = requestAdapter;\r\n    assertThrows(IllegalStateException.class, () -> multipartBody.serialize(writer));\r\n}"
          }
        },
        {
          "code": "assertThrows(IllegalStateException.class, () -> multipartBody.serialize(writer));",
          "line": 47,
          "type": "REFERENCE",
          "locate": "Test Case",
          "abstractedStatement": "",
          "isMockRelated": false,
          "isShareable": false,
          "locationContext": {
            "methodName": "requiresPartsForSerialization",
            "methodAnnotations": [
              "Test"
            ],
            "methodRawCode": "@Test\r\nvoid requiresPartsForSerialization() {\r\n    final MultipartBody multipartBody = new MultipartBody();\r\n    final SerializationWriter writer = mock(SerializationWriter.class);\r\n    final RequestAdapter requestAdapter = mock(RequestAdapter.class);\r\n    multipartBody.requestAdapter = requestAdapter;\r\n    assertThrows(IllegalStateException.class, () -> multipartBody.serialize(writer));\r\n}"
          }
        }
      ]
    },
    {
      "rawMockObjectId": 2,
      "variableName": "requestAdapter",
      "variableType": "RequestAdapter",
      "mockedClass": "com.microsoft.kiota.RequestAdapter",
      "isReuseableMock": false,
      "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— None\n\nVerification:\n— None",
      "mockRole": "mock",
      "classContext": {
        "packageName": "com.microsoft.kiota",
        "filePath": "C:\\Java_projects\\Microsoft\\kiota-java\\components\\abstractions\\src\\test\\java\\com\\microsoft\\kiota\\MultiPartBodyTest.java"
      },
      "statements": [
        {
          "code": "final RequestAdapter requestAdapter = mock(RequestAdapter.class);",
          "line": 45,
          "type": "METHOD_MOCK_CREATION",
          "locate": "Test Case",
          "abstractedStatement": "",
          "isMockRelated": true,
          "isShareable": false,
          "locationContext": {
            "methodName": "requiresPartsForSerialization",
            "methodAnnotations": [
              "Test"
            ],
            "methodRawCode": "@Test\r\nvoid requiresPartsForSerialization() {\r\n    final MultipartBody multipartBody = new MultipartBody();\r\n    final SerializationWriter writer = mock(SerializationWriter.class);\r\n    final RequestAdapter requestAdapter = mock(RequestAdapter.class);\r\n    multipartBody.requestAdapter = requestAdapter;\r\n    assertThrows(IllegalStateException.class, () -> multipartBody.serialize(writer));\r\n}"
          }
        }
      ]
    },
    {
      "rawMockObjectId": 3,
      "variableName": "requestAdapter",
      "variableType": "RequestAdapter",
      "mockedClass": "com.microsoft.kiota.RequestAdapter",
      "isReuseableMock": false,
      "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— None\n\nVerification:\n— None",
      "mockRole": "mock",
      "classContext": {
        "packageName": "com.microsoft.kiota",
        "filePath": "C:\\Java_projects\\Microsoft\\kiota-java\\components\\abstractions\\src\\test\\java\\com\\microsoft\\kiota\\MultiPartBodyTest.java"
      },
      "statements": [
        {
          "code": "final RequestAdapter requestAdapter = mock(RequestAdapter.class);",
          "line": 53,
          "type": "METHOD_MOCK_CREATION",
          "locate": "Test Case",
          "abstractedStatement": "",
          "isMockRelated": true,
          "isShareable": false,
          "locationContext": {
            "methodName": "addsPart",
            "methodAnnotations": [
              "Test"
            ],
            "methodRawCode": "@Test\r\nvoid addsPart() {\r\n    final MultipartBody multipartBody = new MultipartBody();\r\n    final RequestAdapter requestAdapter = mock(RequestAdapter.class);\r\n    multipartBody.requestAdapter = requestAdapter;\r\n    multipartBody.addOrReplacePart(\"foo\", \"bar\", \"baz\");\r\n    final Object result = multipartBody.getPartValue(\"foo\");\r\n    assertNotNull(result);\r\n    assertTrue(result instanceof String);\r\n}"
          }
        }
      ]
    },
    {
      "rawMockObjectId": 4,
      "variableName": "requestAdapter",
      "variableType": "RequestAdapter",
      "mockedClass": "com.microsoft.kiota.RequestAdapter",
      "isReuseableMock": false,
      "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— None\n\nVerification:\n— None",
      "mockRole": "mock",
      "classContext": {
        "packageName": "com.microsoft.kiota",
        "filePath": "C:\\Java_projects\\Microsoft\\kiota-java\\components\\abstractions\\src\\test\\java\\com\\microsoft\\kiota\\MultiPartBodyTest.java"
      },
      "statements": [
        {
          "code": "final RequestAdapter requestAdapter = mock(RequestAdapter.class);",
          "line": 64,
          "type": "METHOD_MOCK_CREATION",
          "locate": "Test Case",
          "abstractedStatement": "",
          "isMockRelated": true,
          "isShareable": false,
          "locationContext": {
            "methodName": "removesPart",
            "methodAnnotations": [
              "Test"
            ],
            "methodRawCode": "@Test\r\nvoid removesPart() {\r\n    final MultipartBody multipartBody = new MultipartBody();\r\n    final RequestAdapter requestAdapter = mock(RequestAdapter.class);\r\n    multipartBody.requestAdapter = requestAdapter;\r\n    multipartBody.addOrReplacePart(\"foo\", \"bar\", \"baz\");\r\n    multipartBody.removePart(\"FOO\");\r\n    final Object result = multipartBody.getPartValue(\"foo\");\r\n    assertNull(result);\r\n}"
          }
        }
      ]
    },
    {
      "rawMockObjectId": 5,
      "variableName": "writer",
      "variableType": "SerializationWriter",
      "mockedClass": "com.microsoft.kiota.serialization.SerializationWriter",
      "isReuseableMock": false,
      "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— None\n\nVerification:\n— Test Case",
      "mockRole": "mock",
      "classContext": {
        "packageName": "com.microsoft.kiota",
        "filePath": "C:\\Java_projects\\Microsoft\\kiota-java\\components\\abstractions\\src\\test\\java\\com\\microsoft\\kiota\\MultiPartBodyTest.java"
      },
      "statements": [
        {
          "code": "final SerializationWriter writer = mock(SerializationWriter.class);",
          "line": 75,
          "type": "METHOD_MOCK_CREATION",
          "locate": "Test Case",
          "abstractedStatement": "",
          "isMockRelated": true,
          "isShareable": false,
          "locationContext": {
            "methodName": "notAddFilename",
            "methodAnnotations": [
              "Test"
            ],
            "methodRawCode": "@Test\r\nvoid notAddFilename() {\r\n    final MultipartBody multipartBody = new MultipartBody();\r\n    final SerializationWriter writer = mock(SerializationWriter.class);\r\n    multipartBody.requestAdapter = mock(RequestAdapter.class);\r\n    multipartBody.addOrReplacePart(\"foo\", \"bar\", \"baz\");\r\n    multipartBody.serialize(writer);\r\n    verify(writer).writeStringValue(\"Content-Disposition\", \"form-data; name=\\\"foo\\\"\");\r\n}"
          }
        },
        {
          "code": "multipartBody.serialize(writer);",
          "line": 78,
          "type": "REFERENCE",
          "locate": "Test Case",
          "abstractedStatement": "",
          "isMockRelated": false,
          "isShareable": false,
          "locationContext": {
            "methodName": "notAddFilename",
            "methodAnnotations": [
              "Test"
            ],
            "methodRawCode": "@Test\r\nvoid notAddFilename() {\r\n    final MultipartBody multipartBody = new MultipartBody();\r\n    final SerializationWriter writer = mock(SerializationWriter.class);\r\n    multipartBody.requestAdapter = mock(RequestAdapter.class);\r\n    multipartBody.addOrReplacePart(\"foo\", \"bar\", \"baz\");\r\n    multipartBody.serialize(writer);\r\n    verify(writer).writeStringValue(\"Content-Disposition\", \"form-data; name=\\\"foo\\\"\");\r\n}"
          }
        },
        {
          "code": "verify(writer).writeStringValue(\"Content-Disposition\", \"form-data; name=\\\"foo\\\"\");",
          "line": 79,
          "type": "VERIFICATION",
          "locate": "Test Case",
          "abstractedStatement": "",
          "isMockRelated": true,
          "isShareable": false,
          "locationContext": {
            "methodName": "notAddFilename",
            "methodAnnotations": [
              "Test"
            ],
            "methodRawCode": "@Test\r\nvoid notAddFilename() {\r\n    final MultipartBody multipartBody = new MultipartBody();\r\n    final SerializationWriter writer = mock(SerializationWriter.class);\r\n    multipartBody.requestAdapter = mock(RequestAdapter.class);\r\n    multipartBody.addOrReplacePart(\"foo\", \"bar\", \"baz\");\r\n    multipartBody.serialize(writer);\r\n    verify(writer).writeStringValue(\"Content-Disposition\", \"form-data; name=\\\"foo\\\"\");\r\n}"
          }
        }
      ]
    },
    {
      "rawMockObjectId": 6,
      "variableName": "writer",
      "variableType": "SerializationWriter",
      "mockedClass": "com.microsoft.kiota.serialization.SerializationWriter",
      "isReuseableMock": false,
      "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— None\n\nVerification:\n— Test Case",
      "mockRole": "mock",
      "classContext": {
        "packageName": "com.microsoft.kiota",
        "filePath": "C:\\Java_projects\\Microsoft\\kiota-java\\components\\abstractions\\src\\test\\java\\com\\microsoft\\kiota\\MultiPartBodyTest.java"
      },
      "statements": [
        {
          "code": "final SerializationWriter writer = mock(SerializationWriter.class);",
          "line": 85,
          "type": "METHOD_MOCK_CREATION",
          "locate": "Test Case",
          "abstractedStatement": "",
          "isMockRelated": true,
          "isShareable": false,
          "locationContext": {
            "methodName": "addFilename",
            "methodAnnotations": [
              "Test"
            ],
            "methodRawCode": "@Test\r\nvoid addFilename() {\r\n    final MultipartBody multipartBody = new MultipartBody();\r\n    final SerializationWriter writer = mock(SerializationWriter.class);\r\n    multipartBody.requestAdapter = mock(RequestAdapter.class);\r\n    multipartBody.addOrReplacePart(\"foo\", \"bar\", \"baz\", \"image.png\");\r\n    multipartBody.serialize(writer);\r\n    verify(writer).writeStringValue(\"Content-Disposition\", \"form-data; name=\\\"foo\\\"; filename=\\\"image.png\\\"\");\r\n}"
          }
        },
        {
          "code": "multipartBody.serialize(writer);",
          "line": 88,
          "type": "REFERENCE",
          "locate": "Test Case",
          "abstractedStatement": "",
          "isMockRelated": false,
          "isShareable": false,
          "locationContext": {
            "methodName": "addFilename",
            "methodAnnotations": [
              "Test"
            ],
            "methodRawCode": "@Test\r\nvoid addFilename() {\r\n    final MultipartBody multipartBody = new MultipartBody();\r\n    final SerializationWriter writer = mock(SerializationWriter.class);\r\n    multipartBody.requestAdapter = mock(RequestAdapter.class);\r\n    multipartBody.addOrReplacePart(\"foo\", \"bar\", \"baz\", \"image.png\");\r\n    multipartBody.serialize(writer);\r\n    verify(writer).writeStringValue(\"Content-Disposition\", \"form-data; name=\\\"foo\\\"; filename=\\\"image.png\\\"\");\r\n}"
          }
        },
        {
          "code": "verify(writer).writeStringValue(\"Content-Disposition\", \"form-data; name=\\\"foo\\\"; filename=\\\"image.png\\\"\");",
          "line": 89,
          "type": "VERIFICATION",
          "locate": "Test Case",
          "abstractedStatement": "",
          "isMockRelated": true,
          "isShareable": false,
          "locationContext": {
            "methodName": "addFilename",
            "methodAnnotations": [
              "Test"
            ],
            "methodRawCode": "@Test\r\nvoid addFilename() {\r\n    final MultipartBody multipartBody = new MultipartBody();\r\n    final SerializationWriter writer = mock(SerializationWriter.class);\r\n    multipartBody.requestAdapter = mock(RequestAdapter.class);\r\n    multipartBody.addOrReplacePart(\"foo\", \"bar\", \"baz\", \"image.png\");\r\n    multipartBody.serialize(writer);\r\n    verify(writer).writeStringValue(\"Content-Disposition\", \"form-data; name=\\\"foo\\\"; filename=\\\"image.png\\\"\");\r\n}"
          }
        }
      ]
    },
    {
      "rawMockObjectId": 7,
      "variableName": "writerMock",
      "variableType": "SerializationWriter",
      "mockedClass": "com.microsoft.kiota.serialization.SerializationWriter",
      "isReuseableMock": false,
      "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— None\n\nVerification:\n— Test Case",
      "mockRole": "mock",
      "classContext": {
        "packageName": "com.microsoft.kiota",
        "filePath": "C:\\Java_projects\\Microsoft\\kiota-java\\components\\abstractions\\src\\test\\java\\com\\microsoft\\kiota\\RequestInformationTest.java"
      },
      "statements": [
        {
          "code": "final SerializationWriter writerMock = mock(SerializationWriter.class);",
          "line": 190,
          "type": "METHOD_MOCK_CREATION",
          "locate": "Test Case",
          "abstractedStatement": "",
          "isMockRelated": true,
          "isShareable": false,
          "locationContext": {
            "methodName": "SetsParsableContent",
            "methodAnnotations": [
              "Test"
            ],
            "methodRawCode": "@Test\r\nvoid SetsParsableContent() {\r\n    // Arrange as the request builders would\r\n    final RequestInformation requestInfo = new RequestInformation();\r\n    requestInfo.httpMethod = HttpMethod.POST;\r\n    requestInfo.urlTemplate = \"http://localhost/users\";\r\n    final SerializationWriter writerMock = mock(SerializationWriter.class);\r\n    final SerializationWriterFactory factoryMock = mock(SerializationWriterFactory.class);\r\n    when(factoryMock.getSerializationWriter(anyString())).thenReturn(writerMock);\r\n    final RequestAdapter requestAdapterMock = mock(RequestAdapter.class);\r\n    when(requestAdapterMock.getSerializationWriterFactory()).thenReturn(factoryMock);\r\n    requestInfo.setContentFromParsable(requestAdapterMock, \"application/json\", new TestEntity());\r\n    verify(writerMock, times(1)).writeObjectValue(any(), any(TestEntity.class));\r\n    verify(writerMock, never()).writeCollectionOfObjectValues(anyString(), any(ArrayList.class));\r\n}"
          }
        },
        {
          "code": "when(factoryMock.getSerializationWriter(anyString())).thenReturn(writerMock);",
          "line": 192,
          "type": "REFERENCE",
          "locate": "Test Case",
          "abstractedStatement": "",
          "isMockRelated": false,
          "isShareable": false,
          "locationContext": {
            "methodName": "SetsParsableContent",
            "methodAnnotations": [
              "Test"
            ],
            "methodRawCode": "@Test\r\nvoid SetsParsableContent() {\r\n    // Arrange as the request builders would\r\n    final RequestInformation requestInfo = new RequestInformation();\r\n    requestInfo.httpMethod = HttpMethod.POST;\r\n    requestInfo.urlTemplate = \"http://localhost/users\";\r\n    final SerializationWriter writerMock = mock(SerializationWriter.class);\r\n    final SerializationWriterFactory factoryMock = mock(SerializationWriterFactory.class);\r\n    when(factoryMock.getSerializationWriter(anyString())).thenReturn(writerMock);\r\n    final RequestAdapter requestAdapterMock = mock(RequestAdapter.class);\r\n    when(requestAdapterMock.getSerializationWriterFactory()).thenReturn(factoryMock);\r\n    requestInfo.setContentFromParsable(requestAdapterMock, \"application/json\", new TestEntity());\r\n    verify(writerMock, times(1)).writeObjectValue(any(), any(TestEntity.class));\r\n    verify(writerMock, never()).writeCollectionOfObjectValues(anyString(), any(ArrayList.class));\r\n}"
          }
        },
        {
          "code": "verify(writerMock, times(1)).writeObjectValue(any(), any(TestEntity.class));",
          "line": 198,
          "type": "VERIFICATION",
          "locate": "Test Case",
          "abstractedStatement": "",
          "isMockRelated": true,
          "isShareable": false,
          "locationContext": {
            "methodName": "SetsParsableContent",
            "methodAnnotations": [
              "Test"
            ],
            "methodRawCode": "@Test\r\nvoid SetsParsableContent() {\r\n    // Arrange as the request builders would\r\n    final RequestInformation requestInfo = new RequestInformation();\r\n    requestInfo.httpMethod = HttpMethod.POST;\r\n    requestInfo.urlTemplate = \"http://localhost/users\";\r\n    final SerializationWriter writerMock = mock(SerializationWriter.class);\r\n    final SerializationWriterFactory factoryMock = mock(SerializationWriterFactory.class);\r\n    when(factoryMock.getSerializationWriter(anyString())).thenReturn(writerMock);\r\n    final RequestAdapter requestAdapterMock = mock(RequestAdapter.class);\r\n    when(requestAdapterMock.getSerializationWriterFactory()).thenReturn(factoryMock);\r\n    requestInfo.setContentFromParsable(requestAdapterMock, \"application/json\", new TestEntity());\r\n    verify(writerMock, times(1)).writeObjectValue(any(), any(TestEntity.class));\r\n    verify(writerMock, never()).writeCollectionOfObjectValues(anyString(), any(ArrayList.class));\r\n}"
          }
        },
        {
          "code": "verify(writerMock, never()).writeCollectionOfObjectValues(anyString(), any(ArrayList.class));",
          "line": 199,
          "type": "VERIFICATION",
          "locate": "Test Case",
          "abstractedStatement": "",
          "isMockRelated": true,
          "isShareable": false,
          "locationContext": {
            "methodName": "SetsParsableContent",
            "methodAnnotations": [
              "Test"
            ],
            "methodRawCode": "@Test\r\nvoid SetsParsableContent() {\r\n    // Arrange as the request builders would\r\n    final RequestInformation requestInfo = new RequestInformation();\r\n    requestInfo.httpMethod = HttpMethod.POST;\r\n    requestInfo.urlTemplate = \"http://localhost/users\";\r\n    final SerializationWriter writerMock = mock(SerializationWriter.class);\r\n    final SerializationWriterFactory factoryMock = mock(SerializationWriterFactory.class);\r\n    when(factoryMock.getSerializationWriter(anyString())).thenReturn(writerMock);\r\n    final RequestAdapter requestAdapterMock = mock(RequestAdapter.class);\r\n    when(requestAdapterMock.getSerializationWriterFactory()).thenReturn(factoryMock);\r\n    requestInfo.setContentFromParsable(requestAdapterMock, \"application/json\", new TestEntity());\r\n    verify(writerMock, times(1)).writeObjectValue(any(), any(TestEntity.class));\r\n    verify(writerMock, never()).writeCollectionOfObjectValues(anyString(), any(ArrayList.class));\r\n}"
          }
        }
      ]
    },
    {
      "rawMockObjectId": 8,
      "variableName": "factoryMock",
      "variableType": "SerializationWriterFactory",
      "mockedClass": "com.microsoft.kiota.serialization.SerializationWriterFactory",
      "isReuseableMock": false,
      "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
      "mockRole": "mock",
      "classContext": {
        "packageName": "com.microsoft.kiota",
        "filePath": "C:\\Java_projects\\Microsoft\\kiota-java\\components\\abstractions\\src\\test\\java\\com\\microsoft\\kiota\\RequestInformationTest.java"
      },
      "statements": [
        {
          "code": "final SerializationWriterFactory factoryMock = mock(SerializationWriterFactory.class);",
          "line": 191,
          "type": "METHOD_MOCK_CREATION",
          "locate": "Test Case",
          "abstractedStatement": "",
          "isMockRelated": true,
          "isShareable": false,
          "locationContext": {
            "methodName": "SetsParsableContent",
            "methodAnnotations": [
              "Test"
            ],
            "methodRawCode": "@Test\r\nvoid SetsParsableContent() {\r\n    // Arrange as the request builders would\r\n    final RequestInformation requestInfo = new RequestInformation();\r\n    requestInfo.httpMethod = HttpMethod.POST;\r\n    requestInfo.urlTemplate = \"http://localhost/users\";\r\n    final SerializationWriter writerMock = mock(SerializationWriter.class);\r\n    final SerializationWriterFactory factoryMock = mock(SerializationWriterFactory.class);\r\n    when(factoryMock.getSerializationWriter(anyString())).thenReturn(writerMock);\r\n    final RequestAdapter requestAdapterMock = mock(RequestAdapter.class);\r\n    when(requestAdapterMock.getSerializationWriterFactory()).thenReturn(factoryMock);\r\n    requestInfo.setContentFromParsable(requestAdapterMock, \"application/json\", new TestEntity());\r\n    verify(writerMock, times(1)).writeObjectValue(any(), any(TestEntity.class));\r\n    verify(writerMock, never()).writeCollectionOfObjectValues(anyString(), any(ArrayList.class));\r\n}"
          }
        },
        {
          "code": "when(factoryMock.getSerializationWriter(anyString())).thenReturn(writerMock);",
          "line": 192,
          "type": "STUBBING",
          "locate": "Test Case",
          "abstractedStatement": "when(com.microsoft.kiota.serialization.SerializationWriterFactory.getSerializationWriter(anyString())).thenReturn(com.microsoft.kiota.serialization.SerializationWriter)",
          "isMockRelated": true,
          "isShareable": false,
          "locationContext": {
            "methodName": "SetsParsableContent",
            "methodAnnotations": [
              "Test"
            ],
            "methodRawCode": "@Test\r\nvoid SetsParsableContent() {\r\n    // Arrange as the request builders would\r\n    final RequestInformation requestInfo = new RequestInformation();\r\n    requestInfo.httpMethod = HttpMethod.POST;\r\n    requestInfo.urlTemplate = \"http://localhost/users\";\r\n    final SerializationWriter writerMock = mock(SerializationWriter.class);\r\n    final SerializationWriterFactory factoryMock = mock(SerializationWriterFactory.class);\r\n    when(factoryMock.getSerializationWriter(anyString())).thenReturn(writerMock);\r\n    final RequestAdapter requestAdapterMock = mock(RequestAdapter.class);\r\n    when(requestAdapterMock.getSerializationWriterFactory()).thenReturn(factoryMock);\r\n    requestInfo.setContentFromParsable(requestAdapterMock, \"application/json\", new TestEntity());\r\n    verify(writerMock, times(1)).writeObjectValue(any(), any(TestEntity.class));\r\n    verify(writerMock, never()).writeCollectionOfObjectValues(anyString(), any(ArrayList.class));\r\n}"
          }
        },
        {
          "code": "when(requestAdapterMock.getSerializationWriterFactory()).thenReturn(factoryMock);",
          "line": 194,
          "type": "REFERENCE",
          "locate": "Test Case",
          "abstractedStatement": "",
          "isMockRelated": false,
          "isShareable": false,
          "locationContext": {
            "methodName": "SetsParsableContent",
            "methodAnnotations": [
              "Test"
            ],
            "methodRawCode": "@Test\r\nvoid SetsParsableContent() {\r\n    // Arrange as the request builders would\r\n    final RequestInformation requestInfo = new RequestInformation();\r\n    requestInfo.httpMethod = HttpMethod.POST;\r\n    requestInfo.urlTemplate = \"http://localhost/users\";\r\n    final SerializationWriter writerMock = mock(SerializationWriter.class);\r\n    final SerializationWriterFactory factoryMock = mock(SerializationWriterFactory.class);\r\n    when(factoryMock.getSerializationWriter(anyString())).thenReturn(writerMock);\r\n    final RequestAdapter requestAdapterMock = mock(RequestAdapter.class);\r\n    when(requestAdapterMock.getSerializationWriterFactory()).thenReturn(factoryMock);\r\n    requestInfo.setContentFromParsable(requestAdapterMock, \"application/json\", new TestEntity());\r\n    verify(writerMock, times(1)).writeObjectValue(any(), any(TestEntity.class));\r\n    verify(writerMock, never()).writeCollectionOfObjectValues(anyString(), any(ArrayList.class));\r\n}"
          }
        }
      ]
    },
    {
      "rawMockObjectId": 9,
      "variableName": "requestAdapterMock",
      "variableType": "RequestAdapter",
      "mockedClass": "com.microsoft.kiota.RequestAdapter",
      "isReuseableMock": false,
      "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
      "mockRole": "mock",
      "classContext": {
        "packageName": "com.microsoft.kiota",
        "filePath": "C:\\Java_projects\\Microsoft\\kiota-java\\components\\abstractions\\src\\test\\java\\com\\microsoft\\kiota\\RequestInformationTest.java"
      },
      "statements": [
        {
          "code": "final RequestAdapter requestAdapterMock = mock(RequestAdapter.class);",
          "line": 193,
          "type": "METHOD_MOCK_CREATION",
          "locate": "Test Case",
          "abstractedStatement": "",
          "isMockRelated": true,
          "isShareable": false,
          "locationContext": {
            "methodName": "SetsParsableContent",
            "methodAnnotations": [
              "Test"
            ],
            "methodRawCode": "@Test\r\nvoid SetsParsableContent() {\r\n    // Arrange as the request builders would\r\n    final RequestInformation requestInfo = new RequestInformation();\r\n    requestInfo.httpMethod = HttpMethod.POST;\r\n    requestInfo.urlTemplate = \"http://localhost/users\";\r\n    final SerializationWriter writerMock = mock(SerializationWriter.class);\r\n    final SerializationWriterFactory factoryMock = mock(SerializationWriterFactory.class);\r\n    when(factoryMock.getSerializationWriter(anyString())).thenReturn(writerMock);\r\n    final RequestAdapter requestAdapterMock = mock(RequestAdapter.class);\r\n    when(requestAdapterMock.getSerializationWriterFactory()).thenReturn(factoryMock);\r\n    requestInfo.setContentFromParsable(requestAdapterMock, \"application/json\", new TestEntity());\r\n    verify(writerMock, times(1)).writeObjectValue(any(), any(TestEntity.class));\r\n    verify(writerMock, never()).writeCollectionOfObjectValues(anyString(), any(ArrayList.class));\r\n}"
          }
        },
        {
          "code": "when(requestAdapterMock.getSerializationWriterFactory()).thenReturn(factoryMock);",
          "line": 194,
          "type": "STUBBING",
          "locate": "Test Case",
          "abstractedStatement": "when(com.microsoft.kiota.RequestAdapter.getSerializationWriterFactory()).thenReturn(com.microsoft.kiota.serialization.SerializationWriterFactory)",
          "isMockRelated": true,
          "isShareable": false,
          "locationContext": {
            "methodName": "SetsParsableContent",
            "methodAnnotations": [
              "Test"
            ],
            "methodRawCode": "@Test\r\nvoid SetsParsableContent() {\r\n    // Arrange as the request builders would\r\n    final RequestInformation requestInfo = new RequestInformation();\r\n    requestInfo.httpMethod = HttpMethod.POST;\r\n    requestInfo.urlTemplate = \"http://localhost/users\";\r\n    final SerializationWriter writerMock = mock(SerializationWriter.class);\r\n    final SerializationWriterFactory factoryMock = mock(SerializationWriterFactory.class);\r\n    when(factoryMock.getSerializationWriter(anyString())).thenReturn(writerMock);\r\n    final RequestAdapter requestAdapterMock = mock(RequestAdapter.class);\r\n    when(requestAdapterMock.getSerializationWriterFactory()).thenReturn(factoryMock);\r\n    requestInfo.setContentFromParsable(requestAdapterMock, \"application/json\", new TestEntity());\r\n    verify(writerMock, times(1)).writeObjectValue(any(), any(TestEntity.class));\r\n    verify(writerMock, never()).writeCollectionOfObjectValues(anyString(), any(ArrayList.class));\r\n}"
          }
        },
        {
          "code": "requestInfo.setContentFromParsable(requestAdapterMock, \"application/json\", new TestEntity());",
          "line": 195,
          "type": "REFERENCE",
          "locate": "Test Case",
          "abstractedStatement": "",
          "isMockRelated": false,
          "isShareable": false,
          "locationContext": {
            "methodName": "SetsParsableContent",
            "methodAnnotations": [
              "Test"
            ],
            "methodRawCode": "@Test\r\nvoid SetsParsableContent() {\r\n    // Arrange as the request builders would\r\n    final RequestInformation requestInfo = new RequestInformation();\r\n    requestInfo.httpMethod = HttpMethod.POST;\r\n    requestInfo.urlTemplate = \"http://localhost/users\";\r\n    final SerializationWriter writerMock = mock(SerializationWriter.class);\r\n    final SerializationWriterFactory factoryMock = mock(SerializationWriterFactory.class);\r\n    when(factoryMock.getSerializationWriter(anyString())).thenReturn(writerMock);\r\n    final RequestAdapter requestAdapterMock = mock(RequestAdapter.class);\r\n    when(requestAdapterMock.getSerializationWriterFactory()).thenReturn(factoryMock);\r\n    requestInfo.setContentFromParsable(requestAdapterMock, \"application/json\", new TestEntity());\r\n    verify(writerMock, times(1)).writeObjectValue(any(), any(TestEntity.class));\r\n    verify(writerMock, never()).writeCollectionOfObjectValues(anyString(), any(ArrayList.class));\r\n}"
          }
        }
      ]
    },
    {
      "rawMockObjectId": 10,
      "variableName": "writerMock",
      "variableType": "SerializationWriter",
      "mockedClass": "com.microsoft.kiota.serialization.SerializationWriter",
      "isReuseableMock": false,
      "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— None\n\nVerification:\n— Test Case",
      "mockRole": "mock",
      "classContext": {
        "packageName": "com.microsoft.kiota",
        "filePath": "C:\\Java_projects\\Microsoft\\kiota-java\\components\\abstractions\\src\\test\\java\\com\\microsoft\\kiota\\RequestInformationTest.java"
      },
      "statements": [
        {
          "code": "final SerializationWriter writerMock = mock(SerializationWriter.class);",
          "line": 209,
          "type": "METHOD_MOCK_CREATION",
          "locate": "Test Case",
          "abstractedStatement": "",
          "isMockRelated": true,
          "isShareable": false,
          "locationContext": {
            "methodName": "SetsParsableContentCollection",
            "methodAnnotations": [
              "Test"
            ],
            "methodRawCode": "@Test\r\nvoid SetsParsableContentCollection() {\r\n    // Arrange as the request builders would\r\n    final RequestInformation requestInfo = new RequestInformation();\r\n    requestInfo.httpMethod = HttpMethod.POST;\r\n    requestInfo.urlTemplate = \"http://localhost/users\";\r\n    final SerializationWriter writerMock = mock(SerializationWriter.class);\r\n    final SerializationWriterFactory factoryMock = mock(SerializationWriterFactory.class);\r\n    when(factoryMock.getSerializationWriter(anyString())).thenReturn(writerMock);\r\n    final RequestAdapter requestAdapterMock = mock(RequestAdapter.class);\r\n    when(requestAdapterMock.getSerializationWriterFactory()).thenReturn(factoryMock);\r\n    requestInfo.setContentFromParsable(requestAdapterMock, \"application/json\", new TestEntity[] { new TestEntity() });\r\n    verify(writerMock, never()).writeObjectValue(any(), any(TestEntity.class));\r\n    verify(writerMock, times(1)).writeCollectionOfObjectValues(any(), any(Iterable.class));\r\n}"
          }
        },
        {
          "code": "when(factoryMock.getSerializationWriter(anyString())).thenReturn(writerMock);",
          "line": 211,
          "type": "REFERENCE",
          "locate": "Test Case",
          "abstractedStatement": "",
          "isMockRelated": false,
          "isShareable": false,
          "locationContext": {
            "methodName": "SetsParsableContentCollection",
            "methodAnnotations": [
              "Test"
            ],
            "methodRawCode": "@Test\r\nvoid SetsParsableContentCollection() {\r\n    // Arrange as the request builders would\r\n    final RequestInformation requestInfo = new RequestInformation();\r\n    requestInfo.httpMethod = HttpMethod.POST;\r\n    requestInfo.urlTemplate = \"http://localhost/users\";\r\n    final SerializationWriter writerMock = mock(SerializationWriter.class);\r\n    final SerializationWriterFactory factoryMock = mock(SerializationWriterFactory.class);\r\n    when(factoryMock.getSerializationWriter(anyString())).thenReturn(writerMock);\r\n    final RequestAdapter requestAdapterMock = mock(RequestAdapter.class);\r\n    when(requestAdapterMock.getSerializationWriterFactory()).thenReturn(factoryMock);\r\n    requestInfo.setContentFromParsable(requestAdapterMock, \"application/json\", new TestEntity[] { new TestEntity() });\r\n    verify(writerMock, never()).writeObjectValue(any(), any(TestEntity.class));\r\n    verify(writerMock, times(1)).writeCollectionOfObjectValues(any(), any(Iterable.class));\r\n}"
          }
        },
        {
          "code": "verify(writerMock, never()).writeObjectValue(any(), any(TestEntity.class));",
          "line": 217,
          "type": "VERIFICATION",
          "locate": "Test Case",
          "abstractedStatement": "",
          "isMockRelated": true,
          "isShareable": false,
          "locationContext": {
            "methodName": "SetsParsableContentCollection",
            "methodAnnotations": [
              "Test"
            ],
            "methodRawCode": "@Test\r\nvoid SetsParsableContentCollection() {\r\n    // Arrange as the request builders would\r\n    final RequestInformation requestInfo = new RequestInformation();\r\n    requestInfo.httpMethod = HttpMethod.POST;\r\n    requestInfo.urlTemplate = \"http://localhost/users\";\r\n    final SerializationWriter writerMock = mock(SerializationWriter.class);\r\n    final SerializationWriterFactory factoryMock = mock(SerializationWriterFactory.class);\r\n    when(factoryMock.getSerializationWriter(anyString())).thenReturn(writerMock);\r\n    final RequestAdapter requestAdapterMock = mock(RequestAdapter.class);\r\n    when(requestAdapterMock.getSerializationWriterFactory()).thenReturn(factoryMock);\r\n    requestInfo.setContentFromParsable(requestAdapterMock, \"application/json\", new TestEntity[] { new TestEntity() });\r\n    verify(writerMock, never()).writeObjectValue(any(), any(TestEntity.class));\r\n    verify(writerMock, times(1)).writeCollectionOfObjectValues(any(), any(Iterable.class));\r\n}"
          }
        },
        {
          "code": "verify(writerMock, times(1)).writeCollectionOfObjectValues(any(), any(Iterable.class));",
          "line": 218,
          "type": "VERIFICATION",
          "locate": "Test Case",
          "abstractedStatement": "",
          "isMockRelated": true,
          "isShareable": false,
          "locationContext": {
            "methodName": "SetsParsableContentCollection",
            "methodAnnotations": [
              "Test"
            ],
            "methodRawCode": "@Test\r\nvoid SetsParsableContentCollection() {\r\n    // Arrange as the request builders would\r\n    final RequestInformation requestInfo = new RequestInformation();\r\n    requestInfo.httpMethod = HttpMethod.POST;\r\n    requestInfo.urlTemplate = \"http://localhost/users\";\r\n    final SerializationWriter writerMock = mock(SerializationWriter.class);\r\n    final SerializationWriterFactory factoryMock = mock(SerializationWriterFactory.class);\r\n    when(factoryMock.getSerializationWriter(anyString())).thenReturn(writerMock);\r\n    final RequestAdapter requestAdapterMock = mock(RequestAdapter.class);\r\n    when(requestAdapterMock.getSerializationWriterFactory()).thenReturn(factoryMock);\r\n    requestInfo.setContentFromParsable(requestAdapterMock, \"application/json\", new TestEntity[] { new TestEntity() });\r\n    verify(writerMock, never()).writeObjectValue(any(), any(TestEntity.class));\r\n    verify(writerMock, times(1)).writeCollectionOfObjectValues(any(), any(Iterable.class));\r\n}"
          }
        }
      ]
    },
    {
      "rawMockObjectId": 11,
      "variableName": "factoryMock",
      "variableType": "SerializationWriterFactory",
      "mockedClass": "com.microsoft.kiota.serialization.SerializationWriterFactory",
      "isReuseableMock": false,
      "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
      "mockRole": "mock",
      "classContext": {
        "packageName": "com.microsoft.kiota",
        "filePath": "C:\\Java_projects\\Microsoft\\kiota-java\\components\\abstractions\\src\\test\\java\\com\\microsoft\\kiota\\RequestInformationTest.java"
      },
      "statements": [
        {
          "code": "final SerializationWriterFactory factoryMock = mock(SerializationWriterFactory.class);",
          "line": 210,
          "type": "METHOD_MOCK_CREATION",
          "locate": "Test Case",
          "abstractedStatement": "",
          "isMockRelated": true,
          "isShareable": false,
          "locationContext": {
            "methodName": "SetsParsableContentCollection",
            "methodAnnotations": [
              "Test"
            ],
            "methodRawCode": "@Test\r\nvoid SetsParsableContentCollection() {\r\n    // Arrange as the request builders would\r\n    final RequestInformation requestInfo = new RequestInformation();\r\n    requestInfo.httpMethod = HttpMethod.POST;\r\n    requestInfo.urlTemplate = \"http://localhost/users\";\r\n    final SerializationWriter writerMock = mock(SerializationWriter.class);\r\n    final SerializationWriterFactory factoryMock = mock(SerializationWriterFactory.class);\r\n    when(factoryMock.getSerializationWriter(anyString())).thenReturn(writerMock);\r\n    final RequestAdapter requestAdapterMock = mock(RequestAdapter.class);\r\n    when(requestAdapterMock.getSerializationWriterFactory()).thenReturn(factoryMock);\r\n    requestInfo.setContentFromParsable(requestAdapterMock, \"application/json\", new TestEntity[] { new TestEntity() });\r\n    verify(writerMock, never()).writeObjectValue(any(), any(TestEntity.class));\r\n    verify(writerMock, times(1)).writeCollectionOfObjectValues(any(), any(Iterable.class));\r\n}"
          }
        },
        {
          "code": "when(factoryMock.getSerializationWriter(anyString())).thenReturn(writerMock);",
          "line": 211,
          "type": "STUBBING",
          "locate": "Test Case",
          "abstractedStatement": "when(com.microsoft.kiota.serialization.SerializationWriterFactory.getSerializationWriter(anyString())).thenReturn(com.microsoft.kiota.serialization.SerializationWriter)",
          "isMockRelated": true,
          "isShareable": false,
          "locationContext": {
            "methodName": "SetsParsableContentCollection",
            "methodAnnotations": [
              "Test"
            ],
            "methodRawCode": "@Test\r\nvoid SetsParsableContentCollection() {\r\n    // Arrange as the request builders would\r\n    final RequestInformation requestInfo = new RequestInformation();\r\n    requestInfo.httpMethod = HttpMethod.POST;\r\n    requestInfo.urlTemplate = \"http://localhost/users\";\r\n    final SerializationWriter writerMock = mock(SerializationWriter.class);\r\n    final SerializationWriterFactory factoryMock = mock(SerializationWriterFactory.class);\r\n    when(factoryMock.getSerializationWriter(anyString())).thenReturn(writerMock);\r\n    final RequestAdapter requestAdapterMock = mock(RequestAdapter.class);\r\n    when(requestAdapterMock.getSerializationWriterFactory()).thenReturn(factoryMock);\r\n    requestInfo.setContentFromParsable(requestAdapterMock, \"application/json\", new TestEntity[] { new TestEntity() });\r\n    verify(writerMock, never()).writeObjectValue(any(), any(TestEntity.class));\r\n    verify(writerMock, times(1)).writeCollectionOfObjectValues(any(), any(Iterable.class));\r\n}"
          }
        },
        {
          "code": "when(requestAdapterMock.getSerializationWriterFactory()).thenReturn(factoryMock);",
          "line": 213,
          "type": "REFERENCE",
          "locate": "Test Case",
          "abstractedStatement": "",
          "isMockRelated": false,
          "isShareable": false,
          "locationContext": {
            "methodName": "SetsParsableContentCollection",
            "methodAnnotations": [
              "Test"
            ],
            "methodRawCode": "@Test\r\nvoid SetsParsableContentCollection() {\r\n    // Arrange as the request builders would\r\n    final RequestInformation requestInfo = new RequestInformation();\r\n    requestInfo.httpMethod = HttpMethod.POST;\r\n    requestInfo.urlTemplate = \"http://localhost/users\";\r\n    final SerializationWriter writerMock = mock(SerializationWriter.class);\r\n    final SerializationWriterFactory factoryMock = mock(SerializationWriterFactory.class);\r\n    when(factoryMock.getSerializationWriter(anyString())).thenReturn(writerMock);\r\n    final RequestAdapter requestAdapterMock = mock(RequestAdapter.class);\r\n    when(requestAdapterMock.getSerializationWriterFactory()).thenReturn(factoryMock);\r\n    requestInfo.setContentFromParsable(requestAdapterMock, \"application/json\", new TestEntity[] { new TestEntity() });\r\n    verify(writerMock, never()).writeObjectValue(any(), any(TestEntity.class));\r\n    verify(writerMock, times(1)).writeCollectionOfObjectValues(any(), any(Iterable.class));\r\n}"
          }
        }
      ]
    },
    {
      "rawMockObjectId": 12,
      "variableName": "requestAdapterMock",
      "variableType": "RequestAdapter",
      "mockedClass": "com.microsoft.kiota.RequestAdapter",
      "isReuseableMock": false,
      "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
      "mockRole": "mock",
      "classContext": {
        "packageName": "com.microsoft.kiota",
        "filePath": "C:\\Java_projects\\Microsoft\\kiota-java\\components\\abstractions\\src\\test\\java\\com\\microsoft\\kiota\\RequestInformationTest.java"
      },
      "statements": [
        {
          "code": "final RequestAdapter requestAdapterMock = mock(RequestAdapter.class);",
          "line": 212,
          "type": "METHOD_MOCK_CREATION",
          "locate": "Test Case",
          "abstractedStatement": "",
          "isMockRelated": true,
          "isShareable": false,
          "locationContext": {
            "methodName": "SetsParsableContentCollection",
            "methodAnnotations": [
              "Test"
            ],
            "methodRawCode": "@Test\r\nvoid SetsParsableContentCollection() {\r\n    // Arrange as the request builders would\r\n    final RequestInformation requestInfo = new RequestInformation();\r\n    requestInfo.httpMethod = HttpMethod.POST;\r\n    requestInfo.urlTemplate = \"http://localhost/users\";\r\n    final SerializationWriter writerMock = mock(SerializationWriter.class);\r\n    final SerializationWriterFactory factoryMock = mock(SerializationWriterFactory.class);\r\n    when(factoryMock.getSerializationWriter(anyString())).thenReturn(writerMock);\r\n    final RequestAdapter requestAdapterMock = mock(RequestAdapter.class);\r\n    when(requestAdapterMock.getSerializationWriterFactory()).thenReturn(factoryMock);\r\n    requestInfo.setContentFromParsable(requestAdapterMock, \"application/json\", new TestEntity[] { new TestEntity() });\r\n    verify(writerMock, never()).writeObjectValue(any(), any(TestEntity.class));\r\n    verify(writerMock, times(1)).writeCollectionOfObjectValues(any(), any(Iterable.class));\r\n}"
          }
        },
        {
          "code": "when(requestAdapterMock.getSerializationWriterFactory()).thenReturn(factoryMock);",
          "line": 213,
          "type": "STUBBING",
          "locate": "Test Case",
          "abstractedStatement": "when(com.microsoft.kiota.RequestAdapter.getSerializationWriterFactory()).thenReturn(com.microsoft.kiota.serialization.SerializationWriterFactory)",
          "isMockRelated": true,
          "isShareable": false,
          "locationContext": {
            "methodName": "SetsParsableContentCollection",
            "methodAnnotations": [
              "Test"
            ],
            "methodRawCode": "@Test\r\nvoid SetsParsableContentCollection() {\r\n    // Arrange as the request builders would\r\n    final RequestInformation requestInfo = new RequestInformation();\r\n    requestInfo.httpMethod = HttpMethod.POST;\r\n    requestInfo.urlTemplate = \"http://localhost/users\";\r\n    final SerializationWriter writerMock = mock(SerializationWriter.class);\r\n    final SerializationWriterFactory factoryMock = mock(SerializationWriterFactory.class);\r\n    when(factoryMock.getSerializationWriter(anyString())).thenReturn(writerMock);\r\n    final RequestAdapter requestAdapterMock = mock(RequestAdapter.class);\r\n    when(requestAdapterMock.getSerializationWriterFactory()).thenReturn(factoryMock);\r\n    requestInfo.setContentFromParsable(requestAdapterMock, \"application/json\", new TestEntity[] { new TestEntity() });\r\n    verify(writerMock, never()).writeObjectValue(any(), any(TestEntity.class));\r\n    verify(writerMock, times(1)).writeCollectionOfObjectValues(any(), any(Iterable.class));\r\n}"
          }
        },
        {
          "code": "requestInfo.setContentFromParsable(requestAdapterMock, \"application/json\", new TestEntity[] { new TestEntity() });",
          "line": 214,
          "type": "REFERENCE",
          "locate": "Test Case",
          "abstractedStatement": "",
          "isMockRelated": false,
          "isShareable": false,
          "locationContext": {
            "methodName": "SetsParsableContentCollection",
            "methodAnnotations": [
              "Test"
            ],
            "methodRawCode": "@Test\r\nvoid SetsParsableContentCollection() {\r\n    // Arrange as the request builders would\r\n    final RequestInformation requestInfo = new RequestInformation();\r\n    requestInfo.httpMethod = HttpMethod.POST;\r\n    requestInfo.urlTemplate = \"http://localhost/users\";\r\n    final SerializationWriter writerMock = mock(SerializationWriter.class);\r\n    final SerializationWriterFactory factoryMock = mock(SerializationWriterFactory.class);\r\n    when(factoryMock.getSerializationWriter(anyString())).thenReturn(writerMock);\r\n    final RequestAdapter requestAdapterMock = mock(RequestAdapter.class);\r\n    when(requestAdapterMock.getSerializationWriterFactory()).thenReturn(factoryMock);\r\n    requestInfo.setContentFromParsable(requestAdapterMock, \"application/json\", new TestEntity[] { new TestEntity() });\r\n    verify(writerMock, never()).writeObjectValue(any(), any(TestEntity.class));\r\n    verify(writerMock, times(1)).writeCollectionOfObjectValues(any(), any(Iterable.class));\r\n}"
          }
        }
      ]
    },
    {
      "rawMockObjectId": 13,
      "variableName": "writerMock",
      "variableType": "SerializationWriter",
      "mockedClass": "com.microsoft.kiota.serialization.SerializationWriter",
      "isReuseableMock": false,
      "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— None\n\nVerification:\n— Test Case",
      "mockRole": "mock",
      "classContext": {
        "packageName": "com.microsoft.kiota",
        "filePath": "C:\\Java_projects\\Microsoft\\kiota-java\\components\\abstractions\\src\\test\\java\\com\\microsoft\\kiota\\RequestInformationTest.java"
      },
      "statements": [
        {
          "code": "final SerializationWriter writerMock = mock(SerializationWriter.class);",
          "line": 227,
          "type": "METHOD_MOCK_CREATION",
          "locate": "Test Case",
          "abstractedStatement": "",
          "isMockRelated": true,
          "isShareable": false,
          "locationContext": {
            "methodName": "SetsScalarContentCollection",
            "methodAnnotations": [
              "Test"
            ],
            "methodRawCode": "@Test\r\nvoid SetsScalarContentCollection() {\r\n    // Arrange as the request builders would\r\n    final RequestInformation requestInfo = new RequestInformation();\r\n    requestInfo.httpMethod = HttpMethod.POST;\r\n    requestInfo.urlTemplate = \"http://localhost/users\";\r\n    final SerializationWriter writerMock = mock(SerializationWriter.class);\r\n    final SerializationWriterFactory factoryMock = mock(SerializationWriterFactory.class);\r\n    when(factoryMock.getSerializationWriter(anyString())).thenReturn(writerMock);\r\n    final RequestAdapter requestAdapterMock = mock(RequestAdapter.class);\r\n    when(requestAdapterMock.getSerializationWriterFactory()).thenReturn(factoryMock);\r\n    requestInfo.setContentFromScalarCollection(requestAdapterMock, \"application/json\", new String[] { \"foo\" });\r\n    verify(writerMock, never()).writeStringValue(any(), anyString());\r\n    verify(writerMock, times(1)).writeCollectionOfPrimitiveValues(any(), any(Iterable.class));\r\n}"
          }
        },
        {
          "code": "when(factoryMock.getSerializationWriter(anyString())).thenReturn(writerMock);",
          "line": 229,
          "type": "REFERENCE",
          "locate": "Test Case",
          "abstractedStatement": "",
          "isMockRelated": false,
          "isShareable": false,
          "locationContext": {
            "methodName": "SetsScalarContentCollection",
            "methodAnnotations": [
              "Test"
            ],
            "methodRawCode": "@Test\r\nvoid SetsScalarContentCollection() {\r\n    // Arrange as the request builders would\r\n    final RequestInformation requestInfo = new RequestInformation();\r\n    requestInfo.httpMethod = HttpMethod.POST;\r\n    requestInfo.urlTemplate = \"http://localhost/users\";\r\n    final SerializationWriter writerMock = mock(SerializationWriter.class);\r\n    final SerializationWriterFactory factoryMock = mock(SerializationWriterFactory.class);\r\n    when(factoryMock.getSerializationWriter(anyString())).thenReturn(writerMock);\r\n    final RequestAdapter requestAdapterMock = mock(RequestAdapter.class);\r\n    when(requestAdapterMock.getSerializationWriterFactory()).thenReturn(factoryMock);\r\n    requestInfo.setContentFromScalarCollection(requestAdapterMock, \"application/json\", new String[] { \"foo\" });\r\n    verify(writerMock, never()).writeStringValue(any(), anyString());\r\n    verify(writerMock, times(1)).writeCollectionOfPrimitiveValues(any(), any(Iterable.class));\r\n}"
          }
        },
        {
          "code": "verify(writerMock, never()).writeStringValue(any(), anyString());",
          "line": 235,
          "type": "VERIFICATION",
          "locate": "Test Case",
          "abstractedStatement": "",
          "isMockRelated": true,
          "isShareable": false,
          "locationContext": {
            "methodName": "SetsScalarContentCollection",
            "methodAnnotations": [
              "Test"
            ],
            "methodRawCode": "@Test\r\nvoid SetsScalarContentCollection() {\r\n    // Arrange as the request builders would\r\n    final RequestInformation requestInfo = new RequestInformation();\r\n    requestInfo.httpMethod = HttpMethod.POST;\r\n    requestInfo.urlTemplate = \"http://localhost/users\";\r\n    final SerializationWriter writerMock = mock(SerializationWriter.class);\r\n    final SerializationWriterFactory factoryMock = mock(SerializationWriterFactory.class);\r\n    when(factoryMock.getSerializationWriter(anyString())).thenReturn(writerMock);\r\n    final RequestAdapter requestAdapterMock = mock(RequestAdapter.class);\r\n    when(requestAdapterMock.getSerializationWriterFactory()).thenReturn(factoryMock);\r\n    requestInfo.setContentFromScalarCollection(requestAdapterMock, \"application/json\", new String[] { \"foo\" });\r\n    verify(writerMock, never()).writeStringValue(any(), anyString());\r\n    verify(writerMock, times(1)).writeCollectionOfPrimitiveValues(any(), any(Iterable.class));\r\n}"
          }
        },
        {
          "code": "verify(writerMock, times(1)).writeCollectionOfPrimitiveValues(any(), any(Iterable.class));",
          "line": 236,
          "type": "VERIFICATION",
          "locate": "Test Case",
          "abstractedStatement": "",
          "isMockRelated": true,
          "isShareable": false,
          "locationContext": {
            "methodName": "SetsScalarContentCollection",
            "methodAnnotations": [
              "Test"
            ],
            "methodRawCode": "@Test\r\nvoid SetsScalarContentCollection() {\r\n    // Arrange as the request builders would\r\n    final RequestInformation requestInfo = new RequestInformation();\r\n    requestInfo.httpMethod = HttpMethod.POST;\r\n    requestInfo.urlTemplate = \"http://localhost/users\";\r\n    final SerializationWriter writerMock = mock(SerializationWriter.class);\r\n    final SerializationWriterFactory factoryMock = mock(SerializationWriterFactory.class);\r\n    when(factoryMock.getSerializationWriter(anyString())).thenReturn(writerMock);\r\n    final RequestAdapter requestAdapterMock = mock(RequestAdapter.class);\r\n    when(requestAdapterMock.getSerializationWriterFactory()).thenReturn(factoryMock);\r\n    requestInfo.setContentFromScalarCollection(requestAdapterMock, \"application/json\", new String[] { \"foo\" });\r\n    verify(writerMock, never()).writeStringValue(any(), anyString());\r\n    verify(writerMock, times(1)).writeCollectionOfPrimitiveValues(any(), any(Iterable.class));\r\n}"
          }
        }
      ]
    },
    {
      "rawMockObjectId": 14,
      "variableName": "factoryMock",
      "variableType": "SerializationWriterFactory",
      "mockedClass": "com.microsoft.kiota.serialization.SerializationWriterFactory",
      "isReuseableMock": false,
      "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
      "mockRole": "mock",
      "classContext": {
        "packageName": "com.microsoft.kiota",
        "filePath": "C:\\Java_projects\\Microsoft\\kiota-java\\components\\abstractions\\src\\test\\java\\com\\microsoft\\kiota\\RequestInformationTest.java"
      },
      "statements": [
        {
          "code": "final SerializationWriterFactory factoryMock = mock(SerializationWriterFactory.class);",
          "line": 228,
          "type": "METHOD_MOCK_CREATION",
          "locate": "Test Case",
          "abstractedStatement": "",
          "isMockRelated": true,
          "isShareable": false,
          "locationContext": {
            "methodName": "SetsScalarContentCollection",
            "methodAnnotations": [
              "Test"
            ],
            "methodRawCode": "@Test\r\nvoid SetsScalarContentCollection() {\r\n    // Arrange as the request builders would\r\n    final RequestInformation requestInfo = new RequestInformation();\r\n    requestInfo.httpMethod = HttpMethod.POST;\r\n    requestInfo.urlTemplate = \"http://localhost/users\";\r\n    final SerializationWriter writerMock = mock(SerializationWriter.class);\r\n    final SerializationWriterFactory factoryMock = mock(SerializationWriterFactory.class);\r\n    when(factoryMock.getSerializationWriter(anyString())).thenReturn(writerMock);\r\n    final RequestAdapter requestAdapterMock = mock(RequestAdapter.class);\r\n    when(requestAdapterMock.getSerializationWriterFactory()).thenReturn(factoryMock);\r\n    requestInfo.setContentFromScalarCollection(requestAdapterMock, \"application/json\", new String[] { \"foo\" });\r\n    verify(writerMock, never()).writeStringValue(any(), anyString());\r\n    verify(writerMock, times(1)).writeCollectionOfPrimitiveValues(any(), any(Iterable.class));\r\n}"
          }
        },
        {
          "code": "when(factoryMock.getSerializationWriter(anyString())).thenReturn(writerMock);",
          "line": 229,
          "type": "STUBBING",
          "locate": "Test Case",
          "abstractedStatement": "when(com.microsoft.kiota.serialization.SerializationWriterFactory.getSerializationWriter(anyString())).thenReturn(com.microsoft.kiota.serialization.SerializationWriter)",
          "isMockRelated": true,
          "isShareable": false,
          "locationContext": {
            "methodName": "SetsScalarContentCollection",
            "methodAnnotations": [
              "Test"
            ],
            "methodRawCode": "@Test\r\nvoid SetsScalarContentCollection() {\r\n    // Arrange as the request builders would\r\n    final RequestInformation requestInfo = new RequestInformation();\r\n    requestInfo.httpMethod = HttpMethod.POST;\r\n    requestInfo.urlTemplate = \"http://localhost/users\";\r\n    final SerializationWriter writerMock = mock(SerializationWriter.class);\r\n    final SerializationWriterFactory factoryMock = mock(SerializationWriterFactory.class);\r\n    when(factoryMock.getSerializationWriter(anyString())).thenReturn(writerMock);\r\n    final RequestAdapter requestAdapterMock = mock(RequestAdapter.class);\r\n    when(requestAdapterMock.getSerializationWriterFactory()).thenReturn(factoryMock);\r\n    requestInfo.setContentFromScalarCollection(requestAdapterMock, \"application/json\", new String[] { \"foo\" });\r\n    verify(writerMock, never()).writeStringValue(any(), anyString());\r\n    verify(writerMock, times(1)).writeCollectionOfPrimitiveValues(any(), any(Iterable.class));\r\n}"
          }
        },
        {
          "code": "when(requestAdapterMock.getSerializationWriterFactory()).thenReturn(factoryMock);",
          "line": 231,
          "type": "REFERENCE",
          "locate": "Test Case",
          "abstractedStatement": "",
          "isMockRelated": false,
          "isShareable": false,
          "locationContext": {
            "methodName": "SetsScalarContentCollection",
            "methodAnnotations": [
              "Test"
            ],
            "methodRawCode": "@Test\r\nvoid SetsScalarContentCollection() {\r\n    // Arrange as the request builders would\r\n    final RequestInformation requestInfo = new RequestInformation();\r\n    requestInfo.httpMethod = HttpMethod.POST;\r\n    requestInfo.urlTemplate = \"http://localhost/users\";\r\n    final SerializationWriter writerMock = mock(SerializationWriter.class);\r\n    final SerializationWriterFactory factoryMock = mock(SerializationWriterFactory.class);\r\n    when(factoryMock.getSerializationWriter(anyString())).thenReturn(writerMock);\r\n    final RequestAdapter requestAdapterMock = mock(RequestAdapter.class);\r\n    when(requestAdapterMock.getSerializationWriterFactory()).thenReturn(factoryMock);\r\n    requestInfo.setContentFromScalarCollection(requestAdapterMock, \"application/json\", new String[] { \"foo\" });\r\n    verify(writerMock, never()).writeStringValue(any(), anyString());\r\n    verify(writerMock, times(1)).writeCollectionOfPrimitiveValues(any(), any(Iterable.class));\r\n}"
          }
        }
      ]
    },
    {
      "rawMockObjectId": 15,
      "variableName": "requestAdapterMock",
      "variableType": "RequestAdapter",
      "mockedClass": "com.microsoft.kiota.RequestAdapter",
      "isReuseableMock": false,
      "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
      "mockRole": "mock",
      "classContext": {
        "packageName": "com.microsoft.kiota",
        "filePath": "C:\\Java_projects\\Microsoft\\kiota-java\\components\\abstractions\\src\\test\\java\\com\\microsoft\\kiota\\RequestInformationTest.java"
      },
      "statements": [
        {
          "code": "final RequestAdapter requestAdapterMock = mock(RequestAdapter.class);",
          "line": 230,
          "type": "METHOD_MOCK_CREATION",
          "locate": "Test Case",
          "abstractedStatement": "",
          "isMockRelated": true,
          "isShareable": false,
          "locationContext": {
            "methodName": "SetsScalarContentCollection",
            "methodAnnotations": [
              "Test"
            ],
            "methodRawCode": "@Test\r\nvoid SetsScalarContentCollection() {\r\n    // Arrange as the request builders would\r\n    final RequestInformation requestInfo = new RequestInformation();\r\n    requestInfo.httpMethod = HttpMethod.POST;\r\n    requestInfo.urlTemplate = \"http://localhost/users\";\r\n    final SerializationWriter writerMock = mock(SerializationWriter.class);\r\n    final SerializationWriterFactory factoryMock = mock(SerializationWriterFactory.class);\r\n    when(factoryMock.getSerializationWriter(anyString())).thenReturn(writerMock);\r\n    final RequestAdapter requestAdapterMock = mock(RequestAdapter.class);\r\n    when(requestAdapterMock.getSerializationWriterFactory()).thenReturn(factoryMock);\r\n    requestInfo.setContentFromScalarCollection(requestAdapterMock, \"application/json\", new String[] { \"foo\" });\r\n    verify(writerMock, never()).writeStringValue(any(), anyString());\r\n    verify(writerMock, times(1)).writeCollectionOfPrimitiveValues(any(), any(Iterable.class));\r\n}"
          }
        },
        {
          "code": "when(requestAdapterMock.getSerializationWriterFactory()).thenReturn(factoryMock);",
          "line": 231,
          "type": "STUBBING",
          "locate": "Test Case",
          "abstractedStatement": "when(com.microsoft.kiota.RequestAdapter.getSerializationWriterFactory()).thenReturn(com.microsoft.kiota.serialization.SerializationWriterFactory)",
          "isMockRelated": true,
          "isShareable": false,
          "locationContext": {
            "methodName": "SetsScalarContentCollection",
            "methodAnnotations": [
              "Test"
            ],
            "methodRawCode": "@Test\r\nvoid SetsScalarContentCollection() {\r\n    // Arrange as the request builders would\r\n    final RequestInformation requestInfo = new RequestInformation();\r\n    requestInfo.httpMethod = HttpMethod.POST;\r\n    requestInfo.urlTemplate = \"http://localhost/users\";\r\n    final SerializationWriter writerMock = mock(SerializationWriter.class);\r\n    final SerializationWriterFactory factoryMock = mock(SerializationWriterFactory.class);\r\n    when(factoryMock.getSerializationWriter(anyString())).thenReturn(writerMock);\r\n    final RequestAdapter requestAdapterMock = mock(RequestAdapter.class);\r\n    when(requestAdapterMock.getSerializationWriterFactory()).thenReturn(factoryMock);\r\n    requestInfo.setContentFromScalarCollection(requestAdapterMock, \"application/json\", new String[] { \"foo\" });\r\n    verify(writerMock, never()).writeStringValue(any(), anyString());\r\n    verify(writerMock, times(1)).writeCollectionOfPrimitiveValues(any(), any(Iterable.class));\r\n}"
          }
        },
        {
          "code": "requestInfo.setContentFromScalarCollection(requestAdapterMock, \"application/json\", new String[] { \"foo\" });",
          "line": 232,
          "type": "REFERENCE",
          "locate": "Test Case",
          "abstractedStatement": "",
          "isMockRelated": false,
          "isShareable": false,
          "locationContext": {
            "methodName": "SetsScalarContentCollection",
            "methodAnnotations": [
              "Test"
            ],
            "methodRawCode": "@Test\r\nvoid SetsScalarContentCollection() {\r\n    // Arrange as the request builders would\r\n    final RequestInformation requestInfo = new RequestInformation();\r\n    requestInfo.httpMethod = HttpMethod.POST;\r\n    requestInfo.urlTemplate = \"http://localhost/users\";\r\n    final SerializationWriter writerMock = mock(SerializationWriter.class);\r\n    final SerializationWriterFactory factoryMock = mock(SerializationWriterFactory.class);\r\n    when(factoryMock.getSerializationWriter(anyString())).thenReturn(writerMock);\r\n    final RequestAdapter requestAdapterMock = mock(RequestAdapter.class);\r\n    when(requestAdapterMock.getSerializationWriterFactory()).thenReturn(factoryMock);\r\n    requestInfo.setContentFromScalarCollection(requestAdapterMock, \"application/json\", new String[] { \"foo\" });\r\n    verify(writerMock, never()).writeStringValue(any(), anyString());\r\n    verify(writerMock, times(1)).writeCollectionOfPrimitiveValues(any(), any(Iterable.class));\r\n}"
          }
        }
      ]
    },
    {
      "rawMockObjectId": 16,
      "variableName": "writerMock",
      "variableType": "SerializationWriter",
      "mockedClass": "com.microsoft.kiota.serialization.SerializationWriter",
      "isReuseableMock": false,
      "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— None\n\nVerification:\n— Test Case",
      "mockRole": "mock",
      "classContext": {
        "packageName": "com.microsoft.kiota",
        "filePath": "C:\\Java_projects\\Microsoft\\kiota-java\\components\\abstractions\\src\\test\\java\\com\\microsoft\\kiota\\RequestInformationTest.java"
      },
      "statements": [
        {
          "code": "final SerializationWriter writerMock = mock(SerializationWriter.class);",
          "line": 245,
          "type": "METHOD_MOCK_CREATION",
          "locate": "Test Case",
          "abstractedStatement": "",
          "isMockRelated": true,
          "isShareable": false,
          "locationContext": {
            "methodName": "SetsScalarContent",
            "methodAnnotations": [
              "Test"
            ],
            "methodRawCode": "@Test\r\nvoid SetsScalarContent() {\r\n    // Arrange as the request builders would\r\n    final RequestInformation requestInfo = new RequestInformation();\r\n    requestInfo.httpMethod = HttpMethod.POST;\r\n    requestInfo.urlTemplate = \"http://localhost/users\";\r\n    final SerializationWriter writerMock = mock(SerializationWriter.class);\r\n    final SerializationWriterFactory factoryMock = mock(SerializationWriterFactory.class);\r\n    when(factoryMock.getSerializationWriter(anyString())).thenReturn(writerMock);\r\n    final RequestAdapter requestAdapterMock = mock(RequestAdapter.class);\r\n    when(requestAdapterMock.getSerializationWriterFactory()).thenReturn(factoryMock);\r\n    requestInfo.setContentFromScalar(requestAdapterMock, \"application/json\", \"foo\");\r\n    verify(writerMock, times(1)).writeStringValue(any(), anyString());\r\n    verify(writerMock, never()).writeCollectionOfPrimitiveValues(any(), any(Iterable.class));\r\n}"
          }
        },
        {
          "code": "when(factoryMock.getSerializationWriter(anyString())).thenReturn(writerMock);",
          "line": 247,
          "type": "REFERENCE",
          "locate": "Test Case",
          "abstractedStatement": "",
          "isMockRelated": false,
          "isShareable": false,
          "locationContext": {
            "methodName": "SetsScalarContent",
            "methodAnnotations": [
              "Test"
            ],
            "methodRawCode": "@Test\r\nvoid SetsScalarContent() {\r\n    // Arrange as the request builders would\r\n    final RequestInformation requestInfo = new RequestInformation();\r\n    requestInfo.httpMethod = HttpMethod.POST;\r\n    requestInfo.urlTemplate = \"http://localhost/users\";\r\n    final SerializationWriter writerMock = mock(SerializationWriter.class);\r\n    final SerializationWriterFactory factoryMock = mock(SerializationWriterFactory.class);\r\n    when(factoryMock.getSerializationWriter(anyString())).thenReturn(writerMock);\r\n    final RequestAdapter requestAdapterMock = mock(RequestAdapter.class);\r\n    when(requestAdapterMock.getSerializationWriterFactory()).thenReturn(factoryMock);\r\n    requestInfo.setContentFromScalar(requestAdapterMock, \"application/json\", \"foo\");\r\n    verify(writerMock, times(1)).writeStringValue(any(), anyString());\r\n    verify(writerMock, never()).writeCollectionOfPrimitiveValues(any(), any(Iterable.class));\r\n}"
          }
        },
        {
          "code": "verify(writerMock, times(1)).writeStringValue(any(), anyString());",
          "line": 252,
          "type": "VERIFICATION",
          "locate": "Test Case",
          "abstractedStatement": "",
          "isMockRelated": true,
          "isShareable": false,
          "locationContext": {
            "methodName": "SetsScalarContent",
            "methodAnnotations": [
              "Test"
            ],
            "methodRawCode": "@Test\r\nvoid SetsScalarContent() {\r\n    // Arrange as the request builders would\r\n    final RequestInformation requestInfo = new RequestInformation();\r\n    requestInfo.httpMethod = HttpMethod.POST;\r\n    requestInfo.urlTemplate = \"http://localhost/users\";\r\n    final SerializationWriter writerMock = mock(SerializationWriter.class);\r\n    final SerializationWriterFactory factoryMock = mock(SerializationWriterFactory.class);\r\n    when(factoryMock.getSerializationWriter(anyString())).thenReturn(writerMock);\r\n    final RequestAdapter requestAdapterMock = mock(RequestAdapter.class);\r\n    when(requestAdapterMock.getSerializationWriterFactory()).thenReturn(factoryMock);\r\n    requestInfo.setContentFromScalar(requestAdapterMock, \"application/json\", \"foo\");\r\n    verify(writerMock, times(1)).writeStringValue(any(), anyString());\r\n    verify(writerMock, never()).writeCollectionOfPrimitiveValues(any(), any(Iterable.class));\r\n}"
          }
        },
        {
          "code": "verify(writerMock, never()).writeCollectionOfPrimitiveValues(any(), any(Iterable.class));",
          "line": 253,
          "type": "VERIFICATION",
          "locate": "Test Case",
          "abstractedStatement": "",
          "isMockRelated": true,
          "isShareable": false,
          "locationContext": {
            "methodName": "SetsScalarContent",
            "methodAnnotations": [
              "Test"
            ],
            "methodRawCode": "@Test\r\nvoid SetsScalarContent() {\r\n    // Arrange as the request builders would\r\n    final RequestInformation requestInfo = new RequestInformation();\r\n    requestInfo.httpMethod = HttpMethod.POST;\r\n    requestInfo.urlTemplate = \"http://localhost/users\";\r\n    final SerializationWriter writerMock = mock(SerializationWriter.class);\r\n    final SerializationWriterFactory factoryMock = mock(SerializationWriterFactory.class);\r\n    when(factoryMock.getSerializationWriter(anyString())).thenReturn(writerMock);\r\n    final RequestAdapter requestAdapterMock = mock(RequestAdapter.class);\r\n    when(requestAdapterMock.getSerializationWriterFactory()).thenReturn(factoryMock);\r\n    requestInfo.setContentFromScalar(requestAdapterMock, \"application/json\", \"foo\");\r\n    verify(writerMock, times(1)).writeStringValue(any(), anyString());\r\n    verify(writerMock, never()).writeCollectionOfPrimitiveValues(any(), any(Iterable.class));\r\n}"
          }
        }
      ]
    },
    {
      "rawMockObjectId": 17,
      "variableName": "factoryMock",
      "variableType": "SerializationWriterFactory",
      "mockedClass": "com.microsoft.kiota.serialization.SerializationWriterFactory",
      "isReuseableMock": false,
      "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
      "mockRole": "mock",
      "classContext": {
        "packageName": "com.microsoft.kiota",
        "filePath": "C:\\Java_projects\\Microsoft\\kiota-java\\components\\abstractions\\src\\test\\java\\com\\microsoft\\kiota\\RequestInformationTest.java"
      },
      "statements": [
        {
          "code": "final SerializationWriterFactory factoryMock = mock(SerializationWriterFactory.class);",
          "line": 246,
          "type": "METHOD_MOCK_CREATION",
          "locate": "Test Case",
          "abstractedStatement": "",
          "isMockRelated": true,
          "isShareable": false,
          "locationContext": {
            "methodName": "SetsScalarContent",
            "methodAnnotations": [
              "Test"
            ],
            "methodRawCode": "@Test\r\nvoid SetsScalarContent() {\r\n    // Arrange as the request builders would\r\n    final RequestInformation requestInfo = new RequestInformation();\r\n    requestInfo.httpMethod = HttpMethod.POST;\r\n    requestInfo.urlTemplate = \"http://localhost/users\";\r\n    final SerializationWriter writerMock = mock(SerializationWriter.class);\r\n    final SerializationWriterFactory factoryMock = mock(SerializationWriterFactory.class);\r\n    when(factoryMock.getSerializationWriter(anyString())).thenReturn(writerMock);\r\n    final RequestAdapter requestAdapterMock = mock(RequestAdapter.class);\r\n    when(requestAdapterMock.getSerializationWriterFactory()).thenReturn(factoryMock);\r\n    requestInfo.setContentFromScalar(requestAdapterMock, \"application/json\", \"foo\");\r\n    verify(writerMock, times(1)).writeStringValue(any(), anyString());\r\n    verify(writerMock, never()).writeCollectionOfPrimitiveValues(any(), any(Iterable.class));\r\n}"
          }
        },
        {
          "code": "when(factoryMock.getSerializationWriter(anyString())).thenReturn(writerMock);",
          "line": 247,
          "type": "STUBBING",
          "locate": "Test Case",
          "abstractedStatement": "when(com.microsoft.kiota.serialization.SerializationWriterFactory.getSerializationWriter(anyString())).thenReturn(com.microsoft.kiota.serialization.SerializationWriter)",
          "isMockRelated": true,
          "isShareable": false,
          "locationContext": {
            "methodName": "SetsScalarContent",
            "methodAnnotations": [
              "Test"
            ],
            "methodRawCode": "@Test\r\nvoid SetsScalarContent() {\r\n    // Arrange as the request builders would\r\n    final RequestInformation requestInfo = new RequestInformation();\r\n    requestInfo.httpMethod = HttpMethod.POST;\r\n    requestInfo.urlTemplate = \"http://localhost/users\";\r\n    final SerializationWriter writerMock = mock(SerializationWriter.class);\r\n    final SerializationWriterFactory factoryMock = mock(SerializationWriterFactory.class);\r\n    when(factoryMock.getSerializationWriter(anyString())).thenReturn(writerMock);\r\n    final RequestAdapter requestAdapterMock = mock(RequestAdapter.class);\r\n    when(requestAdapterMock.getSerializationWriterFactory()).thenReturn(factoryMock);\r\n    requestInfo.setContentFromScalar(requestAdapterMock, \"application/json\", \"foo\");\r\n    verify(writerMock, times(1)).writeStringValue(any(), anyString());\r\n    verify(writerMock, never()).writeCollectionOfPrimitiveValues(any(), any(Iterable.class));\r\n}"
          }
        },
        {
          "code": "when(requestAdapterMock.getSerializationWriterFactory()).thenReturn(factoryMock);",
          "line": 249,
          "type": "REFERENCE",
          "locate": "Test Case",
          "abstractedStatement": "",
          "isMockRelated": false,
          "isShareable": false,
          "locationContext": {
            "methodName": "SetsScalarContent",
            "methodAnnotations": [
              "Test"
            ],
            "methodRawCode": "@Test\r\nvoid SetsScalarContent() {\r\n    // Arrange as the request builders would\r\n    final RequestInformation requestInfo = new RequestInformation();\r\n    requestInfo.httpMethod = HttpMethod.POST;\r\n    requestInfo.urlTemplate = \"http://localhost/users\";\r\n    final SerializationWriter writerMock = mock(SerializationWriter.class);\r\n    final SerializationWriterFactory factoryMock = mock(SerializationWriterFactory.class);\r\n    when(factoryMock.getSerializationWriter(anyString())).thenReturn(writerMock);\r\n    final RequestAdapter requestAdapterMock = mock(RequestAdapter.class);\r\n    when(requestAdapterMock.getSerializationWriterFactory()).thenReturn(factoryMock);\r\n    requestInfo.setContentFromScalar(requestAdapterMock, \"application/json\", \"foo\");\r\n    verify(writerMock, times(1)).writeStringValue(any(), anyString());\r\n    verify(writerMock, never()).writeCollectionOfPrimitiveValues(any(), any(Iterable.class));\r\n}"
          }
        }
      ]
    },
    {
      "rawMockObjectId": 18,
      "variableName": "requestAdapterMock",
      "variableType": "RequestAdapter",
      "mockedClass": "com.microsoft.kiota.RequestAdapter",
      "isReuseableMock": false,
      "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
      "mockRole": "mock",
      "classContext": {
        "packageName": "com.microsoft.kiota",
        "filePath": "C:\\Java_projects\\Microsoft\\kiota-java\\components\\abstractions\\src\\test\\java\\com\\microsoft\\kiota\\RequestInformationTest.java"
      },
      "statements": [
        {
          "code": "final RequestAdapter requestAdapterMock = mock(RequestAdapter.class);",
          "line": 248,
          "type": "METHOD_MOCK_CREATION",
          "locate": "Test Case",
          "abstractedStatement": "",
          "isMockRelated": true,
          "isShareable": false,
          "locationContext": {
            "methodName": "SetsScalarContent",
            "methodAnnotations": [
              "Test"
            ],
            "methodRawCode": "@Test\r\nvoid SetsScalarContent() {\r\n    // Arrange as the request builders would\r\n    final RequestInformation requestInfo = new RequestInformation();\r\n    requestInfo.httpMethod = HttpMethod.POST;\r\n    requestInfo.urlTemplate = \"http://localhost/users\";\r\n    final SerializationWriter writerMock = mock(SerializationWriter.class);\r\n    final SerializationWriterFactory factoryMock = mock(SerializationWriterFactory.class);\r\n    when(factoryMock.getSerializationWriter(anyString())).thenReturn(writerMock);\r\n    final RequestAdapter requestAdapterMock = mock(RequestAdapter.class);\r\n    when(requestAdapterMock.getSerializationWriterFactory()).thenReturn(factoryMock);\r\n    requestInfo.setContentFromScalar(requestAdapterMock, \"application/json\", \"foo\");\r\n    verify(writerMock, times(1)).writeStringValue(any(), anyString());\r\n    verify(writerMock, never()).writeCollectionOfPrimitiveValues(any(), any(Iterable.class));\r\n}"
          }
        },
        {
          "code": "when(requestAdapterMock.getSerializationWriterFactory()).thenReturn(factoryMock);",
          "line": 249,
          "type": "STUBBING",
          "locate": "Test Case",
          "abstractedStatement": "when(com.microsoft.kiota.RequestAdapter.getSerializationWriterFactory()).thenReturn(com.microsoft.kiota.serialization.SerializationWriterFactory)",
          "isMockRelated": true,
          "isShareable": false,
          "locationContext": {
            "methodName": "SetsScalarContent",
            "methodAnnotations": [
              "Test"
            ],
            "methodRawCode": "@Test\r\nvoid SetsScalarContent() {\r\n    // Arrange as the request builders would\r\n    final RequestInformation requestInfo = new RequestInformation();\r\n    requestInfo.httpMethod = HttpMethod.POST;\r\n    requestInfo.urlTemplate = \"http://localhost/users\";\r\n    final SerializationWriter writerMock = mock(SerializationWriter.class);\r\n    final SerializationWriterFactory factoryMock = mock(SerializationWriterFactory.class);\r\n    when(factoryMock.getSerializationWriter(anyString())).thenReturn(writerMock);\r\n    final RequestAdapter requestAdapterMock = mock(RequestAdapter.class);\r\n    when(requestAdapterMock.getSerializationWriterFactory()).thenReturn(factoryMock);\r\n    requestInfo.setContentFromScalar(requestAdapterMock, \"application/json\", \"foo\");\r\n    verify(writerMock, times(1)).writeStringValue(any(), anyString());\r\n    verify(writerMock, never()).writeCollectionOfPrimitiveValues(any(), any(Iterable.class));\r\n}"
          }
        },
        {
          "code": "requestInfo.setContentFromScalar(requestAdapterMock, \"application/json\", \"foo\");",
          "line": 250,
          "type": "REFERENCE",
          "locate": "Test Case",
          "abstractedStatement": "",
          "isMockRelated": false,
          "isShareable": false,
          "locationContext": {
            "methodName": "SetsScalarContent",
            "methodAnnotations": [
              "Test"
            ],
            "methodRawCode": "@Test\r\nvoid SetsScalarContent() {\r\n    // Arrange as the request builders would\r\n    final RequestInformation requestInfo = new RequestInformation();\r\n    requestInfo.httpMethod = HttpMethod.POST;\r\n    requestInfo.urlTemplate = \"http://localhost/users\";\r\n    final SerializationWriter writerMock = mock(SerializationWriter.class);\r\n    final SerializationWriterFactory factoryMock = mock(SerializationWriterFactory.class);\r\n    when(factoryMock.getSerializationWriter(anyString())).thenReturn(writerMock);\r\n    final RequestAdapter requestAdapterMock = mock(RequestAdapter.class);\r\n    when(requestAdapterMock.getSerializationWriterFactory()).thenReturn(factoryMock);\r\n    requestInfo.setContentFromScalar(requestAdapterMock, \"application/json\", \"foo\");\r\n    verify(writerMock, times(1)).writeStringValue(any(), anyString());\r\n    verify(writerMock, never()).writeCollectionOfPrimitiveValues(any(), any(Iterable.class));\r\n}"
          }
        }
      ]
    },
    {
      "rawMockObjectId": 19,
      "variableName": "writerMock",
      "variableType": "SerializationWriter",
      "mockedClass": "com.microsoft.kiota.serialization.SerializationWriter",
      "isReuseableMock": false,
      "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— None\n\nVerification:\n— None",
      "mockRole": "mock",
      "classContext": {
        "packageName": "com.microsoft.kiota",
        "filePath": "C:\\Java_projects\\Microsoft\\kiota-java\\components\\abstractions\\src\\test\\java\\com\\microsoft\\kiota\\RequestInformationTest.java"
      },
      "statements": [
        {
          "code": "final SerializationWriter writerMock = mock(SerializationWriter.class);",
          "line": 262,
          "type": "METHOD_MOCK_CREATION",
          "locate": "Test Case",
          "abstractedStatement": "",
          "isMockRelated": true,
          "isShareable": false,
          "locationContext": {
            "methodName": "SetsBoundaryOnMultipartBody",
            "methodAnnotations": [
              "Test"
            ],
            "methodRawCode": "@Test\r\nvoid SetsBoundaryOnMultipartBody() {\r\n    final RequestInformation requestInfo = new RequestInformation();\r\n    requestInfo.httpMethod = HttpMethod.POST;\r\n    requestInfo.urlTemplate = \"http://localhost/{URITemplate}/ParameterMapping?IsCaseSensitive={IsCaseSensitive}\";\r\n    final SerializationWriter writerMock = mock(SerializationWriter.class);\r\n    final SerializationWriterFactory factoryMock = mock(SerializationWriterFactory.class);\r\n    when(factoryMock.getSerializationWriter(anyString())).thenReturn(writerMock);\r\n    final RequestAdapter requestAdapterMock = mock(RequestAdapter.class);\r\n    when(requestAdapterMock.getSerializationWriterFactory()).thenReturn(factoryMock);\r\n    final MultipartBody multipartBody = new MultipartBody();\r\n    multipartBody.requestAdapter = requestAdapterMock;\r\n    requestInfo.setContentFromParsable(requestAdapterMock, \"multipart/form-data\", multipartBody);\r\n    assertNotNull(multipartBody.getBoundary());\r\n    assertFalse(multipartBody.getBoundary().isEmpty());\r\n    assertEquals(\"multipart/form-data; boundary=\" + multipartBody.getBoundary(), requestInfo.headers.get(\"Content-Type\").toArray()[0]);\r\n}"
          }
        },
        {
          "code": "when(factoryMock.getSerializationWriter(anyString())).thenReturn(writerMock);",
          "line": 264,
          "type": "REFERENCE",
          "locate": "Test Case",
          "abstractedStatement": "",
          "isMockRelated": false,
          "isShareable": false,
          "locationContext": {
            "methodName": "SetsBoundaryOnMultipartBody",
            "methodAnnotations": [
              "Test"
            ],
            "methodRawCode": "@Test\r\nvoid SetsBoundaryOnMultipartBody() {\r\n    final RequestInformation requestInfo = new RequestInformation();\r\n    requestInfo.httpMethod = HttpMethod.POST;\r\n    requestInfo.urlTemplate = \"http://localhost/{URITemplate}/ParameterMapping?IsCaseSensitive={IsCaseSensitive}\";\r\n    final SerializationWriter writerMock = mock(SerializationWriter.class);\r\n    final SerializationWriterFactory factoryMock = mock(SerializationWriterFactory.class);\r\n    when(factoryMock.getSerializationWriter(anyString())).thenReturn(writerMock);\r\n    final RequestAdapter requestAdapterMock = mock(RequestAdapter.class);\r\n    when(requestAdapterMock.getSerializationWriterFactory()).thenReturn(factoryMock);\r\n    final MultipartBody multipartBody = new MultipartBody();\r\n    multipartBody.requestAdapter = requestAdapterMock;\r\n    requestInfo.setContentFromParsable(requestAdapterMock, \"multipart/form-data\", multipartBody);\r\n    assertNotNull(multipartBody.getBoundary());\r\n    assertFalse(multipartBody.getBoundary().isEmpty());\r\n    assertEquals(\"multipart/form-data; boundary=\" + multipartBody.getBoundary(), requestInfo.headers.get(\"Content-Type\").toArray()[0]);\r\n}"
          }
        }
      ]
    },
    {
      "rawMockObjectId": 20,
      "variableName": "factoryMock",
      "variableType": "SerializationWriterFactory",
      "mockedClass": "com.microsoft.kiota.serialization.SerializationWriterFactory",
      "isReuseableMock": false,
      "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
      "mockRole": "mock",
      "classContext": {
        "packageName": "com.microsoft.kiota",
        "filePath": "C:\\Java_projects\\Microsoft\\kiota-java\\components\\abstractions\\src\\test\\java\\com\\microsoft\\kiota\\RequestInformationTest.java"
      },
      "statements": [
        {
          "code": "final SerializationWriterFactory factoryMock = mock(SerializationWriterFactory.class);",
          "line": 263,
          "type": "METHOD_MOCK_CREATION",
          "locate": "Test Case",
          "abstractedStatement": "",
          "isMockRelated": true,
          "isShareable": false,
          "locationContext": {
            "methodName": "SetsBoundaryOnMultipartBody",
            "methodAnnotations": [
              "Test"
            ],
            "methodRawCode": "@Test\r\nvoid SetsBoundaryOnMultipartBody() {\r\n    final RequestInformation requestInfo = new RequestInformation();\r\n    requestInfo.httpMethod = HttpMethod.POST;\r\n    requestInfo.urlTemplate = \"http://localhost/{URITemplate}/ParameterMapping?IsCaseSensitive={IsCaseSensitive}\";\r\n    final SerializationWriter writerMock = mock(SerializationWriter.class);\r\n    final SerializationWriterFactory factoryMock = mock(SerializationWriterFactory.class);\r\n    when(factoryMock.getSerializationWriter(anyString())).thenReturn(writerMock);\r\n    final RequestAdapter requestAdapterMock = mock(RequestAdapter.class);\r\n    when(requestAdapterMock.getSerializationWriterFactory()).thenReturn(factoryMock);\r\n    final MultipartBody multipartBody = new MultipartBody();\r\n    multipartBody.requestAdapter = requestAdapterMock;\r\n    requestInfo.setContentFromParsable(requestAdapterMock, \"multipart/form-data\", multipartBody);\r\n    assertNotNull(multipartBody.getBoundary());\r\n    assertFalse(multipartBody.getBoundary().isEmpty());\r\n    assertEquals(\"multipart/form-data; boundary=\" + multipartBody.getBoundary(), requestInfo.headers.get(\"Content-Type\").toArray()[0]);\r\n}"
          }
        },
        {
          "code": "when(factoryMock.getSerializationWriter(anyString())).thenReturn(writerMock);",
          "line": 264,
          "type": "STUBBING",
          "locate": "Test Case",
          "abstractedStatement": "when(com.microsoft.kiota.serialization.SerializationWriterFactory.getSerializationWriter(anyString())).thenReturn(com.microsoft.kiota.serialization.SerializationWriter)",
          "isMockRelated": true,
          "isShareable": false,
          "locationContext": {
            "methodName": "SetsBoundaryOnMultipartBody",
            "methodAnnotations": [
              "Test"
            ],
            "methodRawCode": "@Test\r\nvoid SetsBoundaryOnMultipartBody() {\r\n    final RequestInformation requestInfo = new RequestInformation();\r\n    requestInfo.httpMethod = HttpMethod.POST;\r\n    requestInfo.urlTemplate = \"http://localhost/{URITemplate}/ParameterMapping?IsCaseSensitive={IsCaseSensitive}\";\r\n    final SerializationWriter writerMock = mock(SerializationWriter.class);\r\n    final SerializationWriterFactory factoryMock = mock(SerializationWriterFactory.class);\r\n    when(factoryMock.getSerializationWriter(anyString())).thenReturn(writerMock);\r\n    final RequestAdapter requestAdapterMock = mock(RequestAdapter.class);\r\n    when(requestAdapterMock.getSerializationWriterFactory()).thenReturn(factoryMock);\r\n    final MultipartBody multipartBody = new MultipartBody();\r\n    multipartBody.requestAdapter = requestAdapterMock;\r\n    requestInfo.setContentFromParsable(requestAdapterMock, \"multipart/form-data\", multipartBody);\r\n    assertNotNull(multipartBody.getBoundary());\r\n    assertFalse(multipartBody.getBoundary().isEmpty());\r\n    assertEquals(\"multipart/form-data; boundary=\" + multipartBody.getBoundary(), requestInfo.headers.get(\"Content-Type\").toArray()[0]);\r\n}"
          }
        },
        {
          "code": "when(requestAdapterMock.getSerializationWriterFactory()).thenReturn(factoryMock);",
          "line": 266,
          "type": "REFERENCE",
          "locate": "Test Case",
          "abstractedStatement": "",
          "isMockRelated": false,
          "isShareable": false,
          "locationContext": {
            "methodName": "SetsBoundaryOnMultipartBody",
            "methodAnnotations": [
              "Test"
            ],
            "methodRawCode": "@Test\r\nvoid SetsBoundaryOnMultipartBody() {\r\n    final RequestInformation requestInfo = new RequestInformation();\r\n    requestInfo.httpMethod = HttpMethod.POST;\r\n    requestInfo.urlTemplate = \"http://localhost/{URITemplate}/ParameterMapping?IsCaseSensitive={IsCaseSensitive}\";\r\n    final SerializationWriter writerMock = mock(SerializationWriter.class);\r\n    final SerializationWriterFactory factoryMock = mock(SerializationWriterFactory.class);\r\n    when(factoryMock.getSerializationWriter(anyString())).thenReturn(writerMock);\r\n    final RequestAdapter requestAdapterMock = mock(RequestAdapter.class);\r\n    when(requestAdapterMock.getSerializationWriterFactory()).thenReturn(factoryMock);\r\n    final MultipartBody multipartBody = new MultipartBody();\r\n    multipartBody.requestAdapter = requestAdapterMock;\r\n    requestInfo.setContentFromParsable(requestAdapterMock, \"multipart/form-data\", multipartBody);\r\n    assertNotNull(multipartBody.getBoundary());\r\n    assertFalse(multipartBody.getBoundary().isEmpty());\r\n    assertEquals(\"multipart/form-data; boundary=\" + multipartBody.getBoundary(), requestInfo.headers.get(\"Content-Type\").toArray()[0]);\r\n}"
          }
        }
      ]
    },
    {
      "rawMockObjectId": 21,
      "variableName": "requestAdapterMock",
      "variableType": "RequestAdapter",
      "mockedClass": "com.microsoft.kiota.RequestAdapter",
      "isReuseableMock": false,
      "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
      "mockRole": "mock",
      "classContext": {
        "packageName": "com.microsoft.kiota",
        "filePath": "C:\\Java_projects\\Microsoft\\kiota-java\\components\\abstractions\\src\\test\\java\\com\\microsoft\\kiota\\RequestInformationTest.java"
      },
      "statements": [
        {
          "code": "final RequestAdapter requestAdapterMock = mock(RequestAdapter.class);",
          "line": 265,
          "type": "METHOD_MOCK_CREATION",
          "locate": "Test Case",
          "abstractedStatement": "",
          "isMockRelated": true,
          "isShareable": false,
          "locationContext": {
            "methodName": "SetsBoundaryOnMultipartBody",
            "methodAnnotations": [
              "Test"
            ],
            "methodRawCode": "@Test\r\nvoid SetsBoundaryOnMultipartBody() {\r\n    final RequestInformation requestInfo = new RequestInformation();\r\n    requestInfo.httpMethod = HttpMethod.POST;\r\n    requestInfo.urlTemplate = \"http://localhost/{URITemplate}/ParameterMapping?IsCaseSensitive={IsCaseSensitive}\";\r\n    final SerializationWriter writerMock = mock(SerializationWriter.class);\r\n    final SerializationWriterFactory factoryMock = mock(SerializationWriterFactory.class);\r\n    when(factoryMock.getSerializationWriter(anyString())).thenReturn(writerMock);\r\n    final RequestAdapter requestAdapterMock = mock(RequestAdapter.class);\r\n    when(requestAdapterMock.getSerializationWriterFactory()).thenReturn(factoryMock);\r\n    final MultipartBody multipartBody = new MultipartBody();\r\n    multipartBody.requestAdapter = requestAdapterMock;\r\n    requestInfo.setContentFromParsable(requestAdapterMock, \"multipart/form-data\", multipartBody);\r\n    assertNotNull(multipartBody.getBoundary());\r\n    assertFalse(multipartBody.getBoundary().isEmpty());\r\n    assertEquals(\"multipart/form-data; boundary=\" + multipartBody.getBoundary(), requestInfo.headers.get(\"Content-Type\").toArray()[0]);\r\n}"
          }
        },
        {
          "code": "when(requestAdapterMock.getSerializationWriterFactory()).thenReturn(factoryMock);",
          "line": 266,
          "type": "STUBBING",
          "locate": "Test Case",
          "abstractedStatement": "when(com.microsoft.kiota.RequestAdapter.getSerializationWriterFactory()).thenReturn(com.microsoft.kiota.serialization.SerializationWriterFactory)",
          "isMockRelated": true,
          "isShareable": false,
          "locationContext": {
            "methodName": "SetsBoundaryOnMultipartBody",
            "methodAnnotations": [
              "Test"
            ],
            "methodRawCode": "@Test\r\nvoid SetsBoundaryOnMultipartBody() {\r\n    final RequestInformation requestInfo = new RequestInformation();\r\n    requestInfo.httpMethod = HttpMethod.POST;\r\n    requestInfo.urlTemplate = \"http://localhost/{URITemplate}/ParameterMapping?IsCaseSensitive={IsCaseSensitive}\";\r\n    final SerializationWriter writerMock = mock(SerializationWriter.class);\r\n    final SerializationWriterFactory factoryMock = mock(SerializationWriterFactory.class);\r\n    when(factoryMock.getSerializationWriter(anyString())).thenReturn(writerMock);\r\n    final RequestAdapter requestAdapterMock = mock(RequestAdapter.class);\r\n    when(requestAdapterMock.getSerializationWriterFactory()).thenReturn(factoryMock);\r\n    final MultipartBody multipartBody = new MultipartBody();\r\n    multipartBody.requestAdapter = requestAdapterMock;\r\n    requestInfo.setContentFromParsable(requestAdapterMock, \"multipart/form-data\", multipartBody);\r\n    assertNotNull(multipartBody.getBoundary());\r\n    assertFalse(multipartBody.getBoundary().isEmpty());\r\n    assertEquals(\"multipart/form-data; boundary=\" + multipartBody.getBoundary(), requestInfo.headers.get(\"Content-Type\").toArray()[0]);\r\n}"
          }
        },
        {
          "code": "requestInfo.setContentFromParsable(requestAdapterMock, \"multipart/form-data\", multipartBody);",
          "line": 271,
          "type": "REFERENCE",
          "locate": "Test Case",
          "abstractedStatement": "",
          "isMockRelated": false,
          "isShareable": false,
          "locationContext": {
            "methodName": "SetsBoundaryOnMultipartBody",
            "methodAnnotations": [
              "Test"
            ],
            "methodRawCode": "@Test\r\nvoid SetsBoundaryOnMultipartBody() {\r\n    final RequestInformation requestInfo = new RequestInformation();\r\n    requestInfo.httpMethod = HttpMethod.POST;\r\n    requestInfo.urlTemplate = \"http://localhost/{URITemplate}/ParameterMapping?IsCaseSensitive={IsCaseSensitive}\";\r\n    final SerializationWriter writerMock = mock(SerializationWriter.class);\r\n    final SerializationWriterFactory factoryMock = mock(SerializationWriterFactory.class);\r\n    when(factoryMock.getSerializationWriter(anyString())).thenReturn(writerMock);\r\n    final RequestAdapter requestAdapterMock = mock(RequestAdapter.class);\r\n    when(requestAdapterMock.getSerializationWriterFactory()).thenReturn(factoryMock);\r\n    final MultipartBody multipartBody = new MultipartBody();\r\n    multipartBody.requestAdapter = requestAdapterMock;\r\n    requestInfo.setContentFromParsable(requestAdapterMock, \"multipart/form-data\", multipartBody);\r\n    assertNotNull(multipartBody.getBoundary());\r\n    assertFalse(multipartBody.getBoundary().isEmpty());\r\n    assertEquals(\"multipart/form-data; boundary=\" + multipartBody.getBoundary(), requestInfo.headers.get(\"Content-Type\").toArray()[0]);\r\n}"
          }
        }
      ]
    },
    {
      "rawMockObjectId": 22,
      "variableName": "mockParseNode",
      "variableType": "ParseNode",
      "mockedClass": "com.microsoft.kiota.serialization.ParseNode",
      "isReuseableMock": false,
      "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
      "mockRole": "mock",
      "classContext": {
        "packageName": "com.microsoft.kiota.serialization",
        "filePath": "C:\\Java_projects\\Microsoft\\kiota-java\\components\\abstractions\\src\\test\\java\\com\\microsoft\\kiota\\serialization\\DeserializationHelpersTest.java"
      },
      "statements": [
        {
          "code": "final ParseNode mockParseNode = mock(ParseNode.class);",
          "line": 75,
          "type": "METHOD_MOCK_CREATION",
          "locate": "Test Case",
          "abstractedStatement": "",
          "isMockRelated": true,
          "isShareable": false,
          "locationContext": {
            "methodName": "deserializesObjectWithoutReflection",
            "methodAnnotations": [
              "Test"
            ],
            "methodRawCode": "@Test\r\nvoid deserializesObjectWithoutReflection() throws IOException {\r\n    final String strValue = \"{'id':'123'}\";\r\n    final ParseNode mockParseNode = mock(ParseNode.class);\r\n    when(mockParseNode.getObjectValue(any())).thenReturn(new TestEntity() {\r\n\r\n        {\r\n            setId(\"123\");\r\n        }\r\n    });\r\n    final ParseNodeFactory mockParseNodeFactory = mock(ParseNodeFactory.class);\r\n    when(mockParseNodeFactory.getParseNode(any(), any())).thenReturn(mockParseNode);\r\n    ParseNodeFactoryRegistry.defaultInstance.contentTypeAssociatedFactories.put(_jsonContentType, mockParseNodeFactory);\r\n    final var result = KiotaSerialization.deserialize(_jsonContentType, strValue, TestEntity::createFromDiscriminatorValue);\r\n    assertEquals(\"123\", result.getId());\r\n}"
          }
        },
        {
          "code": "when(mockParseNode.getObjectValue(any())).thenReturn(new TestEntity() {\r\n\r\n    {\r\n        setId(\"123\");\r\n    }\r\n});",
          "line": 76,
          "type": "STUBBING",
          "locate": "Test Case",
          "abstractedStatement": "when(com.microsoft.kiota.serialization.ParseNode.getObjectValue(any())).thenReturn(new TestEntity() {\r\n\r\n    {\r\n        setId(\"123\");\r\n    }\r\n})",
          "isMockRelated": true,
          "isShareable": false,
          "locationContext": {
            "methodName": "deserializesObjectWithoutReflection",
            "methodAnnotations": [
              "Test"
            ],
            "methodRawCode": "@Test\r\nvoid deserializesObjectWithoutReflection() throws IOException {\r\n    final String strValue = \"{'id':'123'}\";\r\n    final ParseNode mockParseNode = mock(ParseNode.class);\r\n    when(mockParseNode.getObjectValue(any())).thenReturn(new TestEntity() {\r\n\r\n        {\r\n            setId(\"123\");\r\n        }\r\n    });\r\n    final ParseNodeFactory mockParseNodeFactory = mock(ParseNodeFactory.class);\r\n    when(mockParseNodeFactory.getParseNode(any(), any())).thenReturn(mockParseNode);\r\n    ParseNodeFactoryRegistry.defaultInstance.contentTypeAssociatedFactories.put(_jsonContentType, mockParseNodeFactory);\r\n    final var result = KiotaSerialization.deserialize(_jsonContentType, strValue, TestEntity::createFromDiscriminatorValue);\r\n    assertEquals(\"123\", result.getId());\r\n}"
          }
        },
        {
          "code": "when(mockParseNodeFactory.getParseNode(any(), any())).thenReturn(mockParseNode);",
          "line": 84,
          "type": "REFERENCE",
          "locate": "Test Case",
          "abstractedStatement": "",
          "isMockRelated": false,
          "isShareable": false,
          "locationContext": {
            "methodName": "deserializesObjectWithoutReflection",
            "methodAnnotations": [
              "Test"
            ],
            "methodRawCode": "@Test\r\nvoid deserializesObjectWithoutReflection() throws IOException {\r\n    final String strValue = \"{'id':'123'}\";\r\n    final ParseNode mockParseNode = mock(ParseNode.class);\r\n    when(mockParseNode.getObjectValue(any())).thenReturn(new TestEntity() {\r\n\r\n        {\r\n            setId(\"123\");\r\n        }\r\n    });\r\n    final ParseNodeFactory mockParseNodeFactory = mock(ParseNodeFactory.class);\r\n    when(mockParseNodeFactory.getParseNode(any(), any())).thenReturn(mockParseNode);\r\n    ParseNodeFactoryRegistry.defaultInstance.contentTypeAssociatedFactories.put(_jsonContentType, mockParseNodeFactory);\r\n    final var result = KiotaSerialization.deserialize(_jsonContentType, strValue, TestEntity::createFromDiscriminatorValue);\r\n    assertEquals(\"123\", result.getId());\r\n}"
          }
        }
      ]
    },
    {
      "rawMockObjectId": 23,
      "variableName": "mockParseNodeFactory",
      "variableType": "ParseNodeFactory",
      "mockedClass": "com.microsoft.kiota.serialization.ParseNodeFactory",
      "isReuseableMock": false,
      "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
      "mockRole": "mock",
      "classContext": {
        "packageName": "com.microsoft.kiota.serialization",
        "filePath": "C:\\Java_projects\\Microsoft\\kiota-java\\components\\abstractions\\src\\test\\java\\com\\microsoft\\kiota\\serialization\\DeserializationHelpersTest.java"
      },
      "statements": [
        {
          "code": "final ParseNodeFactory mockParseNodeFactory = mock(ParseNodeFactory.class);",
          "line": 83,
          "type": "METHOD_MOCK_CREATION",
          "locate": "Test Case",
          "abstractedStatement": "",
          "isMockRelated": true,
          "isShareable": false,
          "locationContext": {
            "methodName": "deserializesObjectWithoutReflection",
            "methodAnnotations": [
              "Test"
            ],
            "methodRawCode": "@Test\r\nvoid deserializesObjectWithoutReflection() throws IOException {\r\n    final String strValue = \"{'id':'123'}\";\r\n    final ParseNode mockParseNode = mock(ParseNode.class);\r\n    when(mockParseNode.getObjectValue(any())).thenReturn(new TestEntity() {\r\n\r\n        {\r\n            setId(\"123\");\r\n        }\r\n    });\r\n    final ParseNodeFactory mockParseNodeFactory = mock(ParseNodeFactory.class);\r\n    when(mockParseNodeFactory.getParseNode(any(), any())).thenReturn(mockParseNode);\r\n    ParseNodeFactoryRegistry.defaultInstance.contentTypeAssociatedFactories.put(_jsonContentType, mockParseNodeFactory);\r\n    final var result = KiotaSerialization.deserialize(_jsonContentType, strValue, TestEntity::createFromDiscriminatorValue);\r\n    assertEquals(\"123\", result.getId());\r\n}"
          }
        },
        {
          "code": "when(mockParseNodeFactory.getParseNode(any(), any())).thenReturn(mockParseNode);",
          "line": 84,
          "type": "STUBBING",
          "locate": "Test Case",
          "abstractedStatement": "when(com.microsoft.kiota.serialization.ParseNodeFactory.getParseNode(any(), any())).thenReturn(com.microsoft.kiota.serialization.ParseNode)",
          "isMockRelated": true,
          "isShareable": false,
          "locationContext": {
            "methodName": "deserializesObjectWithoutReflection",
            "methodAnnotations": [
              "Test"
            ],
            "methodRawCode": "@Test\r\nvoid deserializesObjectWithoutReflection() throws IOException {\r\n    final String strValue = \"{'id':'123'}\";\r\n    final ParseNode mockParseNode = mock(ParseNode.class);\r\n    when(mockParseNode.getObjectValue(any())).thenReturn(new TestEntity() {\r\n\r\n        {\r\n            setId(\"123\");\r\n        }\r\n    });\r\n    final ParseNodeFactory mockParseNodeFactory = mock(ParseNodeFactory.class);\r\n    when(mockParseNodeFactory.getParseNode(any(), any())).thenReturn(mockParseNode);\r\n    ParseNodeFactoryRegistry.defaultInstance.contentTypeAssociatedFactories.put(_jsonContentType, mockParseNodeFactory);\r\n    final var result = KiotaSerialization.deserialize(_jsonContentType, strValue, TestEntity::createFromDiscriminatorValue);\r\n    assertEquals(\"123\", result.getId());\r\n}"
          }
        },
        {
          "code": "ParseNodeFactoryRegistry.defaultInstance.contentTypeAssociatedFactories.put(_jsonContentType, mockParseNodeFactory);",
          "line": 85,
          "type": "REFERENCE",
          "locate": "Test Case",
          "abstractedStatement": "",
          "isMockRelated": false,
          "isShareable": false,
          "locationContext": {
            "methodName": "deserializesObjectWithoutReflection",
            "methodAnnotations": [
              "Test"
            ],
            "methodRawCode": "@Test\r\nvoid deserializesObjectWithoutReflection() throws IOException {\r\n    final String strValue = \"{'id':'123'}\";\r\n    final ParseNode mockParseNode = mock(ParseNode.class);\r\n    when(mockParseNode.getObjectValue(any())).thenReturn(new TestEntity() {\r\n\r\n        {\r\n            setId(\"123\");\r\n        }\r\n    });\r\n    final ParseNodeFactory mockParseNodeFactory = mock(ParseNodeFactory.class);\r\n    when(mockParseNodeFactory.getParseNode(any(), any())).thenReturn(mockParseNode);\r\n    ParseNodeFactoryRegistry.defaultInstance.contentTypeAssociatedFactories.put(_jsonContentType, mockParseNodeFactory);\r\n    final var result = KiotaSerialization.deserialize(_jsonContentType, strValue, TestEntity::createFromDiscriminatorValue);\r\n    assertEquals(\"123\", result.getId());\r\n}"
          }
        }
      ]
    },
    {
      "rawMockObjectId": 24,
      "variableName": "mockParseNode",
      "variableType": "ParseNode",
      "mockedClass": "com.microsoft.kiota.serialization.ParseNode",
      "isReuseableMock": false,
      "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
      "mockRole": "mock",
      "classContext": {
        "packageName": "com.microsoft.kiota.serialization",
        "filePath": "C:\\Java_projects\\Microsoft\\kiota-java\\components\\abstractions\\src\\test\\java\\com\\microsoft\\kiota\\serialization\\DeserializationHelpersTest.java"
      },
      "statements": [
        {
          "code": "final ParseNode mockParseNode = mock(ParseNode.class);",
          "line": 97,
          "type": "METHOD_MOCK_CREATION",
          "locate": "Test Case",
          "abstractedStatement": "",
          "isMockRelated": true,
          "isShareable": false,
          "locationContext": {
            "methodName": "deserializesObjectWithReflection",
            "methodAnnotations": [
              "Test"
            ],
            "methodRawCode": "@Test\r\nvoid deserializesObjectWithReflection() throws IOException {\r\n    final String strValue = \"{'id':'123'}\";\r\n    final ParseNode mockParseNode = mock(ParseNode.class);\r\n    when(mockParseNode.getObjectValue(any())).thenReturn(new TestEntity() {\r\n\r\n        {\r\n            setId(\"123\");\r\n        }\r\n    });\r\n    final ParseNodeFactory mockParseNodeFactory = mock(ParseNodeFactory.class);\r\n    when(mockParseNodeFactory.getParseNode(any(), any())).thenReturn(mockParseNode);\r\n    ParseNodeFactoryRegistry.defaultInstance.contentTypeAssociatedFactories.put(_jsonContentType, mockParseNodeFactory);\r\n    final var result = KiotaSerialization.deserialize(_jsonContentType, strValue, TestEntity::createFromDiscriminatorValue);\r\n    assertEquals(\"123\", result.getId());\r\n}"
          }
        },
        {
          "code": "when(mockParseNode.getObjectValue(any())).thenReturn(new TestEntity() {\r\n\r\n    {\r\n        setId(\"123\");\r\n    }\r\n});",
          "line": 98,
          "type": "STUBBING",
          "locate": "Test Case",
          "abstractedStatement": "when(com.microsoft.kiota.serialization.ParseNode.getObjectValue(any())).thenReturn(new TestEntity() {\r\n\r\n    {\r\n        setId(\"123\");\r\n    }\r\n})",
          "isMockRelated": true,
          "isShareable": false,
          "locationContext": {
            "methodName": "deserializesObjectWithReflection",
            "methodAnnotations": [
              "Test"
            ],
            "methodRawCode": "@Test\r\nvoid deserializesObjectWithReflection() throws IOException {\r\n    final String strValue = \"{'id':'123'}\";\r\n    final ParseNode mockParseNode = mock(ParseNode.class);\r\n    when(mockParseNode.getObjectValue(any())).thenReturn(new TestEntity() {\r\n\r\n        {\r\n            setId(\"123\");\r\n        }\r\n    });\r\n    final ParseNodeFactory mockParseNodeFactory = mock(ParseNodeFactory.class);\r\n    when(mockParseNodeFactory.getParseNode(any(), any())).thenReturn(mockParseNode);\r\n    ParseNodeFactoryRegistry.defaultInstance.contentTypeAssociatedFactories.put(_jsonContentType, mockParseNodeFactory);\r\n    final var result = KiotaSerialization.deserialize(_jsonContentType, strValue, TestEntity::createFromDiscriminatorValue);\r\n    assertEquals(\"123\", result.getId());\r\n}"
          }
        },
        {
          "code": "when(mockParseNodeFactory.getParseNode(any(), any())).thenReturn(mockParseNode);",
          "line": 106,
          "type": "REFERENCE",
          "locate": "Test Case",
          "abstractedStatement": "",
          "isMockRelated": false,
          "isShareable": false,
          "locationContext": {
            "methodName": "deserializesObjectWithReflection",
            "methodAnnotations": [
              "Test"
            ],
            "methodRawCode": "@Test\r\nvoid deserializesObjectWithReflection() throws IOException {\r\n    final String strValue = \"{'id':'123'}\";\r\n    final ParseNode mockParseNode = mock(ParseNode.class);\r\n    when(mockParseNode.getObjectValue(any())).thenReturn(new TestEntity() {\r\n\r\n        {\r\n            setId(\"123\");\r\n        }\r\n    });\r\n    final ParseNodeFactory mockParseNodeFactory = mock(ParseNodeFactory.class);\r\n    when(mockParseNodeFactory.getParseNode(any(), any())).thenReturn(mockParseNode);\r\n    ParseNodeFactoryRegistry.defaultInstance.contentTypeAssociatedFactories.put(_jsonContentType, mockParseNodeFactory);\r\n    final var result = KiotaSerialization.deserialize(_jsonContentType, strValue, TestEntity::createFromDiscriminatorValue);\r\n    assertEquals(\"123\", result.getId());\r\n}"
          }
        }
      ]
    },
    {
      "rawMockObjectId": 25,
      "variableName": "mockParseNodeFactory",
      "variableType": "ParseNodeFactory",
      "mockedClass": "com.microsoft.kiota.serialization.ParseNodeFactory",
      "isReuseableMock": false,
      "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
      "mockRole": "mock",
      "classContext": {
        "packageName": "com.microsoft.kiota.serialization",
        "filePath": "C:\\Java_projects\\Microsoft\\kiota-java\\components\\abstractions\\src\\test\\java\\com\\microsoft\\kiota\\serialization\\DeserializationHelpersTest.java"
      },
      "statements": [
        {
          "code": "final ParseNodeFactory mockParseNodeFactory = mock(ParseNodeFactory.class);",
          "line": 105,
          "type": "METHOD_MOCK_CREATION",
          "locate": "Test Case",
          "abstractedStatement": "",
          "isMockRelated": true,
          "isShareable": false,
          "locationContext": {
            "methodName": "deserializesObjectWithReflection",
            "methodAnnotations": [
              "Test"
            ],
            "methodRawCode": "@Test\r\nvoid deserializesObjectWithReflection() throws IOException {\r\n    final String strValue = \"{'id':'123'}\";\r\n    final ParseNode mockParseNode = mock(ParseNode.class);\r\n    when(mockParseNode.getObjectValue(any())).thenReturn(new TestEntity() {\r\n\r\n        {\r\n            setId(\"123\");\r\n        }\r\n    });\r\n    final ParseNodeFactory mockParseNodeFactory = mock(ParseNodeFactory.class);\r\n    when(mockParseNodeFactory.getParseNode(any(), any())).thenReturn(mockParseNode);\r\n    ParseNodeFactoryRegistry.defaultInstance.contentTypeAssociatedFactories.put(_jsonContentType, mockParseNodeFactory);\r\n    final var result = KiotaSerialization.deserialize(_jsonContentType, strValue, TestEntity::createFromDiscriminatorValue);\r\n    assertEquals(\"123\", result.getId());\r\n}"
          }
        },
        {
          "code": "when(mockParseNodeFactory.getParseNode(any(), any())).thenReturn(mockParseNode);",
          "line": 106,
          "type": "STUBBING",
          "locate": "Test Case",
          "abstractedStatement": "when(com.microsoft.kiota.serialization.ParseNodeFactory.getParseNode(any(), any())).thenReturn(com.microsoft.kiota.serialization.ParseNode)",
          "isMockRelated": true,
          "isShareable": false,
          "locationContext": {
            "methodName": "deserializesObjectWithReflection",
            "methodAnnotations": [
              "Test"
            ],
            "methodRawCode": "@Test\r\nvoid deserializesObjectWithReflection() throws IOException {\r\n    final String strValue = \"{'id':'123'}\";\r\n    final ParseNode mockParseNode = mock(ParseNode.class);\r\n    when(mockParseNode.getObjectValue(any())).thenReturn(new TestEntity() {\r\n\r\n        {\r\n            setId(\"123\");\r\n        }\r\n    });\r\n    final ParseNodeFactory mockParseNodeFactory = mock(ParseNodeFactory.class);\r\n    when(mockParseNodeFactory.getParseNode(any(), any())).thenReturn(mockParseNode);\r\n    ParseNodeFactoryRegistry.defaultInstance.contentTypeAssociatedFactories.put(_jsonContentType, mockParseNodeFactory);\r\n    final var result = KiotaSerialization.deserialize(_jsonContentType, strValue, TestEntity::createFromDiscriminatorValue);\r\n    assertEquals(\"123\", result.getId());\r\n}"
          }
        },
        {
          "code": "ParseNodeFactoryRegistry.defaultInstance.contentTypeAssociatedFactories.put(_jsonContentType, mockParseNodeFactory);",
          "line": 107,
          "type": "REFERENCE",
          "locate": "Test Case",
          "abstractedStatement": "",
          "isMockRelated": false,
          "isShareable": false,
          "locationContext": {
            "methodName": "deserializesObjectWithReflection",
            "methodAnnotations": [
              "Test"
            ],
            "methodRawCode": "@Test\r\nvoid deserializesObjectWithReflection() throws IOException {\r\n    final String strValue = \"{'id':'123'}\";\r\n    final ParseNode mockParseNode = mock(ParseNode.class);\r\n    when(mockParseNode.getObjectValue(any())).thenReturn(new TestEntity() {\r\n\r\n        {\r\n            setId(\"123\");\r\n        }\r\n    });\r\n    final ParseNodeFactory mockParseNodeFactory = mock(ParseNodeFactory.class);\r\n    when(mockParseNodeFactory.getParseNode(any(), any())).thenReturn(mockParseNode);\r\n    ParseNodeFactoryRegistry.defaultInstance.contentTypeAssociatedFactories.put(_jsonContentType, mockParseNodeFactory);\r\n    final var result = KiotaSerialization.deserialize(_jsonContentType, strValue, TestEntity::createFromDiscriminatorValue);\r\n    assertEquals(\"123\", result.getId());\r\n}"
          }
        }
      ]
    },
    {
      "rawMockObjectId": 26,
      "variableName": "mockParseNode",
      "variableType": "ParseNode",
      "mockedClass": "com.microsoft.kiota.serialization.ParseNode",
      "isReuseableMock": false,
      "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
      "mockRole": "mock",
      "classContext": {
        "packageName": "com.microsoft.kiota.serialization",
        "filePath": "C:\\Java_projects\\Microsoft\\kiota-java\\components\\abstractions\\src\\test\\java\\com\\microsoft\\kiota\\serialization\\DeserializationHelpersTest.java"
      },
      "statements": [
        {
          "code": "final ParseNode mockParseNode = mock(ParseNode.class);",
          "line": 119,
          "type": "METHOD_MOCK_CREATION",
          "locate": "Test Case",
          "abstractedStatement": "",
          "isMockRelated": true,
          "isShareable": false,
          "locationContext": {
            "methodName": "deserializesCollectionOfObjects",
            "methodAnnotations": [
              "Test"
            ],
            "methodRawCode": "@Test\r\nvoid deserializesCollectionOfObjects() throws IOException {\r\n    final String strValue = \"{'id':'123'}\";\r\n    final ParseNode mockParseNode = mock(ParseNode.class);\r\n    when(mockParseNode.getCollectionOfObjectValues(any())).thenReturn(new ArrayList<Parsable>() {\r\n\r\n        {\r\n            add(new TestEntity() {\r\n\r\n                {\r\n                    setId(\"123\");\r\n                }\r\n            });\r\n        }\r\n    });\r\n    final ParseNodeFactory mockParseNodeFactory = mock(ParseNodeFactory.class);\r\n    when(mockParseNodeFactory.getParseNode(any(), any())).thenReturn(mockParseNode);\r\n    ParseNodeFactoryRegistry.defaultInstance.contentTypeAssociatedFactories.put(_jsonContentType, mockParseNodeFactory);\r\n    final var result = KiotaSerialization.deserializeCollection(_jsonContentType, strValue, TestEntity::createFromDiscriminatorValue);\r\n    assertEquals(\"123\", result.get(0).getId());\r\n}"
          }
        },
        {
          "code": "when(mockParseNode.getCollectionOfObjectValues(any())).thenReturn(new ArrayList<Parsable>() {\r\n\r\n    {\r\n        add(new TestEntity() {\r\n\r\n            {\r\n                setId(\"123\");\r\n            }\r\n        });\r\n    }\r\n});",
          "line": 120,
          "type": "STUBBING",
          "locate": "Test Case",
          "abstractedStatement": "when(com.microsoft.kiota.serialization.ParseNode.getCollectionOfObjectValues(any())).thenReturn(java.util.ArrayList<com.microsoft.kiota.serialization.Parsable>)",
          "isMockRelated": true,
          "isShareable": false,
          "locationContext": {
            "methodName": "deserializesCollectionOfObjects",
            "methodAnnotations": [
              "Test"
            ],
            "methodRawCode": "@Test\r\nvoid deserializesCollectionOfObjects() throws IOException {\r\n    final String strValue = \"{'id':'123'}\";\r\n    final ParseNode mockParseNode = mock(ParseNode.class);\r\n    when(mockParseNode.getCollectionOfObjectValues(any())).thenReturn(new ArrayList<Parsable>() {\r\n\r\n        {\r\n            add(new TestEntity() {\r\n\r\n                {\r\n                    setId(\"123\");\r\n                }\r\n            });\r\n        }\r\n    });\r\n    final ParseNodeFactory mockParseNodeFactory = mock(ParseNodeFactory.class);\r\n    when(mockParseNodeFactory.getParseNode(any(), any())).thenReturn(mockParseNode);\r\n    ParseNodeFactoryRegistry.defaultInstance.contentTypeAssociatedFactories.put(_jsonContentType, mockParseNodeFactory);\r\n    final var result = KiotaSerialization.deserializeCollection(_jsonContentType, strValue, TestEntity::createFromDiscriminatorValue);\r\n    assertEquals(\"123\", result.get(0).getId());\r\n}"
          }
        },
        {
          "code": "when(mockParseNodeFactory.getParseNode(any(), any())).thenReturn(mockParseNode);",
          "line": 133,
          "type": "REFERENCE",
          "locate": "Test Case",
          "abstractedStatement": "",
          "isMockRelated": false,
          "isShareable": false,
          "locationContext": {
            "methodName": "deserializesCollectionOfObjects",
            "methodAnnotations": [
              "Test"
            ],
            "methodRawCode": "@Test\r\nvoid deserializesCollectionOfObjects() throws IOException {\r\n    final String strValue = \"{'id':'123'}\";\r\n    final ParseNode mockParseNode = mock(ParseNode.class);\r\n    when(mockParseNode.getCollectionOfObjectValues(any())).thenReturn(new ArrayList<Parsable>() {\r\n\r\n        {\r\n            add(new TestEntity() {\r\n\r\n                {\r\n                    setId(\"123\");\r\n                }\r\n            });\r\n        }\r\n    });\r\n    final ParseNodeFactory mockParseNodeFactory = mock(ParseNodeFactory.class);\r\n    when(mockParseNodeFactory.getParseNode(any(), any())).thenReturn(mockParseNode);\r\n    ParseNodeFactoryRegistry.defaultInstance.contentTypeAssociatedFactories.put(_jsonContentType, mockParseNodeFactory);\r\n    final var result = KiotaSerialization.deserializeCollection(_jsonContentType, strValue, TestEntity::createFromDiscriminatorValue);\r\n    assertEquals(\"123\", result.get(0).getId());\r\n}"
          }
        }
      ]
    },
    {
      "rawMockObjectId": 27,
      "variableName": "mockParseNodeFactory",
      "variableType": "ParseNodeFactory",
      "mockedClass": "com.microsoft.kiota.serialization.ParseNodeFactory",
      "isReuseableMock": false,
      "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
      "mockRole": "mock",
      "classContext": {
        "packageName": "com.microsoft.kiota.serialization",
        "filePath": "C:\\Java_projects\\Microsoft\\kiota-java\\components\\abstractions\\src\\test\\java\\com\\microsoft\\kiota\\serialization\\DeserializationHelpersTest.java"
      },
      "statements": [
        {
          "code": "final ParseNodeFactory mockParseNodeFactory = mock(ParseNodeFactory.class);",
          "line": 132,
          "type": "METHOD_MOCK_CREATION",
          "locate": "Test Case",
          "abstractedStatement": "",
          "isMockRelated": true,
          "isShareable": false,
          "locationContext": {
            "methodName": "deserializesCollectionOfObjects",
            "methodAnnotations": [
              "Test"
            ],
            "methodRawCode": "@Test\r\nvoid deserializesCollectionOfObjects() throws IOException {\r\n    final String strValue = \"{'id':'123'}\";\r\n    final ParseNode mockParseNode = mock(ParseNode.class);\r\n    when(mockParseNode.getCollectionOfObjectValues(any())).thenReturn(new ArrayList<Parsable>() {\r\n\r\n        {\r\n            add(new TestEntity() {\r\n\r\n                {\r\n                    setId(\"123\");\r\n                }\r\n            });\r\n        }\r\n    });\r\n    final ParseNodeFactory mockParseNodeFactory = mock(ParseNodeFactory.class);\r\n    when(mockParseNodeFactory.getParseNode(any(), any())).thenReturn(mockParseNode);\r\n    ParseNodeFactoryRegistry.defaultInstance.contentTypeAssociatedFactories.put(_jsonContentType, mockParseNodeFactory);\r\n    final var result = KiotaSerialization.deserializeCollection(_jsonContentType, strValue, TestEntity::createFromDiscriminatorValue);\r\n    assertEquals(\"123\", result.get(0).getId());\r\n}"
          }
        },
        {
          "code": "when(mockParseNodeFactory.getParseNode(any(), any())).thenReturn(mockParseNode);",
          "line": 133,
          "type": "STUBBING",
          "locate": "Test Case",
          "abstractedStatement": "when(com.microsoft.kiota.serialization.ParseNodeFactory.getParseNode(any(), any())).thenReturn(com.microsoft.kiota.serialization.ParseNode)",
          "isMockRelated": true,
          "isShareable": false,
          "locationContext": {
            "methodName": "deserializesCollectionOfObjects",
            "methodAnnotations": [
              "Test"
            ],
            "methodRawCode": "@Test\r\nvoid deserializesCollectionOfObjects() throws IOException {\r\n    final String strValue = \"{'id':'123'}\";\r\n    final ParseNode mockParseNode = mock(ParseNode.class);\r\n    when(mockParseNode.getCollectionOfObjectValues(any())).thenReturn(new ArrayList<Parsable>() {\r\n\r\n        {\r\n            add(new TestEntity() {\r\n\r\n                {\r\n                    setId(\"123\");\r\n                }\r\n            });\r\n        }\r\n    });\r\n    final ParseNodeFactory mockParseNodeFactory = mock(ParseNodeFactory.class);\r\n    when(mockParseNodeFactory.getParseNode(any(), any())).thenReturn(mockParseNode);\r\n    ParseNodeFactoryRegistry.defaultInstance.contentTypeAssociatedFactories.put(_jsonContentType, mockParseNodeFactory);\r\n    final var result = KiotaSerialization.deserializeCollection(_jsonContentType, strValue, TestEntity::createFromDiscriminatorValue);\r\n    assertEquals(\"123\", result.get(0).getId());\r\n}"
          }
        },
        {
          "code": "ParseNodeFactoryRegistry.defaultInstance.contentTypeAssociatedFactories.put(_jsonContentType, mockParseNodeFactory);",
          "line": 134,
          "type": "REFERENCE",
          "locate": "Test Case",
          "abstractedStatement": "",
          "isMockRelated": false,
          "isShareable": false,
          "locationContext": {
            "methodName": "deserializesCollectionOfObjects",
            "methodAnnotations": [
              "Test"
            ],
            "methodRawCode": "@Test\r\nvoid deserializesCollectionOfObjects() throws IOException {\r\n    final String strValue = \"{'id':'123'}\";\r\n    final ParseNode mockParseNode = mock(ParseNode.class);\r\n    when(mockParseNode.getCollectionOfObjectValues(any())).thenReturn(new ArrayList<Parsable>() {\r\n\r\n        {\r\n            add(new TestEntity() {\r\n\r\n                {\r\n                    setId(\"123\");\r\n                }\r\n            });\r\n        }\r\n    });\r\n    final ParseNodeFactory mockParseNodeFactory = mock(ParseNodeFactory.class);\r\n    when(mockParseNodeFactory.getParseNode(any(), any())).thenReturn(mockParseNode);\r\n    ParseNodeFactoryRegistry.defaultInstance.contentTypeAssociatedFactories.put(_jsonContentType, mockParseNodeFactory);\r\n    final var result = KiotaSerialization.deserializeCollection(_jsonContentType, strValue, TestEntity::createFromDiscriminatorValue);\r\n    assertEquals(\"123\", result.get(0).getId());\r\n}"
          }
        }
      ]
    },
    {
      "rawMockObjectId": 28,
      "variableName": "mockSerializationWriter",
      "variableType": "var",
      "mockedClass": "com.microsoft.kiota.serialization.SerializationWriter",
      "isReuseableMock": false,
      "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— Test Case",
      "mockRole": "mock",
      "classContext": {
        "packageName": "com.microsoft.kiota.serialization",
        "filePath": "C:\\Java_projects\\Microsoft\\kiota-java\\components\\abstractions\\src\\test\\java\\com\\microsoft\\kiota\\serialization\\SerializationHelpersTest.java"
      },
      "statements": [
        {
          "code": "final var mockSerializationWriter = mock(SerializationWriter.class);",
          "line": 48,
          "type": "METHOD_MOCK_CREATION",
          "locate": "Test Case",
          "abstractedStatement": "",
          "isMockRelated": true,
          "isShareable": false,
          "locationContext": {
            "methodName": "serializesObject",
            "methodAnnotations": [
              "Test"
            ],
            "methodRawCode": "@Test\r\nvoid serializesObject() throws IOException {\r\n    final var mockSerializationWriter = mock(SerializationWriter.class);\r\n    when(mockSerializationWriter.getSerializedContent()).thenReturn(new ByteArrayInputStream(\"{'id':'123'}\".getBytes(_charset)));\r\n    final var mockSerializationWriterFactory = mock(SerializationWriterFactory.class);\r\n    when(mockSerializationWriterFactory.getSerializationWriter(_jsonContentType)).thenReturn(mockSerializationWriter);\r\n    SerializationWriterFactoryRegistry.defaultInstance.contentTypeAssociatedFactories.put(_jsonContentType, mockSerializationWriterFactory);\r\n    final var result = KiotaSerialization.serializeAsString(_jsonContentType, new TestEntity() {\r\n\r\n        {\r\n            setId(\"123\");\r\n        }\r\n    });\r\n    assertEquals(\"{'id':'123'}\", result);\r\n    verify(mockSerializationWriter, times(1)).writeObjectValue(eq(\"\"), any(Parsable.class));\r\n}"
          }
        },
        {
          "code": "when(mockSerializationWriter.getSerializedContent()).thenReturn(new ByteArrayInputStream(\"{'id':'123'}\".getBytes(_charset)));",
          "line": 49,
          "type": "STUBBING",
          "locate": "Test Case",
          "abstractedStatement": "when(com.microsoft.kiota.serialization.SerializationWriter.getSerializedContent()).thenReturn(java.io.ByteArrayInputStream)",
          "isMockRelated": true,
          "isShareable": false,
          "locationContext": {
            "methodName": "serializesObject",
            "methodAnnotations": [
              "Test"
            ],
            "methodRawCode": "@Test\r\nvoid serializesObject() throws IOException {\r\n    final var mockSerializationWriter = mock(SerializationWriter.class);\r\n    when(mockSerializationWriter.getSerializedContent()).thenReturn(new ByteArrayInputStream(\"{'id':'123'}\".getBytes(_charset)));\r\n    final var mockSerializationWriterFactory = mock(SerializationWriterFactory.class);\r\n    when(mockSerializationWriterFactory.getSerializationWriter(_jsonContentType)).thenReturn(mockSerializationWriter);\r\n    SerializationWriterFactoryRegistry.defaultInstance.contentTypeAssociatedFactories.put(_jsonContentType, mockSerializationWriterFactory);\r\n    final var result = KiotaSerialization.serializeAsString(_jsonContentType, new TestEntity() {\r\n\r\n        {\r\n            setId(\"123\");\r\n        }\r\n    });\r\n    assertEquals(\"{'id':'123'}\", result);\r\n    verify(mockSerializationWriter, times(1)).writeObjectValue(eq(\"\"), any(Parsable.class));\r\n}"
          }
        },
        {
          "code": "when(mockSerializationWriterFactory.getSerializationWriter(_jsonContentType)).thenReturn(mockSerializationWriter);",
          "line": 52,
          "type": "REFERENCE",
          "locate": "Test Case",
          "abstractedStatement": "",
          "isMockRelated": false,
          "isShareable": false,
          "locationContext": {
            "methodName": "serializesObject",
            "methodAnnotations": [
              "Test"
            ],
            "methodRawCode": "@Test\r\nvoid serializesObject() throws IOException {\r\n    final var mockSerializationWriter = mock(SerializationWriter.class);\r\n    when(mockSerializationWriter.getSerializedContent()).thenReturn(new ByteArrayInputStream(\"{'id':'123'}\".getBytes(_charset)));\r\n    final var mockSerializationWriterFactory = mock(SerializationWriterFactory.class);\r\n    when(mockSerializationWriterFactory.getSerializationWriter(_jsonContentType)).thenReturn(mockSerializationWriter);\r\n    SerializationWriterFactoryRegistry.defaultInstance.contentTypeAssociatedFactories.put(_jsonContentType, mockSerializationWriterFactory);\r\n    final var result = KiotaSerialization.serializeAsString(_jsonContentType, new TestEntity() {\r\n\r\n        {\r\n            setId(\"123\");\r\n        }\r\n    });\r\n    assertEquals(\"{'id':'123'}\", result);\r\n    verify(mockSerializationWriter, times(1)).writeObjectValue(eq(\"\"), any(Parsable.class));\r\n}"
          }
        },
        {
          "code": "verify(mockSerializationWriter, times(1)).writeObjectValue(eq(\"\"), any(Parsable.class));",
          "line": 65,
          "type": "VERIFICATION",
          "locate": "Test Case",
          "abstractedStatement": "",
          "isMockRelated": true,
          "isShareable": false,
          "locationContext": {
            "methodName": "serializesObject",
            "methodAnnotations": [
              "Test"
            ],
            "methodRawCode": "@Test\r\nvoid serializesObject() throws IOException {\r\n    final var mockSerializationWriter = mock(SerializationWriter.class);\r\n    when(mockSerializationWriter.getSerializedContent()).thenReturn(new ByteArrayInputStream(\"{'id':'123'}\".getBytes(_charset)));\r\n    final var mockSerializationWriterFactory = mock(SerializationWriterFactory.class);\r\n    when(mockSerializationWriterFactory.getSerializationWriter(_jsonContentType)).thenReturn(mockSerializationWriter);\r\n    SerializationWriterFactoryRegistry.defaultInstance.contentTypeAssociatedFactories.put(_jsonContentType, mockSerializationWriterFactory);\r\n    final var result = KiotaSerialization.serializeAsString(_jsonContentType, new TestEntity() {\r\n\r\n        {\r\n            setId(\"123\");\r\n        }\r\n    });\r\n    assertEquals(\"{'id':'123'}\", result);\r\n    verify(mockSerializationWriter, times(1)).writeObjectValue(eq(\"\"), any(Parsable.class));\r\n}"
          }
        }
      ]
    },
    {
      "rawMockObjectId": 29,
      "variableName": "mockSerializationWriterFactory",
      "variableType": "var",
      "mockedClass": "com.microsoft.kiota.serialization.SerializationWriterFactory",
      "isReuseableMock": false,
      "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
      "mockRole": "mock",
      "classContext": {
        "packageName": "com.microsoft.kiota.serialization",
        "filePath": "C:\\Java_projects\\Microsoft\\kiota-java\\components\\abstractions\\src\\test\\java\\com\\microsoft\\kiota\\serialization\\SerializationHelpersTest.java"
      },
      "statements": [
        {
          "code": "final var mockSerializationWriterFactory = mock(SerializationWriterFactory.class);",
          "line": 51,
          "type": "METHOD_MOCK_CREATION",
          "locate": "Test Case",
          "abstractedStatement": "",
          "isMockRelated": true,
          "isShareable": false,
          "locationContext": {
            "methodName": "serializesObject",
            "methodAnnotations": [
              "Test"
            ],
            "methodRawCode": "@Test\r\nvoid serializesObject() throws IOException {\r\n    final var mockSerializationWriter = mock(SerializationWriter.class);\r\n    when(mockSerializationWriter.getSerializedContent()).thenReturn(new ByteArrayInputStream(\"{'id':'123'}\".getBytes(_charset)));\r\n    final var mockSerializationWriterFactory = mock(SerializationWriterFactory.class);\r\n    when(mockSerializationWriterFactory.getSerializationWriter(_jsonContentType)).thenReturn(mockSerializationWriter);\r\n    SerializationWriterFactoryRegistry.defaultInstance.contentTypeAssociatedFactories.put(_jsonContentType, mockSerializationWriterFactory);\r\n    final var result = KiotaSerialization.serializeAsString(_jsonContentType, new TestEntity() {\r\n\r\n        {\r\n            setId(\"123\");\r\n        }\r\n    });\r\n    assertEquals(\"{'id':'123'}\", result);\r\n    verify(mockSerializationWriter, times(1)).writeObjectValue(eq(\"\"), any(Parsable.class));\r\n}"
          }
        },
        {
          "code": "when(mockSerializationWriterFactory.getSerializationWriter(_jsonContentType)).thenReturn(mockSerializationWriter);",
          "line": 52,
          "type": "STUBBING",
          "locate": "Test Case",
          "abstractedStatement": "when(com.microsoft.kiota.serialization.SerializationWriterFactory.getSerializationWriter(java.lang.String)).thenReturn(com.microsoft.kiota.serialization.SerializationWriter)",
          "isMockRelated": true,
          "isShareable": false,
          "locationContext": {
            "methodName": "serializesObject",
            "methodAnnotations": [
              "Test"
            ],
            "methodRawCode": "@Test\r\nvoid serializesObject() throws IOException {\r\n    final var mockSerializationWriter = mock(SerializationWriter.class);\r\n    when(mockSerializationWriter.getSerializedContent()).thenReturn(new ByteArrayInputStream(\"{'id':'123'}\".getBytes(_charset)));\r\n    final var mockSerializationWriterFactory = mock(SerializationWriterFactory.class);\r\n    when(mockSerializationWriterFactory.getSerializationWriter(_jsonContentType)).thenReturn(mockSerializationWriter);\r\n    SerializationWriterFactoryRegistry.defaultInstance.contentTypeAssociatedFactories.put(_jsonContentType, mockSerializationWriterFactory);\r\n    final var result = KiotaSerialization.serializeAsString(_jsonContentType, new TestEntity() {\r\n\r\n        {\r\n            setId(\"123\");\r\n        }\r\n    });\r\n    assertEquals(\"{'id':'123'}\", result);\r\n    verify(mockSerializationWriter, times(1)).writeObjectValue(eq(\"\"), any(Parsable.class));\r\n}"
          }
        },
        {
          "code": "SerializationWriterFactoryRegistry.defaultInstance.contentTypeAssociatedFactories.put(_jsonContentType, mockSerializationWriterFactory);",
          "line": 54,
          "type": "REFERENCE",
          "locate": "Test Case",
          "abstractedStatement": "",
          "isMockRelated": false,
          "isShareable": false,
          "locationContext": {
            "methodName": "serializesObject",
            "methodAnnotations": [
              "Test"
            ],
            "methodRawCode": "@Test\r\nvoid serializesObject() throws IOException {\r\n    final var mockSerializationWriter = mock(SerializationWriter.class);\r\n    when(mockSerializationWriter.getSerializedContent()).thenReturn(new ByteArrayInputStream(\"{'id':'123'}\".getBytes(_charset)));\r\n    final var mockSerializationWriterFactory = mock(SerializationWriterFactory.class);\r\n    when(mockSerializationWriterFactory.getSerializationWriter(_jsonContentType)).thenReturn(mockSerializationWriter);\r\n    SerializationWriterFactoryRegistry.defaultInstance.contentTypeAssociatedFactories.put(_jsonContentType, mockSerializationWriterFactory);\r\n    final var result = KiotaSerialization.serializeAsString(_jsonContentType, new TestEntity() {\r\n\r\n        {\r\n            setId(\"123\");\r\n        }\r\n    });\r\n    assertEquals(\"{'id':'123'}\", result);\r\n    verify(mockSerializationWriter, times(1)).writeObjectValue(eq(\"\"), any(Parsable.class));\r\n}"
          }
        }
      ]
    },
    {
      "rawMockObjectId": 30,
      "variableName": "mockSerializationWriter",
      "variableType": "var",
      "mockedClass": "com.microsoft.kiota.serialization.SerializationWriter",
      "isReuseableMock": false,
      "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— Test Case",
      "mockRole": "mock",
      "classContext": {
        "packageName": "com.microsoft.kiota.serialization",
        "filePath": "C:\\Java_projects\\Microsoft\\kiota-java\\components\\abstractions\\src\\test\\java\\com\\microsoft\\kiota\\serialization\\SerializationHelpersTest.java"
      },
      "statements": [
        {
          "code": "final var mockSerializationWriter = mock(SerializationWriter.class);",
          "line": 70,
          "type": "METHOD_MOCK_CREATION",
          "locate": "Test Case",
          "abstractedStatement": "",
          "isMockRelated": true,
          "isShareable": false,
          "locationContext": {
            "methodName": "serializesObjectCollection",
            "methodAnnotations": [
              "Test"
            ],
            "methodRawCode": "@Test\r\nvoid serializesObjectCollection() throws IOException {\r\n    final var mockSerializationWriter = mock(SerializationWriter.class);\r\n    when(mockSerializationWriter.getSerializedContent()).thenReturn(new ByteArrayInputStream(\"[{'id':'123'}]\".getBytes(_charset)));\r\n    final var mockSerializationWriterFactory = mock(SerializationWriterFactory.class);\r\n    when(mockSerializationWriterFactory.getSerializationWriter(_jsonContentType)).thenReturn(mockSerializationWriter);\r\n    SerializationWriterFactoryRegistry.defaultInstance.contentTypeAssociatedFactories.put(_jsonContentType, mockSerializationWriterFactory);\r\n    final var result = KiotaSerialization.serializeAsString(_jsonContentType, new ArrayList<>() {\r\n\r\n        {\r\n            add(new TestEntity() {\r\n\r\n                {\r\n                    setId(\"123\");\r\n                }\r\n            });\r\n        }\r\n    });\r\n    assertEquals(\"[{'id':'123'}]\", result);\r\n    verify(mockSerializationWriter, times(1)).writeCollectionOfObjectValues(eq(\"\"), any());\r\n}"
          }
        },
        {
          "code": "when(mockSerializationWriter.getSerializedContent()).thenReturn(new ByteArrayInputStream(\"[{'id':'123'}]\".getBytes(_charset)));",
          "line": 71,
          "type": "STUBBING",
          "locate": "Test Case",
          "abstractedStatement": "when(com.microsoft.kiota.serialization.SerializationWriter.getSerializedContent()).thenReturn(java.io.ByteArrayInputStream)",
          "isMockRelated": true,
          "isShareable": false,
          "locationContext": {
            "methodName": "serializesObjectCollection",
            "methodAnnotations": [
              "Test"
            ],
            "methodRawCode": "@Test\r\nvoid serializesObjectCollection() throws IOException {\r\n    final var mockSerializationWriter = mock(SerializationWriter.class);\r\n    when(mockSerializationWriter.getSerializedContent()).thenReturn(new ByteArrayInputStream(\"[{'id':'123'}]\".getBytes(_charset)));\r\n    final var mockSerializationWriterFactory = mock(SerializationWriterFactory.class);\r\n    when(mockSerializationWriterFactory.getSerializationWriter(_jsonContentType)).thenReturn(mockSerializationWriter);\r\n    SerializationWriterFactoryRegistry.defaultInstance.contentTypeAssociatedFactories.put(_jsonContentType, mockSerializationWriterFactory);\r\n    final var result = KiotaSerialization.serializeAsString(_jsonContentType, new ArrayList<>() {\r\n\r\n        {\r\n            add(new TestEntity() {\r\n\r\n                {\r\n                    setId(\"123\");\r\n                }\r\n            });\r\n        }\r\n    });\r\n    assertEquals(\"[{'id':'123'}]\", result);\r\n    verify(mockSerializationWriter, times(1)).writeCollectionOfObjectValues(eq(\"\"), any());\r\n}"
          }
        },
        {
          "code": "when(mockSerializationWriterFactory.getSerializationWriter(_jsonContentType)).thenReturn(mockSerializationWriter);",
          "line": 74,
          "type": "REFERENCE",
          "locate": "Test Case",
          "abstractedStatement": "",
          "isMockRelated": false,
          "isShareable": false,
          "locationContext": {
            "methodName": "serializesObjectCollection",
            "methodAnnotations": [
              "Test"
            ],
            "methodRawCode": "@Test\r\nvoid serializesObjectCollection() throws IOException {\r\n    final var mockSerializationWriter = mock(SerializationWriter.class);\r\n    when(mockSerializationWriter.getSerializedContent()).thenReturn(new ByteArrayInputStream(\"[{'id':'123'}]\".getBytes(_charset)));\r\n    final var mockSerializationWriterFactory = mock(SerializationWriterFactory.class);\r\n    when(mockSerializationWriterFactory.getSerializationWriter(_jsonContentType)).thenReturn(mockSerializationWriter);\r\n    SerializationWriterFactoryRegistry.defaultInstance.contentTypeAssociatedFactories.put(_jsonContentType, mockSerializationWriterFactory);\r\n    final var result = KiotaSerialization.serializeAsString(_jsonContentType, new ArrayList<>() {\r\n\r\n        {\r\n            add(new TestEntity() {\r\n\r\n                {\r\n                    setId(\"123\");\r\n                }\r\n            });\r\n        }\r\n    });\r\n    assertEquals(\"[{'id':'123'}]\", result);\r\n    verify(mockSerializationWriter, times(1)).writeCollectionOfObjectValues(eq(\"\"), any());\r\n}"
          }
        },
        {
          "code": "verify(mockSerializationWriter, times(1)).writeCollectionOfObjectValues(eq(\"\"), any());",
          "line": 92,
          "type": "VERIFICATION",
          "locate": "Test Case",
          "abstractedStatement": "",
          "isMockRelated": true,
          "isShareable": false,
          "locationContext": {
            "methodName": "serializesObjectCollection",
            "methodAnnotations": [
              "Test"
            ],
            "methodRawCode": "@Test\r\nvoid serializesObjectCollection() throws IOException {\r\n    final var mockSerializationWriter = mock(SerializationWriter.class);\r\n    when(mockSerializationWriter.getSerializedContent()).thenReturn(new ByteArrayInputStream(\"[{'id':'123'}]\".getBytes(_charset)));\r\n    final var mockSerializationWriterFactory = mock(SerializationWriterFactory.class);\r\n    when(mockSerializationWriterFactory.getSerializationWriter(_jsonContentType)).thenReturn(mockSerializationWriter);\r\n    SerializationWriterFactoryRegistry.defaultInstance.contentTypeAssociatedFactories.put(_jsonContentType, mockSerializationWriterFactory);\r\n    final var result = KiotaSerialization.serializeAsString(_jsonContentType, new ArrayList<>() {\r\n\r\n        {\r\n            add(new TestEntity() {\r\n\r\n                {\r\n                    setId(\"123\");\r\n                }\r\n            });\r\n        }\r\n    });\r\n    assertEquals(\"[{'id':'123'}]\", result);\r\n    verify(mockSerializationWriter, times(1)).writeCollectionOfObjectValues(eq(\"\"), any());\r\n}"
          }
        }
      ]
    },
    {
      "rawMockObjectId": 31,
      "variableName": "mockSerializationWriterFactory",
      "variableType": "var",
      "mockedClass": "com.microsoft.kiota.serialization.SerializationWriterFactory",
      "isReuseableMock": false,
      "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
      "mockRole": "mock",
      "classContext": {
        "packageName": "com.microsoft.kiota.serialization",
        "filePath": "C:\\Java_projects\\Microsoft\\kiota-java\\components\\abstractions\\src\\test\\java\\com\\microsoft\\kiota\\serialization\\SerializationHelpersTest.java"
      },
      "statements": [
        {
          "code": "final var mockSerializationWriterFactory = mock(SerializationWriterFactory.class);",
          "line": 73,
          "type": "METHOD_MOCK_CREATION",
          "locate": "Test Case",
          "abstractedStatement": "",
          "isMockRelated": true,
          "isShareable": false,
          "locationContext": {
            "methodName": "serializesObjectCollection",
            "methodAnnotations": [
              "Test"
            ],
            "methodRawCode": "@Test\r\nvoid serializesObjectCollection() throws IOException {\r\n    final var mockSerializationWriter = mock(SerializationWriter.class);\r\n    when(mockSerializationWriter.getSerializedContent()).thenReturn(new ByteArrayInputStream(\"[{'id':'123'}]\".getBytes(_charset)));\r\n    final var mockSerializationWriterFactory = mock(SerializationWriterFactory.class);\r\n    when(mockSerializationWriterFactory.getSerializationWriter(_jsonContentType)).thenReturn(mockSerializationWriter);\r\n    SerializationWriterFactoryRegistry.defaultInstance.contentTypeAssociatedFactories.put(_jsonContentType, mockSerializationWriterFactory);\r\n    final var result = KiotaSerialization.serializeAsString(_jsonContentType, new ArrayList<>() {\r\n\r\n        {\r\n            add(new TestEntity() {\r\n\r\n                {\r\n                    setId(\"123\");\r\n                }\r\n            });\r\n        }\r\n    });\r\n    assertEquals(\"[{'id':'123'}]\", result);\r\n    verify(mockSerializationWriter, times(1)).writeCollectionOfObjectValues(eq(\"\"), any());\r\n}"
          }
        },
        {
          "code": "when(mockSerializationWriterFactory.getSerializationWriter(_jsonContentType)).thenReturn(mockSerializationWriter);",
          "line": 74,
          "type": "STUBBING",
          "locate": "Test Case",
          "abstractedStatement": "when(com.microsoft.kiota.serialization.SerializationWriterFactory.getSerializationWriter(java.lang.String)).thenReturn(com.microsoft.kiota.serialization.SerializationWriter)",
          "isMockRelated": true,
          "isShareable": false,
          "locationContext": {
            "methodName": "serializesObjectCollection",
            "methodAnnotations": [
              "Test"
            ],
            "methodRawCode": "@Test\r\nvoid serializesObjectCollection() throws IOException {\r\n    final var mockSerializationWriter = mock(SerializationWriter.class);\r\n    when(mockSerializationWriter.getSerializedContent()).thenReturn(new ByteArrayInputStream(\"[{'id':'123'}]\".getBytes(_charset)));\r\n    final var mockSerializationWriterFactory = mock(SerializationWriterFactory.class);\r\n    when(mockSerializationWriterFactory.getSerializationWriter(_jsonContentType)).thenReturn(mockSerializationWriter);\r\n    SerializationWriterFactoryRegistry.defaultInstance.contentTypeAssociatedFactories.put(_jsonContentType, mockSerializationWriterFactory);\r\n    final var result = KiotaSerialization.serializeAsString(_jsonContentType, new ArrayList<>() {\r\n\r\n        {\r\n            add(new TestEntity() {\r\n\r\n                {\r\n                    setId(\"123\");\r\n                }\r\n            });\r\n        }\r\n    });\r\n    assertEquals(\"[{'id':'123'}]\", result);\r\n    verify(mockSerializationWriter, times(1)).writeCollectionOfObjectValues(eq(\"\"), any());\r\n}"
          }
        },
        {
          "code": "SerializationWriterFactoryRegistry.defaultInstance.contentTypeAssociatedFactories.put(_jsonContentType, mockSerializationWriterFactory);",
          "line": 76,
          "type": "REFERENCE",
          "locate": "Test Case",
          "abstractedStatement": "",
          "isMockRelated": false,
          "isShareable": false,
          "locationContext": {
            "methodName": "serializesObjectCollection",
            "methodAnnotations": [
              "Test"
            ],
            "methodRawCode": "@Test\r\nvoid serializesObjectCollection() throws IOException {\r\n    final var mockSerializationWriter = mock(SerializationWriter.class);\r\n    when(mockSerializationWriter.getSerializedContent()).thenReturn(new ByteArrayInputStream(\"[{'id':'123'}]\".getBytes(_charset)));\r\n    final var mockSerializationWriterFactory = mock(SerializationWriterFactory.class);\r\n    when(mockSerializationWriterFactory.getSerializationWriter(_jsonContentType)).thenReturn(mockSerializationWriter);\r\n    SerializationWriterFactoryRegistry.defaultInstance.contentTypeAssociatedFactories.put(_jsonContentType, mockSerializationWriterFactory);\r\n    final var result = KiotaSerialization.serializeAsString(_jsonContentType, new ArrayList<>() {\r\n\r\n        {\r\n            add(new TestEntity() {\r\n\r\n                {\r\n                    setId(\"123\");\r\n                }\r\n            });\r\n        }\r\n    });\r\n    assertEquals(\"[{'id':'123'}]\", result);\r\n    verify(mockSerializationWriter, times(1)).writeCollectionOfObjectValues(eq(\"\"), any());\r\n}"
          }
        }
      ]
    },
    {
      "rawMockObjectId": 32,
      "variableName": "tokenCredential",
      "variableType": "var",
      "mockedClass": "com.azure.core.credential.TokenCredential",
      "isReuseableMock": false,
      "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
      "mockRole": "mock",
      "classContext": {
        "packageName": "com.microsoft.kiota.authentication",
        "filePath": "C:\\Java_projects\\Microsoft\\kiota-java\\components\\authentication\\azure\\src\\test\\java\\com\\microsoft\\kiota\\authentication\\AzureIdentityAccessTokenProviderTest.java"
      },
      "statements": [
        {
          "code": "var tokenCredential = mock(TokenCredential.class);",
          "line": 32,
          "type": "METHOD_MOCK_CREATION",
          "locate": "Test Case",
          "abstractedStatement": "",
          "isMockRelated": true,
          "isShareable": false,
          "locationContext": {
            "methodName": "testLocalhostHttpUrlIsValid",
            "methodAnnotations": [
              "ParameterizedTest",
              "ValueSource"
            ],
            "methodRawCode": "@ParameterizedTest\r\n@ValueSource(strings = { \"http://localhost:80/me\", \"http://127.0.0.1/me\", \"http://[::1]:8080/me\" })\r\nvoid testLocalhostHttpUrlIsValid(String urlString) throws URISyntaxException {\r\n    var tokenCredential = mock(TokenCredential.class);\r\n    when(tokenCredential.getTokenSync(any(TokenRequestContext.class))).thenReturn(new AccessToken(\"token\", null));\r\n    var accessTokenProvider = new AzureIdentityAccessTokenProvider(tokenCredential, null, \"\");\r\n    assertEquals(\"token\", accessTokenProvider.getAuthorizationToken(new URI(urlString), new HashMap<>()));\r\n}"
          }
        },
        {
          "code": "when(tokenCredential.getTokenSync(any(TokenRequestContext.class))).thenReturn(new AccessToken(\"token\", null));",
          "line": 33,
          "type": "STUBBING",
          "locate": "Test Case",
          "abstractedStatement": "when(com.azure.core.credential.TokenCredential.getTokenSync(any(TokenRequestContext.class))).thenReturn(com.azure.core.credential.AccessToken)",
          "isMockRelated": true,
          "isShareable": false,
          "locationContext": {
            "methodName": "testLocalhostHttpUrlIsValid",
            "methodAnnotations": [
              "ParameterizedTest",
              "ValueSource"
            ],
            "methodRawCode": "@ParameterizedTest\r\n@ValueSource(strings = { \"http://localhost:80/me\", \"http://127.0.0.1/me\", \"http://[::1]:8080/me\" })\r\nvoid testLocalhostHttpUrlIsValid(String urlString) throws URISyntaxException {\r\n    var tokenCredential = mock(TokenCredential.class);\r\n    when(tokenCredential.getTokenSync(any(TokenRequestContext.class))).thenReturn(new AccessToken(\"token\", null));\r\n    var accessTokenProvider = new AzureIdentityAccessTokenProvider(tokenCredential, null, \"\");\r\n    assertEquals(\"token\", accessTokenProvider.getAuthorizationToken(new URI(urlString), new HashMap<>()));\r\n}"
          }
        }
      ]
    },
    {
      "rawMockObjectId": 33,
      "variableName": "tokenCredential",
      "variableType": "var",
      "mockedClass": "com.azure.core.credential.TokenCredential",
      "isReuseableMock": false,
      "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— None\n\nVerification:\n— None",
      "mockRole": "mock",
      "classContext": {
        "packageName": "com.microsoft.kiota.authentication",
        "filePath": "C:\\Java_projects\\Microsoft\\kiota-java\\components\\authentication\\azure\\src\\test\\java\\com\\microsoft\\kiota\\authentication\\AzureIdentityAccessTokenProviderTest.java"
      },
      "statements": [
        {
          "code": "var tokenCredential = mock(TokenCredential.class);",
          "line": 44,
          "type": "METHOD_MOCK_CREATION",
          "locate": "Test Case",
          "abstractedStatement": "",
          "isMockRelated": true,
          "isShareable": false,
          "locationContext": {
            "methodName": "testNonLocalhostHttpUrlIsInvalid",
            "methodAnnotations": [
              "ParameterizedTest",
              "ValueSource"
            ],
            "methodRawCode": "@ParameterizedTest\r\n@ValueSource(strings = { \"http://graph.microsoft.com/me\" })\r\nvoid testNonLocalhostHttpUrlIsInvalid(String urlString) {\r\n    var tokenCredential = mock(TokenCredential.class);\r\n    var accessTokenProvider = new AzureIdentityAccessTokenProvider(tokenCredential, null, \"\");\r\n    assertThrows(IllegalArgumentException.class, () -> accessTokenProvider.getAuthorizationToken(new URI(urlString), new HashMap<>()));\r\n}"
          }
        }
      ]
    },
    {
      "rawMockObjectId": 34,
      "variableName": "tokenCredential",
      "variableType": "var",
      "mockedClass": "com.azure.core.credential.TokenCredential",
      "isReuseableMock": false,
      "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— None\n\nVerification:\n— None",
      "mockRole": "mock",
      "classContext": {
        "packageName": "com.microsoft.kiota.authentication",
        "filePath": "C:\\Java_projects\\Microsoft\\kiota-java\\components\\authentication\\azure\\src\\test\\java\\com\\microsoft\\kiota\\authentication\\AzureIdentityAccessTokenProviderTest.java"
      },
      "statements": [
        {
          "code": "var tokenCredential = mock(TokenCredential.class);",
          "line": 55,
          "type": "METHOD_MOCK_CREATION",
          "locate": "Test Case",
          "abstractedStatement": "",
          "isMockRelated": true,
          "isShareable": false,
          "locationContext": {
            "methodName": "testKeepUserProvidedScopes",
            "methodAnnotations": [
              "Test"
            ],
            "methodRawCode": "@Test\r\nvoid testKeepUserProvidedScopes() throws URISyntaxException {\r\n    var tokenCredential = mock(TokenCredential.class);\r\n    String[] userProvidedScopes = { \"https://graph.microsoft.com/User.Read\", \"https://graph.microsoft.com/Application.Read\" };\r\n    var accessTokenProvider = new AzureIdentityAccessTokenProvider(tokenCredential, new String[] {}, userProvidedScopes);\r\n    assertScopes(tokenCredential, accessTokenProvider, userProvidedScopes);\r\n}"
          }
        },
        {
          "code": "assertScopes(tokenCredential, accessTokenProvider, userProvidedScopes);",
          "line": 62,
          "type": "REFERENCE",
          "locate": "Test Case",
          "abstractedStatement": "",
          "isMockRelated": false,
          "isShareable": false,
          "locationContext": {
            "methodName": "testKeepUserProvidedScopes",
            "methodAnnotations": [
              "Test"
            ],
            "methodRawCode": "@Test\r\nvoid testKeepUserProvidedScopes() throws URISyntaxException {\r\n    var tokenCredential = mock(TokenCredential.class);\r\n    String[] userProvidedScopes = { \"https://graph.microsoft.com/User.Read\", \"https://graph.microsoft.com/Application.Read\" };\r\n    var accessTokenProvider = new AzureIdentityAccessTokenProvider(tokenCredential, new String[] {}, userProvidedScopes);\r\n    assertScopes(tokenCredential, accessTokenProvider, userProvidedScopes);\r\n}"
          }
        }
      ]
    },
    {
      "rawMockObjectId": 35,
      "variableName": "tokenCredential",
      "variableType": "var",
      "mockedClass": "com.azure.core.credential.TokenCredential",
      "isReuseableMock": false,
      "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— None\n\nVerification:\n— None",
      "mockRole": "mock",
      "classContext": {
        "packageName": "com.microsoft.kiota.authentication",
        "filePath": "C:\\Java_projects\\Microsoft\\kiota-java\\components\\authentication\\azure\\src\\test\\java\\com\\microsoft\\kiota\\authentication\\AzureIdentityAccessTokenProviderTest.java"
      },
      "statements": [
        {
          "code": "var tokenCredential = mock(TokenCredential.class);",
          "line": 67,
          "type": "METHOD_MOCK_CREATION",
          "locate": "Test Case",
          "abstractedStatement": "",
          "isMockRelated": true,
          "isShareable": false,
          "locationContext": {
            "methodName": "testConfigureDefaultScopeWhenScopesNotProvided",
            "methodAnnotations": [
              "Test"
            ],
            "methodRawCode": "@Test\r\nvoid testConfigureDefaultScopeWhenScopesNotProvided() throws URISyntaxException {\r\n    var tokenCredential = mock(TokenCredential.class);\r\n    var accessTokenProvider = new AzureIdentityAccessTokenProvider(tokenCredential, new String[] {});\r\n    assertScopes(tokenCredential, accessTokenProvider, new String[] { \"https://graph.microsoft.com/.default\" });\r\n}"
          }
        },
        {
          "code": "assertScopes(tokenCredential, accessTokenProvider, new String[] { \"https://graph.microsoft.com/.default\" });",
          "line": 70,
          "type": "REFERENCE",
          "locate": "Test Case",
          "abstractedStatement": "",
          "isMockRelated": false,
          "isShareable": false,
          "locationContext": {
            "methodName": "testConfigureDefaultScopeWhenScopesNotProvided",
            "methodAnnotations": [
              "Test"
            ],
            "methodRawCode": "@Test\r\nvoid testConfigureDefaultScopeWhenScopesNotProvided() throws URISyntaxException {\r\n    var tokenCredential = mock(TokenCredential.class);\r\n    var accessTokenProvider = new AzureIdentityAccessTokenProvider(tokenCredential, new String[] {});\r\n    assertScopes(tokenCredential, accessTokenProvider, new String[] { \"https://graph.microsoft.com/.default\" });\r\n}"
          }
        }
      ]
    },
    {
      "rawMockObjectId": 36,
      "variableName": "tokenCredential",
      "variableType": "var",
      "mockedClass": "com.azure.core.credential.TokenCredential",
      "isReuseableMock": false,
      "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— None\n\nVerification:\n— None",
      "mockRole": "mock",
      "classContext": {
        "packageName": "com.microsoft.kiota.authentication",
        "filePath": "C:\\Java_projects\\Microsoft\\kiota-java\\components\\authentication\\azure\\src\\test\\java\\com\\microsoft\\kiota\\authentication\\AzureIdentityAccessTokenProviderTest.java"
      },
      "statements": [
        {
          "code": "var tokenCredential = mock(TokenCredential.class);",
          "line": 80,
          "type": "METHOD_MOCK_CREATION",
          "locate": "Test Case",
          "abstractedStatement": "",
          "isMockRelated": true,
          "isShareable": false,
          "locationContext": {
            "methodName": "testConfigureDefaultScopeWhenScopesNullOrEmpty",
            "methodAnnotations": [
              "ParameterizedTest",
              "NullAndEmptySource"
            ],
            "methodRawCode": "@ParameterizedTest\r\n@NullAndEmptySource\r\nvoid testConfigureDefaultScopeWhenScopesNullOrEmpty(String[] nullOrEmptyUserProvidedScopes) throws URISyntaxException {\r\n    var tokenCredential = mock(TokenCredential.class);\r\n    var accessTokenProvider = new AzureIdentityAccessTokenProvider(tokenCredential, new String[] {}, nullOrEmptyUserProvidedScopes);\r\n    assertScopes(tokenCredential, accessTokenProvider, new String[] { \"https://graph.microsoft.com/.default\" });\r\n}"
          }
        },
        {
          "code": "assertScopes(tokenCredential, accessTokenProvider, new String[] { \"https://graph.microsoft.com/.default\" });",
          "line": 84,
          "type": "REFERENCE",
          "locate": "Test Case",
          "abstractedStatement": "",
          "isMockRelated": false,
          "isShareable": false,
          "locationContext": {
            "methodName": "testConfigureDefaultScopeWhenScopesNullOrEmpty",
            "methodAnnotations": [
              "ParameterizedTest",
              "NullAndEmptySource"
            ],
            "methodRawCode": "@ParameterizedTest\r\n@NullAndEmptySource\r\nvoid testConfigureDefaultScopeWhenScopesNullOrEmpty(String[] nullOrEmptyUserProvidedScopes) throws URISyntaxException {\r\n    var tokenCredential = mock(TokenCredential.class);\r\n    var accessTokenProvider = new AzureIdentityAccessTokenProvider(tokenCredential, new String[] {}, nullOrEmptyUserProvidedScopes);\r\n    assertScopes(tokenCredential, accessTokenProvider, new String[] { \"https://graph.microsoft.com/.default\" });\r\n}"
          }
        }
      ]
    },
    {
      "rawMockObjectId": 37,
      "variableName": "authenticationProviderMock",
      "variableType": "AuthenticationProvider",
      "mockedClass": "com.microsoft.kiota.authentication.AuthenticationProvider",
      "isReuseableMock": false,
      "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— None\n\nVerification:\n— None",
      "mockRole": "mock",
      "classContext": {
        "packageName": "com.microsoft.kiota.http",
        "filePath": "C:\\Java_projects\\Microsoft\\kiota-java\\components\\http\\okHttp\\src\\test\\java\\com\\microsoft\\kiota\\http\\OkHttpRequestAdapterTest.java"
      },
      "statements": [
        {
          "code": "// Unexpected exception thrown: java.lang.IllegalArgumentException:\r\n// method POST must have a request body.\r\nfinal AuthenticationProvider authenticationProviderMock = mock(AuthenticationProvider.class);",
          "line": 56,
          "type": "METHOD_MOCK_CREATION",
          "locate": "Test Case",
          "abstractedStatement": "",
          "isMockRelated": true,
          "isShareable": false,
          "locationContext": {
            "methodName": "postRequestsShouldHaveEmptyBody",
            "methodAnnotations": [
              "ParameterizedTest",
              "EnumSource"
            ],
            "methodRawCode": "@ParameterizedTest\r\n@EnumSource(value = HttpMethod.class, names = { \"PUT\", \"POST\", \"PATCH\" })\r\nvoid postRequestsShouldHaveEmptyBody(HttpMethod method) throws Exception {\r\n    // Unexpected exception thrown: java.lang.IllegalArgumentException:\r\n    // method POST must have a request body.\r\n    final AuthenticationProvider authenticationProviderMock = mock(AuthenticationProvider.class);\r\n    final var adapter = new OkHttpRequestAdapter(authenticationProviderMock) {\r\n\r\n        public Request test() throws Exception {\r\n            RequestInformation ri = new RequestInformation();\r\n            ri.httpMethod = method;\r\n            ri.urlTemplate = \"http://localhost:1234\";\r\n            Span span1 = GlobalOpenTelemetry.getTracer(\"\").spanBuilder(\"\").startSpan();\r\n            Span span2 = GlobalOpenTelemetry.getTracer(\"\").spanBuilder(\"\").startSpan();\r\n            return this.getRequestFromRequestInformation(ri, span1, span2);\r\n        }\r\n    };\r\n    final var request = assertDoesNotThrow(() -> adapter.test());\r\n    assertNotNull(request.body());\r\n}"
          }
        }
      ]
    },
    {
      "rawMockObjectId": 38,
      "variableName": "authenticationProviderMock",
      "variableType": "var",
      "mockedClass": "com.microsoft.kiota.authentication.AuthenticationProvider",
      "isReuseableMock": false,
      "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— None\n\nVerification:\n— None",
      "mockRole": "mock",
      "classContext": {
        "packageName": "com.microsoft.kiota.http",
        "filePath": "C:\\Java_projects\\Microsoft\\kiota-java\\components\\http\\okHttp\\src\\test\\java\\com\\microsoft\\kiota\\http\\OkHttpRequestAdapterTest.java"
      },
      "statements": [
        {
          "code": "final var authenticationProviderMock = mock(AuthenticationProvider.class);",
          "line": 77,
          "type": "METHOD_MOCK_CREATION",
          "locate": "Test Case",
          "abstractedStatement": "",
          "isMockRelated": true,
          "isShareable": false,
          "locationContext": {
            "methodName": "sendStreamReturnsUsableStream",
            "methodAnnotations": [
              "ParameterizedTest",
              "ValueSource"
            ],
            "methodRawCode": "@ParameterizedTest\r\n@ValueSource(ints = { 200, 201, 202, 203, 206 })\r\nvoid sendStreamReturnsUsableStream(int statusCode) throws Exception {\r\n    final var authenticationProviderMock = mock(AuthenticationProvider.class);\r\n    authenticationProviderMock.authenticateRequest(any(RequestInformation.class), any(Map.class));\r\n    final var text = \"my-demo-text\";\r\n    final var bufferedSource = Okio.buffer(Okio.source(new ByteArrayInputStream(text.getBytes(\"UTF-8\"))));\r\n    final var client = getMockClient(new Response.Builder().code(statusCode).message(\"OK\").protocol(Protocol.HTTP_1_1).request(new Request.Builder().url(\"http://localhost\").build()).body(ResponseBody.create(bufferedSource, MediaType.parse(\"application/binary\"), text.getBytes(\"UTF-8\").length)).build());\r\n    final var requestAdapter = new OkHttpRequestAdapter(authenticationProviderMock, null, null, client);\r\n    final var requestInformation = new RequestInformation() {\r\n\r\n        {\r\n            setUri(new URI(\"https://localhost\"));\r\n            httpMethod = HttpMethod.GET;\r\n        }\r\n    };\r\n    InputStream response = null;\r\n    try {\r\n        response = requestAdapter.sendPrimitive(requestInformation, null, InputStream.class);\r\n        assertNotNull(response);\r\n        assertEquals(text, new String(response.readAllBytes(), StandardCharsets.UTF_8));\r\n    } finally {\r\n        if (response != null) {\r\n            response.close();\r\n        }\r\n    }\r\n}"
          }
        },
        {
          "code": "authenticationProviderMock.authenticateRequest(any(RequestInformation.class), any(Map.class));",
          "line": 78,
          "type": "REFERENCE",
          "locate": "Test Case",
          "abstractedStatement": "",
          "isMockRelated": false,
          "isShareable": false,
          "locationContext": {
            "methodName": "sendStreamReturnsUsableStream",
            "methodAnnotations": [
              "ParameterizedTest",
              "ValueSource"
            ],
            "methodRawCode": "@ParameterizedTest\r\n@ValueSource(ints = { 200, 201, 202, 203, 206 })\r\nvoid sendStreamReturnsUsableStream(int statusCode) throws Exception {\r\n    final var authenticationProviderMock = mock(AuthenticationProvider.class);\r\n    authenticationProviderMock.authenticateRequest(any(RequestInformation.class), any(Map.class));\r\n    final var text = \"my-demo-text\";\r\n    final var bufferedSource = Okio.buffer(Okio.source(new ByteArrayInputStream(text.getBytes(\"UTF-8\"))));\r\n    final var client = getMockClient(new Response.Builder().code(statusCode).message(\"OK\").protocol(Protocol.HTTP_1_1).request(new Request.Builder().url(\"http://localhost\").build()).body(ResponseBody.create(bufferedSource, MediaType.parse(\"application/binary\"), text.getBytes(\"UTF-8\").length)).build());\r\n    final var requestAdapter = new OkHttpRequestAdapter(authenticationProviderMock, null, null, client);\r\n    final var requestInformation = new RequestInformation() {\r\n\r\n        {\r\n            setUri(new URI(\"https://localhost\"));\r\n            httpMethod = HttpMethod.GET;\r\n        }\r\n    };\r\n    InputStream response = null;\r\n    try {\r\n        response = requestAdapter.sendPrimitive(requestInformation, null, InputStream.class);\r\n        assertNotNull(response);\r\n        assertEquals(text, new String(response.readAllBytes(), StandardCharsets.UTF_8));\r\n    } finally {\r\n        if (response != null) {\r\n            response.close();\r\n        }\r\n    }\r\n}"
          }
        }
      ]
    },
    {
      "rawMockObjectId": 39,
      "variableName": "authenticationProviderMock",
      "variableType": "var",
      "mockedClass": "com.microsoft.kiota.authentication.AuthenticationProvider",
      "isReuseableMock": false,
      "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— None\n\nVerification:\n— None",
      "mockRole": "mock",
      "classContext": {
        "packageName": "com.microsoft.kiota.http",
        "filePath": "C:\\Java_projects\\Microsoft\\kiota-java\\components\\http\\okHttp\\src\\test\\java\\com\\microsoft\\kiota\\http\\OkHttpRequestAdapterTest.java"
      },
      "statements": [
        {
          "code": "final var authenticationProviderMock = mock(AuthenticationProvider.class);",
          "line": 120,
          "type": "METHOD_MOCK_CREATION",
          "locate": "Test Case",
          "abstractedStatement": "",
          "isMockRelated": true,
          "isShareable": false,
          "locationContext": {
            "methodName": "sendStreamReturnsNullOnNoContent",
            "methodAnnotations": [
              "ParameterizedTest",
              "ValueSource"
            ],
            "methodRawCode": "@ParameterizedTest\r\n@ValueSource(ints = { 200, 201, 202, 203, 204 })\r\nvoid sendStreamReturnsNullOnNoContent(int statusCode) throws Exception {\r\n    final var authenticationProviderMock = mock(AuthenticationProvider.class);\r\n    authenticationProviderMock.authenticateRequest(any(RequestInformation.class), any(Map.class));\r\n    final var client = getMockClient(new Response.Builder().code(statusCode).message(\"OK\").protocol(Protocol.HTTP_1_1).request(new Request.Builder().url(\"http://localhost\").build()).body(null).build());\r\n    final var requestAdapter = new OkHttpRequestAdapter(authenticationProviderMock, null, null, client);\r\n    final var requestInformation = new RequestInformation() {\r\n\r\n        {\r\n            setUri(new URI(\"https://localhost\"));\r\n            httpMethod = HttpMethod.GET;\r\n        }\r\n    };\r\n    final var response = requestAdapter.sendPrimitive(requestInformation, null, InputStream.class);\r\n    assertNull(response);\r\n}"
          }
        },
        {
          "code": "authenticationProviderMock.authenticateRequest(any(RequestInformation.class), any(Map.class));",
          "line": 121,
          "type": "REFERENCE",
          "locate": "Test Case",
          "abstractedStatement": "",
          "isMockRelated": false,
          "isShareable": false,
          "locationContext": {
            "methodName": "sendStreamReturnsNullOnNoContent",
            "methodAnnotations": [
              "ParameterizedTest",
              "ValueSource"
            ],
            "methodRawCode": "@ParameterizedTest\r\n@ValueSource(ints = { 200, 201, 202, 203, 204 })\r\nvoid sendStreamReturnsNullOnNoContent(int statusCode) throws Exception {\r\n    final var authenticationProviderMock = mock(AuthenticationProvider.class);\r\n    authenticationProviderMock.authenticateRequest(any(RequestInformation.class), any(Map.class));\r\n    final var client = getMockClient(new Response.Builder().code(statusCode).message(\"OK\").protocol(Protocol.HTTP_1_1).request(new Request.Builder().url(\"http://localhost\").build()).body(null).build());\r\n    final var requestAdapter = new OkHttpRequestAdapter(authenticationProviderMock, null, null, client);\r\n    final var requestInformation = new RequestInformation() {\r\n\r\n        {\r\n            setUri(new URI(\"https://localhost\"));\r\n            httpMethod = HttpMethod.GET;\r\n        }\r\n    };\r\n    final var response = requestAdapter.sendPrimitive(requestInformation, null, InputStream.class);\r\n    assertNull(response);\r\n}"
          }
        }
      ]
    },
    {
      "rawMockObjectId": 40,
      "variableName": "authenticationProviderMock",
      "variableType": "var",
      "mockedClass": "com.microsoft.kiota.authentication.AuthenticationProvider",
      "isReuseableMock": false,
      "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— None\n\nVerification:\n— None",
      "mockRole": "mock",
      "classContext": {
        "packageName": "com.microsoft.kiota.http",
        "filePath": "C:\\Java_projects\\Microsoft\\kiota-java\\components\\http\\okHttp\\src\\test\\java\\com\\microsoft\\kiota\\http\\OkHttpRequestAdapterTest.java"
      },
      "statements": [
        {
          "code": "final var authenticationProviderMock = mock(AuthenticationProvider.class);",
          "line": 149,
          "type": "METHOD_MOCK_CREATION",
          "locate": "Test Case",
          "abstractedStatement": "",
          "isMockRelated": true,
          "isShareable": false,
          "locationContext": {
            "methodName": "sendReturnsNullOnNoContent",
            "methodAnnotations": [
              "ParameterizedTest",
              "ValueSource"
            ],
            "methodRawCode": "@ParameterizedTest\r\n@ValueSource(ints = { 200, 201, 202, 203, 204, 205 })\r\nvoid sendReturnsNullOnNoContent(int statusCode) throws Exception {\r\n    final var authenticationProviderMock = mock(AuthenticationProvider.class);\r\n    authenticationProviderMock.authenticateRequest(any(RequestInformation.class), any(Map.class));\r\n    final var client = getMockClient(new Response.Builder().code(statusCode).message(\"OK\").protocol(Protocol.HTTP_1_1).request(new Request.Builder().url(\"http://localhost\").build()).body(null).build());\r\n    final var requestAdapter = new OkHttpRequestAdapter(authenticationProviderMock, null, null, client);\r\n    final var requestInformation = new RequestInformation() {\r\n\r\n        {\r\n            setUri(new URI(\"https://localhost\"));\r\n            httpMethod = HttpMethod.GET;\r\n        }\r\n    };\r\n    final var mockEntity = mock(Parsable.class);\r\n    when(mockEntity.getFieldDeserializers()).thenReturn(new HashMap<>());\r\n    final var response = requestAdapter.send(requestInformation, null, (node) -> mockEntity);\r\n    assertNull(response);\r\n}"
          }
        },
        {
          "code": "authenticationProviderMock.authenticateRequest(any(RequestInformation.class), any(Map.class));",
          "line": 150,
          "type": "REFERENCE",
          "locate": "Test Case",
          "abstractedStatement": "",
          "isMockRelated": false,
          "isShareable": false,
          "locationContext": {
            "methodName": "sendReturnsNullOnNoContent",
            "methodAnnotations": [
              "ParameterizedTest",
              "ValueSource"
            ],
            "methodRawCode": "@ParameterizedTest\r\n@ValueSource(ints = { 200, 201, 202, 203, 204, 205 })\r\nvoid sendReturnsNullOnNoContent(int statusCode) throws Exception {\r\n    final var authenticationProviderMock = mock(AuthenticationProvider.class);\r\n    authenticationProviderMock.authenticateRequest(any(RequestInformation.class), any(Map.class));\r\n    final var client = getMockClient(new Response.Builder().code(statusCode).message(\"OK\").protocol(Protocol.HTTP_1_1).request(new Request.Builder().url(\"http://localhost\").build()).body(null).build());\r\n    final var requestAdapter = new OkHttpRequestAdapter(authenticationProviderMock, null, null, client);\r\n    final var requestInformation = new RequestInformation() {\r\n\r\n        {\r\n            setUri(new URI(\"https://localhost\"));\r\n            httpMethod = HttpMethod.GET;\r\n        }\r\n    };\r\n    final var mockEntity = mock(Parsable.class);\r\n    when(mockEntity.getFieldDeserializers()).thenReturn(new HashMap<>());\r\n    final var response = requestAdapter.send(requestInformation, null, (node) -> mockEntity);\r\n    assertNull(response);\r\n}"
          }
        }
      ]
    },
    {
      "rawMockObjectId": 41,
      "variableName": "mockEntity",
      "variableType": "var",
      "mockedClass": "com.microsoft.kiota.serialization.Parsable",
      "isReuseableMock": false,
      "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
      "mockRole": "mock",
      "classContext": {
        "packageName": "com.microsoft.kiota.http",
        "filePath": "C:\\Java_projects\\Microsoft\\kiota-java\\components\\http\\okHttp\\src\\test\\java\\com\\microsoft\\kiota\\http\\OkHttpRequestAdapterTest.java"
      },
      "statements": [
        {
          "code": "final var mockEntity = mock(Parsable.class);",
          "line": 170,
          "type": "METHOD_MOCK_CREATION",
          "locate": "Test Case",
          "abstractedStatement": "",
          "isMockRelated": true,
          "isShareable": false,
          "locationContext": {
            "methodName": "sendReturnsNullOnNoContent",
            "methodAnnotations": [
              "ParameterizedTest",
              "ValueSource"
            ],
            "methodRawCode": "@ParameterizedTest\r\n@ValueSource(ints = { 200, 201, 202, 203, 204, 205 })\r\nvoid sendReturnsNullOnNoContent(int statusCode) throws Exception {\r\n    final var authenticationProviderMock = mock(AuthenticationProvider.class);\r\n    authenticationProviderMock.authenticateRequest(any(RequestInformation.class), any(Map.class));\r\n    final var client = getMockClient(new Response.Builder().code(statusCode).message(\"OK\").protocol(Protocol.HTTP_1_1).request(new Request.Builder().url(\"http://localhost\").build()).body(null).build());\r\n    final var requestAdapter = new OkHttpRequestAdapter(authenticationProviderMock, null, null, client);\r\n    final var requestInformation = new RequestInformation() {\r\n\r\n        {\r\n            setUri(new URI(\"https://localhost\"));\r\n            httpMethod = HttpMethod.GET;\r\n        }\r\n    };\r\n    final var mockEntity = mock(Parsable.class);\r\n    when(mockEntity.getFieldDeserializers()).thenReturn(new HashMap<>());\r\n    final var response = requestAdapter.send(requestInformation, null, (node) -> mockEntity);\r\n    assertNull(response);\r\n}"
          }
        },
        {
          "code": "when(mockEntity.getFieldDeserializers()).thenReturn(new HashMap<>());",
          "line": 171,
          "type": "STUBBING",
          "locate": "Test Case",
          "abstractedStatement": "when(com.microsoft.kiota.serialization.Parsable.getFieldDeserializers()).thenReturn(java.util.HashMap)",
          "isMockRelated": true,
          "isShareable": false,
          "locationContext": {
            "methodName": "sendReturnsNullOnNoContent",
            "methodAnnotations": [
              "ParameterizedTest",
              "ValueSource"
            ],
            "methodRawCode": "@ParameterizedTest\r\n@ValueSource(ints = { 200, 201, 202, 203, 204, 205 })\r\nvoid sendReturnsNullOnNoContent(int statusCode) throws Exception {\r\n    final var authenticationProviderMock = mock(AuthenticationProvider.class);\r\n    authenticationProviderMock.authenticateRequest(any(RequestInformation.class), any(Map.class));\r\n    final var client = getMockClient(new Response.Builder().code(statusCode).message(\"OK\").protocol(Protocol.HTTP_1_1).request(new Request.Builder().url(\"http://localhost\").build()).body(null).build());\r\n    final var requestAdapter = new OkHttpRequestAdapter(authenticationProviderMock, null, null, client);\r\n    final var requestInformation = new RequestInformation() {\r\n\r\n        {\r\n            setUri(new URI(\"https://localhost\"));\r\n            httpMethod = HttpMethod.GET;\r\n        }\r\n    };\r\n    final var mockEntity = mock(Parsable.class);\r\n    when(mockEntity.getFieldDeserializers()).thenReturn(new HashMap<>());\r\n    final var response = requestAdapter.send(requestInformation, null, (node) -> mockEntity);\r\n    assertNull(response);\r\n}"
          }
        }
      ]
    },
    {
      "rawMockObjectId": 42,
      "variableName": "authenticationProviderMock",
      "variableType": "var",
      "mockedClass": "com.microsoft.kiota.authentication.AuthenticationProvider",
      "isReuseableMock": false,
      "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— None\n\nVerification:\n— None",
      "mockRole": "mock",
      "classContext": {
        "packageName": "com.microsoft.kiota.http",
        "filePath": "C:\\Java_projects\\Microsoft\\kiota-java\\components\\http\\okHttp\\src\\test\\java\\com\\microsoft\\kiota\\http\\OkHttpRequestAdapterTest.java"
      },
      "statements": [
        {
          "code": "final var authenticationProviderMock = mock(AuthenticationProvider.class);",
          "line": 179,
          "type": "METHOD_MOCK_CREATION",
          "locate": "Test Case",
          "abstractedStatement": "",
          "isMockRelated": true,
          "isShareable": false,
          "locationContext": {
            "methodName": "sendReturnsObjectOnContent",
            "methodAnnotations": [
              "ParameterizedTest",
              "ValueSource"
            ],
            "methodRawCode": "@ParameterizedTest\r\n@ValueSource(ints = { 200, 201, 202, 203 })\r\nvoid sendReturnsObjectOnContent(int statusCode) throws Exception {\r\n    final var authenticationProviderMock = mock(AuthenticationProvider.class);\r\n    authenticationProviderMock.authenticateRequest(any(RequestInformation.class), any(Map.class));\r\n    final var client = getMockClient(new Response.Builder().code(statusCode).message(\"OK\").protocol(Protocol.HTTP_1_1).request(new Request.Builder().url(\"http://localhost\").build()).body(ResponseBody.create(\"test\".getBytes(\"UTF-8\"), MediaType.parse(\"application/json\"))).build());\r\n    final var requestInformation = new RequestInformation() {\r\n\r\n        {\r\n            setUri(new URI(\"https://localhost\"));\r\n            httpMethod = HttpMethod.GET;\r\n        }\r\n    };\r\n    final var mockEntity = mock(Parsable.class);\r\n    when(mockEntity.getFieldDeserializers()).thenReturn(new HashMap<>());\r\n    final var mockParseNode = mock(ParseNode.class);\r\n    when(mockParseNode.getObjectValue(any(ParsableFactory.class))).thenReturn(mockEntity);\r\n    final var mockFactory = mock(ParseNodeFactory.class);\r\n    when(mockFactory.getParseNode(any(String.class), any(InputStream.class))).thenReturn(mockParseNode);\r\n    when(mockFactory.getValidContentType()).thenReturn(\"application/json\");\r\n    final var requestAdapter = new OkHttpRequestAdapter(authenticationProviderMock, mockFactory, null, client);\r\n    final var response = requestAdapter.send(requestInformation, null, (node) -> mockEntity);\r\n    assertNotNull(response);\r\n}"
          }
        },
        {
          "code": "authenticationProviderMock.authenticateRequest(any(RequestInformation.class), any(Map.class));",
          "line": 180,
          "type": "REFERENCE",
          "locate": "Test Case",
          "abstractedStatement": "",
          "isMockRelated": false,
          "isShareable": false,
          "locationContext": {
            "methodName": "sendReturnsObjectOnContent",
            "methodAnnotations": [
              "ParameterizedTest",
              "ValueSource"
            ],
            "methodRawCode": "@ParameterizedTest\r\n@ValueSource(ints = { 200, 201, 202, 203 })\r\nvoid sendReturnsObjectOnContent(int statusCode) throws Exception {\r\n    final var authenticationProviderMock = mock(AuthenticationProvider.class);\r\n    authenticationProviderMock.authenticateRequest(any(RequestInformation.class), any(Map.class));\r\n    final var client = getMockClient(new Response.Builder().code(statusCode).message(\"OK\").protocol(Protocol.HTTP_1_1).request(new Request.Builder().url(\"http://localhost\").build()).body(ResponseBody.create(\"test\".getBytes(\"UTF-8\"), MediaType.parse(\"application/json\"))).build());\r\n    final var requestInformation = new RequestInformation() {\r\n\r\n        {\r\n            setUri(new URI(\"https://localhost\"));\r\n            httpMethod = HttpMethod.GET;\r\n        }\r\n    };\r\n    final var mockEntity = mock(Parsable.class);\r\n    when(mockEntity.getFieldDeserializers()).thenReturn(new HashMap<>());\r\n    final var mockParseNode = mock(ParseNode.class);\r\n    when(mockParseNode.getObjectValue(any(ParsableFactory.class))).thenReturn(mockEntity);\r\n    final var mockFactory = mock(ParseNodeFactory.class);\r\n    when(mockFactory.getParseNode(any(String.class), any(InputStream.class))).thenReturn(mockParseNode);\r\n    when(mockFactory.getValidContentType()).thenReturn(\"application/json\");\r\n    final var requestAdapter = new OkHttpRequestAdapter(authenticationProviderMock, mockFactory, null, client);\r\n    final var response = requestAdapter.send(requestInformation, null, (node) -> mockEntity);\r\n    assertNotNull(response);\r\n}"
          }
        }
      ]
    },
    {
      "rawMockObjectId": 43,
      "variableName": "mockEntity",
      "variableType": "var",
      "mockedClass": "com.microsoft.kiota.serialization.Parsable",
      "isReuseableMock": false,
      "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
      "mockRole": "mock",
      "classContext": {
        "packageName": "com.microsoft.kiota.http",
        "filePath": "C:\\Java_projects\\Microsoft\\kiota-java\\components\\http\\okHttp\\src\\test\\java\\com\\microsoft\\kiota\\http\\OkHttpRequestAdapterTest.java"
      },
      "statements": [
        {
          "code": "final var mockEntity = mock(Parsable.class);",
          "line": 201,
          "type": "METHOD_MOCK_CREATION",
          "locate": "Test Case",
          "abstractedStatement": "",
          "isMockRelated": true,
          "isShareable": false,
          "locationContext": {
            "methodName": "sendReturnsObjectOnContent",
            "methodAnnotations": [
              "ParameterizedTest",
              "ValueSource"
            ],
            "methodRawCode": "@ParameterizedTest\r\n@ValueSource(ints = { 200, 201, 202, 203 })\r\nvoid sendReturnsObjectOnContent(int statusCode) throws Exception {\r\n    final var authenticationProviderMock = mock(AuthenticationProvider.class);\r\n    authenticationProviderMock.authenticateRequest(any(RequestInformation.class), any(Map.class));\r\n    final var client = getMockClient(new Response.Builder().code(statusCode).message(\"OK\").protocol(Protocol.HTTP_1_1).request(new Request.Builder().url(\"http://localhost\").build()).body(ResponseBody.create(\"test\".getBytes(\"UTF-8\"), MediaType.parse(\"application/json\"))).build());\r\n    final var requestInformation = new RequestInformation() {\r\n\r\n        {\r\n            setUri(new URI(\"https://localhost\"));\r\n            httpMethod = HttpMethod.GET;\r\n        }\r\n    };\r\n    final var mockEntity = mock(Parsable.class);\r\n    when(mockEntity.getFieldDeserializers()).thenReturn(new HashMap<>());\r\n    final var mockParseNode = mock(ParseNode.class);\r\n    when(mockParseNode.getObjectValue(any(ParsableFactory.class))).thenReturn(mockEntity);\r\n    final var mockFactory = mock(ParseNodeFactory.class);\r\n    when(mockFactory.getParseNode(any(String.class), any(InputStream.class))).thenReturn(mockParseNode);\r\n    when(mockFactory.getValidContentType()).thenReturn(\"application/json\");\r\n    final var requestAdapter = new OkHttpRequestAdapter(authenticationProviderMock, mockFactory, null, client);\r\n    final var response = requestAdapter.send(requestInformation, null, (node) -> mockEntity);\r\n    assertNotNull(response);\r\n}"
          }
        },
        {
          "code": "when(mockEntity.getFieldDeserializers()).thenReturn(new HashMap<>());",
          "line": 202,
          "type": "STUBBING",
          "locate": "Test Case",
          "abstractedStatement": "when(com.microsoft.kiota.serialization.Parsable.getFieldDeserializers()).thenReturn(java.util.HashMap)",
          "isMockRelated": true,
          "isShareable": false,
          "locationContext": {
            "methodName": "sendReturnsObjectOnContent",
            "methodAnnotations": [
              "ParameterizedTest",
              "ValueSource"
            ],
            "methodRawCode": "@ParameterizedTest\r\n@ValueSource(ints = { 200, 201, 202, 203 })\r\nvoid sendReturnsObjectOnContent(int statusCode) throws Exception {\r\n    final var authenticationProviderMock = mock(AuthenticationProvider.class);\r\n    authenticationProviderMock.authenticateRequest(any(RequestInformation.class), any(Map.class));\r\n    final var client = getMockClient(new Response.Builder().code(statusCode).message(\"OK\").protocol(Protocol.HTTP_1_1).request(new Request.Builder().url(\"http://localhost\").build()).body(ResponseBody.create(\"test\".getBytes(\"UTF-8\"), MediaType.parse(\"application/json\"))).build());\r\n    final var requestInformation = new RequestInformation() {\r\n\r\n        {\r\n            setUri(new URI(\"https://localhost\"));\r\n            httpMethod = HttpMethod.GET;\r\n        }\r\n    };\r\n    final var mockEntity = mock(Parsable.class);\r\n    when(mockEntity.getFieldDeserializers()).thenReturn(new HashMap<>());\r\n    final var mockParseNode = mock(ParseNode.class);\r\n    when(mockParseNode.getObjectValue(any(ParsableFactory.class))).thenReturn(mockEntity);\r\n    final var mockFactory = mock(ParseNodeFactory.class);\r\n    when(mockFactory.getParseNode(any(String.class), any(InputStream.class))).thenReturn(mockParseNode);\r\n    when(mockFactory.getValidContentType()).thenReturn(\"application/json\");\r\n    final var requestAdapter = new OkHttpRequestAdapter(authenticationProviderMock, mockFactory, null, client);\r\n    final var response = requestAdapter.send(requestInformation, null, (node) -> mockEntity);\r\n    assertNotNull(response);\r\n}"
          }
        },
        {
          "code": "when(mockParseNode.getObjectValue(any(ParsableFactory.class))).thenReturn(mockEntity);",
          "line": 204,
          "type": "REFERENCE",
          "locate": "Test Case",
          "abstractedStatement": "",
          "isMockRelated": false,
          "isShareable": false,
          "locationContext": {
            "methodName": "sendReturnsObjectOnContent",
            "methodAnnotations": [
              "ParameterizedTest",
              "ValueSource"
            ],
            "methodRawCode": "@ParameterizedTest\r\n@ValueSource(ints = { 200, 201, 202, 203 })\r\nvoid sendReturnsObjectOnContent(int statusCode) throws Exception {\r\n    final var authenticationProviderMock = mock(AuthenticationProvider.class);\r\n    authenticationProviderMock.authenticateRequest(any(RequestInformation.class), any(Map.class));\r\n    final var client = getMockClient(new Response.Builder().code(statusCode).message(\"OK\").protocol(Protocol.HTTP_1_1).request(new Request.Builder().url(\"http://localhost\").build()).body(ResponseBody.create(\"test\".getBytes(\"UTF-8\"), MediaType.parse(\"application/json\"))).build());\r\n    final var requestInformation = new RequestInformation() {\r\n\r\n        {\r\n            setUri(new URI(\"https://localhost\"));\r\n            httpMethod = HttpMethod.GET;\r\n        }\r\n    };\r\n    final var mockEntity = mock(Parsable.class);\r\n    when(mockEntity.getFieldDeserializers()).thenReturn(new HashMap<>());\r\n    final var mockParseNode = mock(ParseNode.class);\r\n    when(mockParseNode.getObjectValue(any(ParsableFactory.class))).thenReturn(mockEntity);\r\n    final var mockFactory = mock(ParseNodeFactory.class);\r\n    when(mockFactory.getParseNode(any(String.class), any(InputStream.class))).thenReturn(mockParseNode);\r\n    when(mockFactory.getValidContentType()).thenReturn(\"application/json\");\r\n    final var requestAdapter = new OkHttpRequestAdapter(authenticationProviderMock, mockFactory, null, client);\r\n    final var response = requestAdapter.send(requestInformation, null, (node) -> mockEntity);\r\n    assertNotNull(response);\r\n}"
          }
        }
      ]
    },
    {
      "rawMockObjectId": 44,
      "variableName": "mockParseNode",
      "variableType": "var",
      "mockedClass": "com.microsoft.kiota.serialization.ParseNode",
      "isReuseableMock": false,
      "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
      "mockRole": "mock",
      "classContext": {
        "packageName": "com.microsoft.kiota.http",
        "filePath": "C:\\Java_projects\\Microsoft\\kiota-java\\components\\http\\okHttp\\src\\test\\java\\com\\microsoft\\kiota\\http\\OkHttpRequestAdapterTest.java"
      },
      "statements": [
        {
          "code": "final var mockParseNode = mock(ParseNode.class);",
          "line": 203,
          "type": "METHOD_MOCK_CREATION",
          "locate": "Test Case",
          "abstractedStatement": "",
          "isMockRelated": true,
          "isShareable": false,
          "locationContext": {
            "methodName": "sendReturnsObjectOnContent",
            "methodAnnotations": [
              "ParameterizedTest",
              "ValueSource"
            ],
            "methodRawCode": "@ParameterizedTest\r\n@ValueSource(ints = { 200, 201, 202, 203 })\r\nvoid sendReturnsObjectOnContent(int statusCode) throws Exception {\r\n    final var authenticationProviderMock = mock(AuthenticationProvider.class);\r\n    authenticationProviderMock.authenticateRequest(any(RequestInformation.class), any(Map.class));\r\n    final var client = getMockClient(new Response.Builder().code(statusCode).message(\"OK\").protocol(Protocol.HTTP_1_1).request(new Request.Builder().url(\"http://localhost\").build()).body(ResponseBody.create(\"test\".getBytes(\"UTF-8\"), MediaType.parse(\"application/json\"))).build());\r\n    final var requestInformation = new RequestInformation() {\r\n\r\n        {\r\n            setUri(new URI(\"https://localhost\"));\r\n            httpMethod = HttpMethod.GET;\r\n        }\r\n    };\r\n    final var mockEntity = mock(Parsable.class);\r\n    when(mockEntity.getFieldDeserializers()).thenReturn(new HashMap<>());\r\n    final var mockParseNode = mock(ParseNode.class);\r\n    when(mockParseNode.getObjectValue(any(ParsableFactory.class))).thenReturn(mockEntity);\r\n    final var mockFactory = mock(ParseNodeFactory.class);\r\n    when(mockFactory.getParseNode(any(String.class), any(InputStream.class))).thenReturn(mockParseNode);\r\n    when(mockFactory.getValidContentType()).thenReturn(\"application/json\");\r\n    final var requestAdapter = new OkHttpRequestAdapter(authenticationProviderMock, mockFactory, null, client);\r\n    final var response = requestAdapter.send(requestInformation, null, (node) -> mockEntity);\r\n    assertNotNull(response);\r\n}"
          }
        },
        {
          "code": "when(mockParseNode.getObjectValue(any(ParsableFactory.class))).thenReturn(mockEntity);",
          "line": 204,
          "type": "STUBBING",
          "locate": "Test Case",
          "abstractedStatement": "when(com.microsoft.kiota.serialization.ParseNode.getObjectValue(any(ParsableFactory.class))).thenReturn(com.microsoft.kiota.serialization.Parsable)",
          "isMockRelated": true,
          "isShareable": false,
          "locationContext": {
            "methodName": "sendReturnsObjectOnContent",
            "methodAnnotations": [
              "ParameterizedTest",
              "ValueSource"
            ],
            "methodRawCode": "@ParameterizedTest\r\n@ValueSource(ints = { 200, 201, 202, 203 })\r\nvoid sendReturnsObjectOnContent(int statusCode) throws Exception {\r\n    final var authenticationProviderMock = mock(AuthenticationProvider.class);\r\n    authenticationProviderMock.authenticateRequest(any(RequestInformation.class), any(Map.class));\r\n    final var client = getMockClient(new Response.Builder().code(statusCode).message(\"OK\").protocol(Protocol.HTTP_1_1).request(new Request.Builder().url(\"http://localhost\").build()).body(ResponseBody.create(\"test\".getBytes(\"UTF-8\"), MediaType.parse(\"application/json\"))).build());\r\n    final var requestInformation = new RequestInformation() {\r\n\r\n        {\r\n            setUri(new URI(\"https://localhost\"));\r\n            httpMethod = HttpMethod.GET;\r\n        }\r\n    };\r\n    final var mockEntity = mock(Parsable.class);\r\n    when(mockEntity.getFieldDeserializers()).thenReturn(new HashMap<>());\r\n    final var mockParseNode = mock(ParseNode.class);\r\n    when(mockParseNode.getObjectValue(any(ParsableFactory.class))).thenReturn(mockEntity);\r\n    final var mockFactory = mock(ParseNodeFactory.class);\r\n    when(mockFactory.getParseNode(any(String.class), any(InputStream.class))).thenReturn(mockParseNode);\r\n    when(mockFactory.getValidContentType()).thenReturn(\"application/json\");\r\n    final var requestAdapter = new OkHttpRequestAdapter(authenticationProviderMock, mockFactory, null, client);\r\n    final var response = requestAdapter.send(requestInformation, null, (node) -> mockEntity);\r\n    assertNotNull(response);\r\n}"
          }
        },
        {
          "code": "when(mockFactory.getParseNode(any(String.class), any(InputStream.class))).thenReturn(mockParseNode);",
          "line": 206,
          "type": "REFERENCE",
          "locate": "Test Case",
          "abstractedStatement": "",
          "isMockRelated": false,
          "isShareable": false,
          "locationContext": {
            "methodName": "sendReturnsObjectOnContent",
            "methodAnnotations": [
              "ParameterizedTest",
              "ValueSource"
            ],
            "methodRawCode": "@ParameterizedTest\r\n@ValueSource(ints = { 200, 201, 202, 203 })\r\nvoid sendReturnsObjectOnContent(int statusCode) throws Exception {\r\n    final var authenticationProviderMock = mock(AuthenticationProvider.class);\r\n    authenticationProviderMock.authenticateRequest(any(RequestInformation.class), any(Map.class));\r\n    final var client = getMockClient(new Response.Builder().code(statusCode).message(\"OK\").protocol(Protocol.HTTP_1_1).request(new Request.Builder().url(\"http://localhost\").build()).body(ResponseBody.create(\"test\".getBytes(\"UTF-8\"), MediaType.parse(\"application/json\"))).build());\r\n    final var requestInformation = new RequestInformation() {\r\n\r\n        {\r\n            setUri(new URI(\"https://localhost\"));\r\n            httpMethod = HttpMethod.GET;\r\n        }\r\n    };\r\n    final var mockEntity = mock(Parsable.class);\r\n    when(mockEntity.getFieldDeserializers()).thenReturn(new HashMap<>());\r\n    final var mockParseNode = mock(ParseNode.class);\r\n    when(mockParseNode.getObjectValue(any(ParsableFactory.class))).thenReturn(mockEntity);\r\n    final var mockFactory = mock(ParseNodeFactory.class);\r\n    when(mockFactory.getParseNode(any(String.class), any(InputStream.class))).thenReturn(mockParseNode);\r\n    when(mockFactory.getValidContentType()).thenReturn(\"application/json\");\r\n    final var requestAdapter = new OkHttpRequestAdapter(authenticationProviderMock, mockFactory, null, client);\r\n    final var response = requestAdapter.send(requestInformation, null, (node) -> mockEntity);\r\n    assertNotNull(response);\r\n}"
          }
        }
      ]
    },
    {
      "rawMockObjectId": 45,
      "variableName": "mockFactory",
      "variableType": "var",
      "mockedClass": "com.microsoft.kiota.serialization.ParseNodeFactory",
      "isReuseableMock": false,
      "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
      "mockRole": "mock",
      "classContext": {
        "packageName": "com.microsoft.kiota.http",
        "filePath": "C:\\Java_projects\\Microsoft\\kiota-java\\components\\http\\okHttp\\src\\test\\java\\com\\microsoft\\kiota\\http\\OkHttpRequestAdapterTest.java"
      },
      "statements": [
        {
          "code": "final var mockFactory = mock(ParseNodeFactory.class);",
          "line": 205,
          "type": "METHOD_MOCK_CREATION",
          "locate": "Test Case",
          "abstractedStatement": "",
          "isMockRelated": true,
          "isShareable": false,
          "locationContext": {
            "methodName": "sendReturnsObjectOnContent",
            "methodAnnotations": [
              "ParameterizedTest",
              "ValueSource"
            ],
            "methodRawCode": "@ParameterizedTest\r\n@ValueSource(ints = { 200, 201, 202, 203 })\r\nvoid sendReturnsObjectOnContent(int statusCode) throws Exception {\r\n    final var authenticationProviderMock = mock(AuthenticationProvider.class);\r\n    authenticationProviderMock.authenticateRequest(any(RequestInformation.class), any(Map.class));\r\n    final var client = getMockClient(new Response.Builder().code(statusCode).message(\"OK\").protocol(Protocol.HTTP_1_1).request(new Request.Builder().url(\"http://localhost\").build()).body(ResponseBody.create(\"test\".getBytes(\"UTF-8\"), MediaType.parse(\"application/json\"))).build());\r\n    final var requestInformation = new RequestInformation() {\r\n\r\n        {\r\n            setUri(new URI(\"https://localhost\"));\r\n            httpMethod = HttpMethod.GET;\r\n        }\r\n    };\r\n    final var mockEntity = mock(Parsable.class);\r\n    when(mockEntity.getFieldDeserializers()).thenReturn(new HashMap<>());\r\n    final var mockParseNode = mock(ParseNode.class);\r\n    when(mockParseNode.getObjectValue(any(ParsableFactory.class))).thenReturn(mockEntity);\r\n    final var mockFactory = mock(ParseNodeFactory.class);\r\n    when(mockFactory.getParseNode(any(String.class), any(InputStream.class))).thenReturn(mockParseNode);\r\n    when(mockFactory.getValidContentType()).thenReturn(\"application/json\");\r\n    final var requestAdapter = new OkHttpRequestAdapter(authenticationProviderMock, mockFactory, null, client);\r\n    final var response = requestAdapter.send(requestInformation, null, (node) -> mockEntity);\r\n    assertNotNull(response);\r\n}"
          }
        },
        {
          "code": "when(mockFactory.getParseNode(any(String.class), any(InputStream.class))).thenReturn(mockParseNode);",
          "line": 206,
          "type": "STUBBING",
          "locate": "Test Case",
          "abstractedStatement": "when(com.microsoft.kiota.serialization.ParseNodeFactory.getParseNode(any(String.class), any(InputStream.class))).thenReturn(com.microsoft.kiota.serialization.ParseNode)",
          "isMockRelated": true,
          "isShareable": false,
          "locationContext": {
            "methodName": "sendReturnsObjectOnContent",
            "methodAnnotations": [
              "ParameterizedTest",
              "ValueSource"
            ],
            "methodRawCode": "@ParameterizedTest\r\n@ValueSource(ints = { 200, 201, 202, 203 })\r\nvoid sendReturnsObjectOnContent(int statusCode) throws Exception {\r\n    final var authenticationProviderMock = mock(AuthenticationProvider.class);\r\n    authenticationProviderMock.authenticateRequest(any(RequestInformation.class), any(Map.class));\r\n    final var client = getMockClient(new Response.Builder().code(statusCode).message(\"OK\").protocol(Protocol.HTTP_1_1).request(new Request.Builder().url(\"http://localhost\").build()).body(ResponseBody.create(\"test\".getBytes(\"UTF-8\"), MediaType.parse(\"application/json\"))).build());\r\n    final var requestInformation = new RequestInformation() {\r\n\r\n        {\r\n            setUri(new URI(\"https://localhost\"));\r\n            httpMethod = HttpMethod.GET;\r\n        }\r\n    };\r\n    final var mockEntity = mock(Parsable.class);\r\n    when(mockEntity.getFieldDeserializers()).thenReturn(new HashMap<>());\r\n    final var mockParseNode = mock(ParseNode.class);\r\n    when(mockParseNode.getObjectValue(any(ParsableFactory.class))).thenReturn(mockEntity);\r\n    final var mockFactory = mock(ParseNodeFactory.class);\r\n    when(mockFactory.getParseNode(any(String.class), any(InputStream.class))).thenReturn(mockParseNode);\r\n    when(mockFactory.getValidContentType()).thenReturn(\"application/json\");\r\n    final var requestAdapter = new OkHttpRequestAdapter(authenticationProviderMock, mockFactory, null, client);\r\n    final var response = requestAdapter.send(requestInformation, null, (node) -> mockEntity);\r\n    assertNotNull(response);\r\n}"
          }
        },
        {
          "code": "when(mockFactory.getValidContentType()).thenReturn(\"application/json\");",
          "line": 208,
          "type": "STUBBING",
          "locate": "Test Case",
          "abstractedStatement": "when(com.microsoft.kiota.serialization.ParseNodeFactory.getValidContentType()).thenReturn(java.lang.String)",
          "isMockRelated": true,
          "isShareable": false,
          "locationContext": {
            "methodName": "sendReturnsObjectOnContent",
            "methodAnnotations": [
              "ParameterizedTest",
              "ValueSource"
            ],
            "methodRawCode": "@ParameterizedTest\r\n@ValueSource(ints = { 200, 201, 202, 203 })\r\nvoid sendReturnsObjectOnContent(int statusCode) throws Exception {\r\n    final var authenticationProviderMock = mock(AuthenticationProvider.class);\r\n    authenticationProviderMock.authenticateRequest(any(RequestInformation.class), any(Map.class));\r\n    final var client = getMockClient(new Response.Builder().code(statusCode).message(\"OK\").protocol(Protocol.HTTP_1_1).request(new Request.Builder().url(\"http://localhost\").build()).body(ResponseBody.create(\"test\".getBytes(\"UTF-8\"), MediaType.parse(\"application/json\"))).build());\r\n    final var requestInformation = new RequestInformation() {\r\n\r\n        {\r\n            setUri(new URI(\"https://localhost\"));\r\n            httpMethod = HttpMethod.GET;\r\n        }\r\n    };\r\n    final var mockEntity = mock(Parsable.class);\r\n    when(mockEntity.getFieldDeserializers()).thenReturn(new HashMap<>());\r\n    final var mockParseNode = mock(ParseNode.class);\r\n    when(mockParseNode.getObjectValue(any(ParsableFactory.class))).thenReturn(mockEntity);\r\n    final var mockFactory = mock(ParseNodeFactory.class);\r\n    when(mockFactory.getParseNode(any(String.class), any(InputStream.class))).thenReturn(mockParseNode);\r\n    when(mockFactory.getValidContentType()).thenReturn(\"application/json\");\r\n    final var requestAdapter = new OkHttpRequestAdapter(authenticationProviderMock, mockFactory, null, client);\r\n    final var response = requestAdapter.send(requestInformation, null, (node) -> mockEntity);\r\n    assertNotNull(response);\r\n}"
          }
        }
      ]
    },
    {
      "rawMockObjectId": 46,
      "variableName": "authenticationProviderMock",
      "variableType": "var",
      "mockedClass": "com.microsoft.kiota.authentication.AuthenticationProvider",
      "isReuseableMock": false,
      "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— None\n\nVerification:\n— None",
      "mockRole": "mock",
      "classContext": {
        "packageName": "com.microsoft.kiota.http",
        "filePath": "C:\\Java_projects\\Microsoft\\kiota-java\\components\\http\\okHttp\\src\\test\\java\\com\\microsoft\\kiota\\http\\OkHttpRequestAdapterTest.java"
      },
      "statements": [
        {
          "code": "final var authenticationProviderMock = mock(AuthenticationProvider.class);",
          "line": 240,
          "type": "METHOD_MOCK_CREATION",
          "locate": "Test Case",
          "abstractedStatement": "",
          "isMockRelated": true,
          "isShareable": false,
          "locationContext": {
            "methodName": "throwsAPIException",
            "methodAnnotations": [
              "SuppressWarnings",
              "ParameterizedTest",
              "MethodSource"
            ],
            "methodRawCode": "@SuppressWarnings(\"unchecked\")\r\n@ParameterizedTest\r\n@MethodSource(\"providesErrorMappings\")\r\nvoid throwsAPIException(int responseStatusCode, List<String> errorMappingCodes, boolean expectDeserializedException) throws Exception {\r\n    final var authenticationProviderMock = mock(AuthenticationProvider.class);\r\n    authenticationProviderMock.authenticateRequest(any(RequestInformation.class), any(Map.class));\r\n    final var client = getMockClient(new Response.Builder().code(responseStatusCode).message(\"Not Found\").protocol(Protocol.HTTP_1_1).request(new Request.Builder().url(\"http://localhost\").build()).body(ResponseBody.create(\"test\".getBytes(\"UTF-8\"), MediaType.parse(\"application/json\"))).header(\"request-id\", \"request-id-value\").build());\r\n    final var requestInformation = new RequestInformation() {\r\n\r\n        {\r\n            setUri(new URI(\"https://localhost\"));\r\n            httpMethod = HttpMethod.GET;\r\n        }\r\n    };\r\n    final var mockEntity = mock(Parsable.class);\r\n    when(mockEntity.getFieldDeserializers()).thenReturn(new HashMap<>());\r\n    final var mockParsableFactory = mock(ParsableFactory.class);\r\n    when(mockParsableFactory.create(any(ParseNode.class))).thenReturn(mockEntity);\r\n    final var mockParseNode = mock(ParseNode.class);\r\n    when(mockParseNode.getObjectValue(any(ParsableFactory.class))).thenReturn(mockEntity);\r\n    final var mockFactory = mock(ParseNodeFactory.class);\r\n    when(mockFactory.getParseNode(any(String.class), any(InputStream.class))).thenReturn(mockParseNode);\r\n    when(mockFactory.getValidContentType()).thenReturn(\"application/json\");\r\n    final var requestAdapter = new OkHttpRequestAdapter(authenticationProviderMock, mockFactory, null, client);\r\n    final var errorMappings = errorMappingCodes == null ? null : new HashMap<String, ParsableFactory<? extends Parsable>>();\r\n    if (errorMappings != null)\r\n        errorMappingCodes.forEach((mapping) -> errorMappings.put(mapping, mockParsableFactory));\r\n    final var exception = assertThrows(ApiException.class, () -> requestAdapter.send(requestInformation, errorMappings, (node) -> mockEntity));\r\n    assertNotNull(exception);\r\n    if (expectDeserializedException)\r\n        verify(mockParseNode, times(1)).getObjectValue(mockParsableFactory);\r\n    assertEquals(responseStatusCode, exception.getResponseStatusCode());\r\n    assertTrue(exception.getResponseHeaders().containsKey(\"request-id\"));\r\n}"
          }
        },
        {
          "code": "authenticationProviderMock.authenticateRequest(any(RequestInformation.class), any(Map.class));",
          "line": 241,
          "type": "REFERENCE",
          "locate": "Test Case",
          "abstractedStatement": "",
          "isMockRelated": false,
          "isShareable": false,
          "locationContext": {
            "methodName": "throwsAPIException",
            "methodAnnotations": [
              "SuppressWarnings",
              "ParameterizedTest",
              "MethodSource"
            ],
            "methodRawCode": "@SuppressWarnings(\"unchecked\")\r\n@ParameterizedTest\r\n@MethodSource(\"providesErrorMappings\")\r\nvoid throwsAPIException(int responseStatusCode, List<String> errorMappingCodes, boolean expectDeserializedException) throws Exception {\r\n    final var authenticationProviderMock = mock(AuthenticationProvider.class);\r\n    authenticationProviderMock.authenticateRequest(any(RequestInformation.class), any(Map.class));\r\n    final var client = getMockClient(new Response.Builder().code(responseStatusCode).message(\"Not Found\").protocol(Protocol.HTTP_1_1).request(new Request.Builder().url(\"http://localhost\").build()).body(ResponseBody.create(\"test\".getBytes(\"UTF-8\"), MediaType.parse(\"application/json\"))).header(\"request-id\", \"request-id-value\").build());\r\n    final var requestInformation = new RequestInformation() {\r\n\r\n        {\r\n            setUri(new URI(\"https://localhost\"));\r\n            httpMethod = HttpMethod.GET;\r\n        }\r\n    };\r\n    final var mockEntity = mock(Parsable.class);\r\n    when(mockEntity.getFieldDeserializers()).thenReturn(new HashMap<>());\r\n    final var mockParsableFactory = mock(ParsableFactory.class);\r\n    when(mockParsableFactory.create(any(ParseNode.class))).thenReturn(mockEntity);\r\n    final var mockParseNode = mock(ParseNode.class);\r\n    when(mockParseNode.getObjectValue(any(ParsableFactory.class))).thenReturn(mockEntity);\r\n    final var mockFactory = mock(ParseNodeFactory.class);\r\n    when(mockFactory.getParseNode(any(String.class), any(InputStream.class))).thenReturn(mockParseNode);\r\n    when(mockFactory.getValidContentType()).thenReturn(\"application/json\");\r\n    final var requestAdapter = new OkHttpRequestAdapter(authenticationProviderMock, mockFactory, null, client);\r\n    final var errorMappings = errorMappingCodes == null ? null : new HashMap<String, ParsableFactory<? extends Parsable>>();\r\n    if (errorMappings != null)\r\n        errorMappingCodes.forEach((mapping) -> errorMappings.put(mapping, mockParsableFactory));\r\n    final var exception = assertThrows(ApiException.class, () -> requestAdapter.send(requestInformation, errorMappings, (node) -> mockEntity));\r\n    assertNotNull(exception);\r\n    if (expectDeserializedException)\r\n        verify(mockParseNode, times(1)).getObjectValue(mockParsableFactory);\r\n    assertEquals(responseStatusCode, exception.getResponseStatusCode());\r\n    assertTrue(exception.getResponseHeaders().containsKey(\"request-id\"));\r\n}"
          }
        }
      ]
    },
    {
      "rawMockObjectId": 47,
      "variableName": "mockEntity",
      "variableType": "var",
      "mockedClass": "com.microsoft.kiota.serialization.Parsable",
      "isReuseableMock": false,
      "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
      "mockRole": "mock",
      "classContext": {
        "packageName": "com.microsoft.kiota.http",
        "filePath": "C:\\Java_projects\\Microsoft\\kiota-java\\components\\http\\okHttp\\src\\test\\java\\com\\microsoft\\kiota\\http\\OkHttpRequestAdapterTest.java"
      },
      "statements": [
        {
          "code": "final var mockEntity = mock(Parsable.class);",
          "line": 263,
          "type": "METHOD_MOCK_CREATION",
          "locate": "Test Case",
          "abstractedStatement": "",
          "isMockRelated": true,
          "isShareable": false,
          "locationContext": {
            "methodName": "throwsAPIException",
            "methodAnnotations": [
              "SuppressWarnings",
              "ParameterizedTest",
              "MethodSource"
            ],
            "methodRawCode": "@SuppressWarnings(\"unchecked\")\r\n@ParameterizedTest\r\n@MethodSource(\"providesErrorMappings\")\r\nvoid throwsAPIException(int responseStatusCode, List<String> errorMappingCodes, boolean expectDeserializedException) throws Exception {\r\n    final var authenticationProviderMock = mock(AuthenticationProvider.class);\r\n    authenticationProviderMock.authenticateRequest(any(RequestInformation.class), any(Map.class));\r\n    final var client = getMockClient(new Response.Builder().code(responseStatusCode).message(\"Not Found\").protocol(Protocol.HTTP_1_1).request(new Request.Builder().url(\"http://localhost\").build()).body(ResponseBody.create(\"test\".getBytes(\"UTF-8\"), MediaType.parse(\"application/json\"))).header(\"request-id\", \"request-id-value\").build());\r\n    final var requestInformation = new RequestInformation() {\r\n\r\n        {\r\n            setUri(new URI(\"https://localhost\"));\r\n            httpMethod = HttpMethod.GET;\r\n        }\r\n    };\r\n    final var mockEntity = mock(Parsable.class);\r\n    when(mockEntity.getFieldDeserializers()).thenReturn(new HashMap<>());\r\n    final var mockParsableFactory = mock(ParsableFactory.class);\r\n    when(mockParsableFactory.create(any(ParseNode.class))).thenReturn(mockEntity);\r\n    final var mockParseNode = mock(ParseNode.class);\r\n    when(mockParseNode.getObjectValue(any(ParsableFactory.class))).thenReturn(mockEntity);\r\n    final var mockFactory = mock(ParseNodeFactory.class);\r\n    when(mockFactory.getParseNode(any(String.class), any(InputStream.class))).thenReturn(mockParseNode);\r\n    when(mockFactory.getValidContentType()).thenReturn(\"application/json\");\r\n    final var requestAdapter = new OkHttpRequestAdapter(authenticationProviderMock, mockFactory, null, client);\r\n    final var errorMappings = errorMappingCodes == null ? null : new HashMap<String, ParsableFactory<? extends Parsable>>();\r\n    if (errorMappings != null)\r\n        errorMappingCodes.forEach((mapping) -> errorMappings.put(mapping, mockParsableFactory));\r\n    final var exception = assertThrows(ApiException.class, () -> requestAdapter.send(requestInformation, errorMappings, (node) -> mockEntity));\r\n    assertNotNull(exception);\r\n    if (expectDeserializedException)\r\n        verify(mockParseNode, times(1)).getObjectValue(mockParsableFactory);\r\n    assertEquals(responseStatusCode, exception.getResponseStatusCode());\r\n    assertTrue(exception.getResponseHeaders().containsKey(\"request-id\"));\r\n}"
          }
        },
        {
          "code": "when(mockEntity.getFieldDeserializers()).thenReturn(new HashMap<>());",
          "line": 264,
          "type": "STUBBING",
          "locate": "Test Case",
          "abstractedStatement": "when(com.microsoft.kiota.serialization.Parsable.getFieldDeserializers()).thenReturn(java.util.HashMap)",
          "isMockRelated": true,
          "isShareable": false,
          "locationContext": {
            "methodName": "throwsAPIException",
            "methodAnnotations": [
              "SuppressWarnings",
              "ParameterizedTest",
              "MethodSource"
            ],
            "methodRawCode": "@SuppressWarnings(\"unchecked\")\r\n@ParameterizedTest\r\n@MethodSource(\"providesErrorMappings\")\r\nvoid throwsAPIException(int responseStatusCode, List<String> errorMappingCodes, boolean expectDeserializedException) throws Exception {\r\n    final var authenticationProviderMock = mock(AuthenticationProvider.class);\r\n    authenticationProviderMock.authenticateRequest(any(RequestInformation.class), any(Map.class));\r\n    final var client = getMockClient(new Response.Builder().code(responseStatusCode).message(\"Not Found\").protocol(Protocol.HTTP_1_1).request(new Request.Builder().url(\"http://localhost\").build()).body(ResponseBody.create(\"test\".getBytes(\"UTF-8\"), MediaType.parse(\"application/json\"))).header(\"request-id\", \"request-id-value\").build());\r\n    final var requestInformation = new RequestInformation() {\r\n\r\n        {\r\n            setUri(new URI(\"https://localhost\"));\r\n            httpMethod = HttpMethod.GET;\r\n        }\r\n    };\r\n    final var mockEntity = mock(Parsable.class);\r\n    when(mockEntity.getFieldDeserializers()).thenReturn(new HashMap<>());\r\n    final var mockParsableFactory = mock(ParsableFactory.class);\r\n    when(mockParsableFactory.create(any(ParseNode.class))).thenReturn(mockEntity);\r\n    final var mockParseNode = mock(ParseNode.class);\r\n    when(mockParseNode.getObjectValue(any(ParsableFactory.class))).thenReturn(mockEntity);\r\n    final var mockFactory = mock(ParseNodeFactory.class);\r\n    when(mockFactory.getParseNode(any(String.class), any(InputStream.class))).thenReturn(mockParseNode);\r\n    when(mockFactory.getValidContentType()).thenReturn(\"application/json\");\r\n    final var requestAdapter = new OkHttpRequestAdapter(authenticationProviderMock, mockFactory, null, client);\r\n    final var errorMappings = errorMappingCodes == null ? null : new HashMap<String, ParsableFactory<? extends Parsable>>();\r\n    if (errorMappings != null)\r\n        errorMappingCodes.forEach((mapping) -> errorMappings.put(mapping, mockParsableFactory));\r\n    final var exception = assertThrows(ApiException.class, () -> requestAdapter.send(requestInformation, errorMappings, (node) -> mockEntity));\r\n    assertNotNull(exception);\r\n    if (expectDeserializedException)\r\n        verify(mockParseNode, times(1)).getObjectValue(mockParsableFactory);\r\n    assertEquals(responseStatusCode, exception.getResponseStatusCode());\r\n    assertTrue(exception.getResponseHeaders().containsKey(\"request-id\"));\r\n}"
          }
        },
        {
          "code": "when(mockParsableFactory.create(any(ParseNode.class))).thenReturn(mockEntity);",
          "line": 266,
          "type": "REFERENCE",
          "locate": "Test Case",
          "abstractedStatement": "",
          "isMockRelated": false,
          "isShareable": false,
          "locationContext": {
            "methodName": "throwsAPIException",
            "methodAnnotations": [
              "SuppressWarnings",
              "ParameterizedTest",
              "MethodSource"
            ],
            "methodRawCode": "@SuppressWarnings(\"unchecked\")\r\n@ParameterizedTest\r\n@MethodSource(\"providesErrorMappings\")\r\nvoid throwsAPIException(int responseStatusCode, List<String> errorMappingCodes, boolean expectDeserializedException) throws Exception {\r\n    final var authenticationProviderMock = mock(AuthenticationProvider.class);\r\n    authenticationProviderMock.authenticateRequest(any(RequestInformation.class), any(Map.class));\r\n    final var client = getMockClient(new Response.Builder().code(responseStatusCode).message(\"Not Found\").protocol(Protocol.HTTP_1_1).request(new Request.Builder().url(\"http://localhost\").build()).body(ResponseBody.create(\"test\".getBytes(\"UTF-8\"), MediaType.parse(\"application/json\"))).header(\"request-id\", \"request-id-value\").build());\r\n    final var requestInformation = new RequestInformation() {\r\n\r\n        {\r\n            setUri(new URI(\"https://localhost\"));\r\n            httpMethod = HttpMethod.GET;\r\n        }\r\n    };\r\n    final var mockEntity = mock(Parsable.class);\r\n    when(mockEntity.getFieldDeserializers()).thenReturn(new HashMap<>());\r\n    final var mockParsableFactory = mock(ParsableFactory.class);\r\n    when(mockParsableFactory.create(any(ParseNode.class))).thenReturn(mockEntity);\r\n    final var mockParseNode = mock(ParseNode.class);\r\n    when(mockParseNode.getObjectValue(any(ParsableFactory.class))).thenReturn(mockEntity);\r\n    final var mockFactory = mock(ParseNodeFactory.class);\r\n    when(mockFactory.getParseNode(any(String.class), any(InputStream.class))).thenReturn(mockParseNode);\r\n    when(mockFactory.getValidContentType()).thenReturn(\"application/json\");\r\n    final var requestAdapter = new OkHttpRequestAdapter(authenticationProviderMock, mockFactory, null, client);\r\n    final var errorMappings = errorMappingCodes == null ? null : new HashMap<String, ParsableFactory<? extends Parsable>>();\r\n    if (errorMappings != null)\r\n        errorMappingCodes.forEach((mapping) -> errorMappings.put(mapping, mockParsableFactory));\r\n    final var exception = assertThrows(ApiException.class, () -> requestAdapter.send(requestInformation, errorMappings, (node) -> mockEntity));\r\n    assertNotNull(exception);\r\n    if (expectDeserializedException)\r\n        verify(mockParseNode, times(1)).getObjectValue(mockParsableFactory);\r\n    assertEquals(responseStatusCode, exception.getResponseStatusCode());\r\n    assertTrue(exception.getResponseHeaders().containsKey(\"request-id\"));\r\n}"
          }
        },
        {
          "code": "when(mockParseNode.getObjectValue(any(ParsableFactory.class))).thenReturn(mockEntity);",
          "line": 268,
          "type": "REFERENCE",
          "locate": "Test Case",
          "abstractedStatement": "",
          "isMockRelated": false,
          "isShareable": false,
          "locationContext": {
            "methodName": "throwsAPIException",
            "methodAnnotations": [
              "SuppressWarnings",
              "ParameterizedTest",
              "MethodSource"
            ],
            "methodRawCode": "@SuppressWarnings(\"unchecked\")\r\n@ParameterizedTest\r\n@MethodSource(\"providesErrorMappings\")\r\nvoid throwsAPIException(int responseStatusCode, List<String> errorMappingCodes, boolean expectDeserializedException) throws Exception {\r\n    final var authenticationProviderMock = mock(AuthenticationProvider.class);\r\n    authenticationProviderMock.authenticateRequest(any(RequestInformation.class), any(Map.class));\r\n    final var client = getMockClient(new Response.Builder().code(responseStatusCode).message(\"Not Found\").protocol(Protocol.HTTP_1_1).request(new Request.Builder().url(\"http://localhost\").build()).body(ResponseBody.create(\"test\".getBytes(\"UTF-8\"), MediaType.parse(\"application/json\"))).header(\"request-id\", \"request-id-value\").build());\r\n    final var requestInformation = new RequestInformation() {\r\n\r\n        {\r\n            setUri(new URI(\"https://localhost\"));\r\n            httpMethod = HttpMethod.GET;\r\n        }\r\n    };\r\n    final var mockEntity = mock(Parsable.class);\r\n    when(mockEntity.getFieldDeserializers()).thenReturn(new HashMap<>());\r\n    final var mockParsableFactory = mock(ParsableFactory.class);\r\n    when(mockParsableFactory.create(any(ParseNode.class))).thenReturn(mockEntity);\r\n    final var mockParseNode = mock(ParseNode.class);\r\n    when(mockParseNode.getObjectValue(any(ParsableFactory.class))).thenReturn(mockEntity);\r\n    final var mockFactory = mock(ParseNodeFactory.class);\r\n    when(mockFactory.getParseNode(any(String.class), any(InputStream.class))).thenReturn(mockParseNode);\r\n    when(mockFactory.getValidContentType()).thenReturn(\"application/json\");\r\n    final var requestAdapter = new OkHttpRequestAdapter(authenticationProviderMock, mockFactory, null, client);\r\n    final var errorMappings = errorMappingCodes == null ? null : new HashMap<String, ParsableFactory<? extends Parsable>>();\r\n    if (errorMappings != null)\r\n        errorMappingCodes.forEach((mapping) -> errorMappings.put(mapping, mockParsableFactory));\r\n    final var exception = assertThrows(ApiException.class, () -> requestAdapter.send(requestInformation, errorMappings, (node) -> mockEntity));\r\n    assertNotNull(exception);\r\n    if (expectDeserializedException)\r\n        verify(mockParseNode, times(1)).getObjectValue(mockParsableFactory);\r\n    assertEquals(responseStatusCode, exception.getResponseStatusCode());\r\n    assertTrue(exception.getResponseHeaders().containsKey(\"request-id\"));\r\n}"
          }
        }
      ]
    },
    {
      "rawMockObjectId": 48,
      "variableName": "mockParsableFactory",
      "variableType": "var",
      "mockedClass": "com.microsoft.kiota.serialization.ParsableFactory",
      "isReuseableMock": false,
      "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
      "mockRole": "mock",
      "classContext": {
        "packageName": "com.microsoft.kiota.http",
        "filePath": "C:\\Java_projects\\Microsoft\\kiota-java\\components\\http\\okHttp\\src\\test\\java\\com\\microsoft\\kiota\\http\\OkHttpRequestAdapterTest.java"
      },
      "statements": [
        {
          "code": "final var mockParsableFactory = mock(ParsableFactory.class);",
          "line": 265,
          "type": "METHOD_MOCK_CREATION",
          "locate": "Test Case",
          "abstractedStatement": "",
          "isMockRelated": true,
          "isShareable": false,
          "locationContext": {
            "methodName": "throwsAPIException",
            "methodAnnotations": [
              "SuppressWarnings",
              "ParameterizedTest",
              "MethodSource"
            ],
            "methodRawCode": "@SuppressWarnings(\"unchecked\")\r\n@ParameterizedTest\r\n@MethodSource(\"providesErrorMappings\")\r\nvoid throwsAPIException(int responseStatusCode, List<String> errorMappingCodes, boolean expectDeserializedException) throws Exception {\r\n    final var authenticationProviderMock = mock(AuthenticationProvider.class);\r\n    authenticationProviderMock.authenticateRequest(any(RequestInformation.class), any(Map.class));\r\n    final var client = getMockClient(new Response.Builder().code(responseStatusCode).message(\"Not Found\").protocol(Protocol.HTTP_1_1).request(new Request.Builder().url(\"http://localhost\").build()).body(ResponseBody.create(\"test\".getBytes(\"UTF-8\"), MediaType.parse(\"application/json\"))).header(\"request-id\", \"request-id-value\").build());\r\n    final var requestInformation = new RequestInformation() {\r\n\r\n        {\r\n            setUri(new URI(\"https://localhost\"));\r\n            httpMethod = HttpMethod.GET;\r\n        }\r\n    };\r\n    final var mockEntity = mock(Parsable.class);\r\n    when(mockEntity.getFieldDeserializers()).thenReturn(new HashMap<>());\r\n    final var mockParsableFactory = mock(ParsableFactory.class);\r\n    when(mockParsableFactory.create(any(ParseNode.class))).thenReturn(mockEntity);\r\n    final var mockParseNode = mock(ParseNode.class);\r\n    when(mockParseNode.getObjectValue(any(ParsableFactory.class))).thenReturn(mockEntity);\r\n    final var mockFactory = mock(ParseNodeFactory.class);\r\n    when(mockFactory.getParseNode(any(String.class), any(InputStream.class))).thenReturn(mockParseNode);\r\n    when(mockFactory.getValidContentType()).thenReturn(\"application/json\");\r\n    final var requestAdapter = new OkHttpRequestAdapter(authenticationProviderMock, mockFactory, null, client);\r\n    final var errorMappings = errorMappingCodes == null ? null : new HashMap<String, ParsableFactory<? extends Parsable>>();\r\n    if (errorMappings != null)\r\n        errorMappingCodes.forEach((mapping) -> errorMappings.put(mapping, mockParsableFactory));\r\n    final var exception = assertThrows(ApiException.class, () -> requestAdapter.send(requestInformation, errorMappings, (node) -> mockEntity));\r\n    assertNotNull(exception);\r\n    if (expectDeserializedException)\r\n        verify(mockParseNode, times(1)).getObjectValue(mockParsableFactory);\r\n    assertEquals(responseStatusCode, exception.getResponseStatusCode());\r\n    assertTrue(exception.getResponseHeaders().containsKey(\"request-id\"));\r\n}"
          }
        },
        {
          "code": "when(mockParsableFactory.create(any(ParseNode.class))).thenReturn(mockEntity);",
          "line": 266,
          "type": "STUBBING",
          "locate": "Test Case",
          "abstractedStatement": "when(com.microsoft.kiota.serialization.ParsableFactory.create(any(ParseNode.class))).thenReturn(com.microsoft.kiota.serialization.Parsable)",
          "isMockRelated": true,
          "isShareable": false,
          "locationContext": {
            "methodName": "throwsAPIException",
            "methodAnnotations": [
              "SuppressWarnings",
              "ParameterizedTest",
              "MethodSource"
            ],
            "methodRawCode": "@SuppressWarnings(\"unchecked\")\r\n@ParameterizedTest\r\n@MethodSource(\"providesErrorMappings\")\r\nvoid throwsAPIException(int responseStatusCode, List<String> errorMappingCodes, boolean expectDeserializedException) throws Exception {\r\n    final var authenticationProviderMock = mock(AuthenticationProvider.class);\r\n    authenticationProviderMock.authenticateRequest(any(RequestInformation.class), any(Map.class));\r\n    final var client = getMockClient(new Response.Builder().code(responseStatusCode).message(\"Not Found\").protocol(Protocol.HTTP_1_1).request(new Request.Builder().url(\"http://localhost\").build()).body(ResponseBody.create(\"test\".getBytes(\"UTF-8\"), MediaType.parse(\"application/json\"))).header(\"request-id\", \"request-id-value\").build());\r\n    final var requestInformation = new RequestInformation() {\r\n\r\n        {\r\n            setUri(new URI(\"https://localhost\"));\r\n            httpMethod = HttpMethod.GET;\r\n        }\r\n    };\r\n    final var mockEntity = mock(Parsable.class);\r\n    when(mockEntity.getFieldDeserializers()).thenReturn(new HashMap<>());\r\n    final var mockParsableFactory = mock(ParsableFactory.class);\r\n    when(mockParsableFactory.create(any(ParseNode.class))).thenReturn(mockEntity);\r\n    final var mockParseNode = mock(ParseNode.class);\r\n    when(mockParseNode.getObjectValue(any(ParsableFactory.class))).thenReturn(mockEntity);\r\n    final var mockFactory = mock(ParseNodeFactory.class);\r\n    when(mockFactory.getParseNode(any(String.class), any(InputStream.class))).thenReturn(mockParseNode);\r\n    when(mockFactory.getValidContentType()).thenReturn(\"application/json\");\r\n    final var requestAdapter = new OkHttpRequestAdapter(authenticationProviderMock, mockFactory, null, client);\r\n    final var errorMappings = errorMappingCodes == null ? null : new HashMap<String, ParsableFactory<? extends Parsable>>();\r\n    if (errorMappings != null)\r\n        errorMappingCodes.forEach((mapping) -> errorMappings.put(mapping, mockParsableFactory));\r\n    final var exception = assertThrows(ApiException.class, () -> requestAdapter.send(requestInformation, errorMappings, (node) -> mockEntity));\r\n    assertNotNull(exception);\r\n    if (expectDeserializedException)\r\n        verify(mockParseNode, times(1)).getObjectValue(mockParsableFactory);\r\n    assertEquals(responseStatusCode, exception.getResponseStatusCode());\r\n    assertTrue(exception.getResponseHeaders().containsKey(\"request-id\"));\r\n}"
          }
        }
      ]
    },
    {
      "rawMockObjectId": 49,
      "variableName": "mockParseNode",
      "variableType": "var",
      "mockedClass": "com.microsoft.kiota.serialization.ParseNode",
      "isReuseableMock": false,
      "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
      "mockRole": "mock",
      "classContext": {
        "packageName": "com.microsoft.kiota.http",
        "filePath": "C:\\Java_projects\\Microsoft\\kiota-java\\components\\http\\okHttp\\src\\test\\java\\com\\microsoft\\kiota\\http\\OkHttpRequestAdapterTest.java"
      },
      "statements": [
        {
          "code": "final var mockParseNode = mock(ParseNode.class);",
          "line": 267,
          "type": "METHOD_MOCK_CREATION",
          "locate": "Test Case",
          "abstractedStatement": "",
          "isMockRelated": true,
          "isShareable": false,
          "locationContext": {
            "methodName": "throwsAPIException",
            "methodAnnotations": [
              "SuppressWarnings",
              "ParameterizedTest",
              "MethodSource"
            ],
            "methodRawCode": "@SuppressWarnings(\"unchecked\")\r\n@ParameterizedTest\r\n@MethodSource(\"providesErrorMappings\")\r\nvoid throwsAPIException(int responseStatusCode, List<String> errorMappingCodes, boolean expectDeserializedException) throws Exception {\r\n    final var authenticationProviderMock = mock(AuthenticationProvider.class);\r\n    authenticationProviderMock.authenticateRequest(any(RequestInformation.class), any(Map.class));\r\n    final var client = getMockClient(new Response.Builder().code(responseStatusCode).message(\"Not Found\").protocol(Protocol.HTTP_1_1).request(new Request.Builder().url(\"http://localhost\").build()).body(ResponseBody.create(\"test\".getBytes(\"UTF-8\"), MediaType.parse(\"application/json\"))).header(\"request-id\", \"request-id-value\").build());\r\n    final var requestInformation = new RequestInformation() {\r\n\r\n        {\r\n            setUri(new URI(\"https://localhost\"));\r\n            httpMethod = HttpMethod.GET;\r\n        }\r\n    };\r\n    final var mockEntity = mock(Parsable.class);\r\n    when(mockEntity.getFieldDeserializers()).thenReturn(new HashMap<>());\r\n    final var mockParsableFactory = mock(ParsableFactory.class);\r\n    when(mockParsableFactory.create(any(ParseNode.class))).thenReturn(mockEntity);\r\n    final var mockParseNode = mock(ParseNode.class);\r\n    when(mockParseNode.getObjectValue(any(ParsableFactory.class))).thenReturn(mockEntity);\r\n    final var mockFactory = mock(ParseNodeFactory.class);\r\n    when(mockFactory.getParseNode(any(String.class), any(InputStream.class))).thenReturn(mockParseNode);\r\n    when(mockFactory.getValidContentType()).thenReturn(\"application/json\");\r\n    final var requestAdapter = new OkHttpRequestAdapter(authenticationProviderMock, mockFactory, null, client);\r\n    final var errorMappings = errorMappingCodes == null ? null : new HashMap<String, ParsableFactory<? extends Parsable>>();\r\n    if (errorMappings != null)\r\n        errorMappingCodes.forEach((mapping) -> errorMappings.put(mapping, mockParsableFactory));\r\n    final var exception = assertThrows(ApiException.class, () -> requestAdapter.send(requestInformation, errorMappings, (node) -> mockEntity));\r\n    assertNotNull(exception);\r\n    if (expectDeserializedException)\r\n        verify(mockParseNode, times(1)).getObjectValue(mockParsableFactory);\r\n    assertEquals(responseStatusCode, exception.getResponseStatusCode());\r\n    assertTrue(exception.getResponseHeaders().containsKey(\"request-id\"));\r\n}"
          }
        },
        {
          "code": "when(mockParseNode.getObjectValue(any(ParsableFactory.class))).thenReturn(mockEntity);",
          "line": 268,
          "type": "STUBBING",
          "locate": "Test Case",
          "abstractedStatement": "when(com.microsoft.kiota.serialization.ParseNode.getObjectValue(any(ParsableFactory.class))).thenReturn(com.microsoft.kiota.serialization.Parsable)",
          "isMockRelated": true,
          "isShareable": false,
          "locationContext": {
            "methodName": "throwsAPIException",
            "methodAnnotations": [
              "SuppressWarnings",
              "ParameterizedTest",
              "MethodSource"
            ],
            "methodRawCode": "@SuppressWarnings(\"unchecked\")\r\n@ParameterizedTest\r\n@MethodSource(\"providesErrorMappings\")\r\nvoid throwsAPIException(int responseStatusCode, List<String> errorMappingCodes, boolean expectDeserializedException) throws Exception {\r\n    final var authenticationProviderMock = mock(AuthenticationProvider.class);\r\n    authenticationProviderMock.authenticateRequest(any(RequestInformation.class), any(Map.class));\r\n    final var client = getMockClient(new Response.Builder().code(responseStatusCode).message(\"Not Found\").protocol(Protocol.HTTP_1_1).request(new Request.Builder().url(\"http://localhost\").build()).body(ResponseBody.create(\"test\".getBytes(\"UTF-8\"), MediaType.parse(\"application/json\"))).header(\"request-id\", \"request-id-value\").build());\r\n    final var requestInformation = new RequestInformation() {\r\n\r\n        {\r\n            setUri(new URI(\"https://localhost\"));\r\n            httpMethod = HttpMethod.GET;\r\n        }\r\n    };\r\n    final var mockEntity = mock(Parsable.class);\r\n    when(mockEntity.getFieldDeserializers()).thenReturn(new HashMap<>());\r\n    final var mockParsableFactory = mock(ParsableFactory.class);\r\n    when(mockParsableFactory.create(any(ParseNode.class))).thenReturn(mockEntity);\r\n    final var mockParseNode = mock(ParseNode.class);\r\n    when(mockParseNode.getObjectValue(any(ParsableFactory.class))).thenReturn(mockEntity);\r\n    final var mockFactory = mock(ParseNodeFactory.class);\r\n    when(mockFactory.getParseNode(any(String.class), any(InputStream.class))).thenReturn(mockParseNode);\r\n    when(mockFactory.getValidContentType()).thenReturn(\"application/json\");\r\n    final var requestAdapter = new OkHttpRequestAdapter(authenticationProviderMock, mockFactory, null, client);\r\n    final var errorMappings = errorMappingCodes == null ? null : new HashMap<String, ParsableFactory<? extends Parsable>>();\r\n    if (errorMappings != null)\r\n        errorMappingCodes.forEach((mapping) -> errorMappings.put(mapping, mockParsableFactory));\r\n    final var exception = assertThrows(ApiException.class, () -> requestAdapter.send(requestInformation, errorMappings, (node) -> mockEntity));\r\n    assertNotNull(exception);\r\n    if (expectDeserializedException)\r\n        verify(mockParseNode, times(1)).getObjectValue(mockParsableFactory);\r\n    assertEquals(responseStatusCode, exception.getResponseStatusCode());\r\n    assertTrue(exception.getResponseHeaders().containsKey(\"request-id\"));\r\n}"
          }
        },
        {
          "code": "when(mockFactory.getParseNode(any(String.class), any(InputStream.class))).thenReturn(mockParseNode);",
          "line": 270,
          "type": "REFERENCE",
          "locate": "Test Case",
          "abstractedStatement": "",
          "isMockRelated": false,
          "isShareable": false,
          "locationContext": {
            "methodName": "throwsAPIException",
            "methodAnnotations": [
              "SuppressWarnings",
              "ParameterizedTest",
              "MethodSource"
            ],
            "methodRawCode": "@SuppressWarnings(\"unchecked\")\r\n@ParameterizedTest\r\n@MethodSource(\"providesErrorMappings\")\r\nvoid throwsAPIException(int responseStatusCode, List<String> errorMappingCodes, boolean expectDeserializedException) throws Exception {\r\n    final var authenticationProviderMock = mock(AuthenticationProvider.class);\r\n    authenticationProviderMock.authenticateRequest(any(RequestInformation.class), any(Map.class));\r\n    final var client = getMockClient(new Response.Builder().code(responseStatusCode).message(\"Not Found\").protocol(Protocol.HTTP_1_1).request(new Request.Builder().url(\"http://localhost\").build()).body(ResponseBody.create(\"test\".getBytes(\"UTF-8\"), MediaType.parse(\"application/json\"))).header(\"request-id\", \"request-id-value\").build());\r\n    final var requestInformation = new RequestInformation() {\r\n\r\n        {\r\n            setUri(new URI(\"https://localhost\"));\r\n            httpMethod = HttpMethod.GET;\r\n        }\r\n    };\r\n    final var mockEntity = mock(Parsable.class);\r\n    when(mockEntity.getFieldDeserializers()).thenReturn(new HashMap<>());\r\n    final var mockParsableFactory = mock(ParsableFactory.class);\r\n    when(mockParsableFactory.create(any(ParseNode.class))).thenReturn(mockEntity);\r\n    final var mockParseNode = mock(ParseNode.class);\r\n    when(mockParseNode.getObjectValue(any(ParsableFactory.class))).thenReturn(mockEntity);\r\n    final var mockFactory = mock(ParseNodeFactory.class);\r\n    when(mockFactory.getParseNode(any(String.class), any(InputStream.class))).thenReturn(mockParseNode);\r\n    when(mockFactory.getValidContentType()).thenReturn(\"application/json\");\r\n    final var requestAdapter = new OkHttpRequestAdapter(authenticationProviderMock, mockFactory, null, client);\r\n    final var errorMappings = errorMappingCodes == null ? null : new HashMap<String, ParsableFactory<? extends Parsable>>();\r\n    if (errorMappings != null)\r\n        errorMappingCodes.forEach((mapping) -> errorMappings.put(mapping, mockParsableFactory));\r\n    final var exception = assertThrows(ApiException.class, () -> requestAdapter.send(requestInformation, errorMappings, (node) -> mockEntity));\r\n    assertNotNull(exception);\r\n    if (expectDeserializedException)\r\n        verify(mockParseNode, times(1)).getObjectValue(mockParsableFactory);\r\n    assertEquals(responseStatusCode, exception.getResponseStatusCode());\r\n    assertTrue(exception.getResponseHeaders().containsKey(\"request-id\"));\r\n}"
          }
        }
      ]
    },
    {
      "rawMockObjectId": 50,
      "variableName": "mockFactory",
      "variableType": "var",
      "mockedClass": "com.microsoft.kiota.serialization.ParseNodeFactory",
      "isReuseableMock": false,
      "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
      "mockRole": "mock",
      "classContext": {
        "packageName": "com.microsoft.kiota.http",
        "filePath": "C:\\Java_projects\\Microsoft\\kiota-java\\components\\http\\okHttp\\src\\test\\java\\com\\microsoft\\kiota\\http\\OkHttpRequestAdapterTest.java"
      },
      "statements": [
        {
          "code": "final var mockFactory = mock(ParseNodeFactory.class);",
          "line": 269,
          "type": "METHOD_MOCK_CREATION",
          "locate": "Test Case",
          "abstractedStatement": "",
          "isMockRelated": true,
          "isShareable": false,
          "locationContext": {
            "methodName": "throwsAPIException",
            "methodAnnotations": [
              "SuppressWarnings",
              "ParameterizedTest",
              "MethodSource"
            ],
            "methodRawCode": "@SuppressWarnings(\"unchecked\")\r\n@ParameterizedTest\r\n@MethodSource(\"providesErrorMappings\")\r\nvoid throwsAPIException(int responseStatusCode, List<String> errorMappingCodes, boolean expectDeserializedException) throws Exception {\r\n    final var authenticationProviderMock = mock(AuthenticationProvider.class);\r\n    authenticationProviderMock.authenticateRequest(any(RequestInformation.class), any(Map.class));\r\n    final var client = getMockClient(new Response.Builder().code(responseStatusCode).message(\"Not Found\").protocol(Protocol.HTTP_1_1).request(new Request.Builder().url(\"http://localhost\").build()).body(ResponseBody.create(\"test\".getBytes(\"UTF-8\"), MediaType.parse(\"application/json\"))).header(\"request-id\", \"request-id-value\").build());\r\n    final var requestInformation = new RequestInformation() {\r\n\r\n        {\r\n            setUri(new URI(\"https://localhost\"));\r\n            httpMethod = HttpMethod.GET;\r\n        }\r\n    };\r\n    final var mockEntity = mock(Parsable.class);\r\n    when(mockEntity.getFieldDeserializers()).thenReturn(new HashMap<>());\r\n    final var mockParsableFactory = mock(ParsableFactory.class);\r\n    when(mockParsableFactory.create(any(ParseNode.class))).thenReturn(mockEntity);\r\n    final var mockParseNode = mock(ParseNode.class);\r\n    when(mockParseNode.getObjectValue(any(ParsableFactory.class))).thenReturn(mockEntity);\r\n    final var mockFactory = mock(ParseNodeFactory.class);\r\n    when(mockFactory.getParseNode(any(String.class), any(InputStream.class))).thenReturn(mockParseNode);\r\n    when(mockFactory.getValidContentType()).thenReturn(\"application/json\");\r\n    final var requestAdapter = new OkHttpRequestAdapter(authenticationProviderMock, mockFactory, null, client);\r\n    final var errorMappings = errorMappingCodes == null ? null : new HashMap<String, ParsableFactory<? extends Parsable>>();\r\n    if (errorMappings != null)\r\n        errorMappingCodes.forEach((mapping) -> errorMappings.put(mapping, mockParsableFactory));\r\n    final var exception = assertThrows(ApiException.class, () -> requestAdapter.send(requestInformation, errorMappings, (node) -> mockEntity));\r\n    assertNotNull(exception);\r\n    if (expectDeserializedException)\r\n        verify(mockParseNode, times(1)).getObjectValue(mockParsableFactory);\r\n    assertEquals(responseStatusCode, exception.getResponseStatusCode());\r\n    assertTrue(exception.getResponseHeaders().containsKey(\"request-id\"));\r\n}"
          }
        },
        {
          "code": "when(mockFactory.getParseNode(any(String.class), any(InputStream.class))).thenReturn(mockParseNode);",
          "line": 270,
          "type": "STUBBING",
          "locate": "Test Case",
          "abstractedStatement": "when(com.microsoft.kiota.serialization.ParseNodeFactory.getParseNode(any(String.class), any(InputStream.class))).thenReturn(com.microsoft.kiota.serialization.ParseNode)",
          "isMockRelated": true,
          "isShareable": false,
          "locationContext": {
            "methodName": "throwsAPIException",
            "methodAnnotations": [
              "SuppressWarnings",
              "ParameterizedTest",
              "MethodSource"
            ],
            "methodRawCode": "@SuppressWarnings(\"unchecked\")\r\n@ParameterizedTest\r\n@MethodSource(\"providesErrorMappings\")\r\nvoid throwsAPIException(int responseStatusCode, List<String> errorMappingCodes, boolean expectDeserializedException) throws Exception {\r\n    final var authenticationProviderMock = mock(AuthenticationProvider.class);\r\n    authenticationProviderMock.authenticateRequest(any(RequestInformation.class), any(Map.class));\r\n    final var client = getMockClient(new Response.Builder().code(responseStatusCode).message(\"Not Found\").protocol(Protocol.HTTP_1_1).request(new Request.Builder().url(\"http://localhost\").build()).body(ResponseBody.create(\"test\".getBytes(\"UTF-8\"), MediaType.parse(\"application/json\"))).header(\"request-id\", \"request-id-value\").build());\r\n    final var requestInformation = new RequestInformation() {\r\n\r\n        {\r\n            setUri(new URI(\"https://localhost\"));\r\n            httpMethod = HttpMethod.GET;\r\n        }\r\n    };\r\n    final var mockEntity = mock(Parsable.class);\r\n    when(mockEntity.getFieldDeserializers()).thenReturn(new HashMap<>());\r\n    final var mockParsableFactory = mock(ParsableFactory.class);\r\n    when(mockParsableFactory.create(any(ParseNode.class))).thenReturn(mockEntity);\r\n    final var mockParseNode = mock(ParseNode.class);\r\n    when(mockParseNode.getObjectValue(any(ParsableFactory.class))).thenReturn(mockEntity);\r\n    final var mockFactory = mock(ParseNodeFactory.class);\r\n    when(mockFactory.getParseNode(any(String.class), any(InputStream.class))).thenReturn(mockParseNode);\r\n    when(mockFactory.getValidContentType()).thenReturn(\"application/json\");\r\n    final var requestAdapter = new OkHttpRequestAdapter(authenticationProviderMock, mockFactory, null, client);\r\n    final var errorMappings = errorMappingCodes == null ? null : new HashMap<String, ParsableFactory<? extends Parsable>>();\r\n    if (errorMappings != null)\r\n        errorMappingCodes.forEach((mapping) -> errorMappings.put(mapping, mockParsableFactory));\r\n    final var exception = assertThrows(ApiException.class, () -> requestAdapter.send(requestInformation, errorMappings, (node) -> mockEntity));\r\n    assertNotNull(exception);\r\n    if (expectDeserializedException)\r\n        verify(mockParseNode, times(1)).getObjectValue(mockParsableFactory);\r\n    assertEquals(responseStatusCode, exception.getResponseStatusCode());\r\n    assertTrue(exception.getResponseHeaders().containsKey(\"request-id\"));\r\n}"
          }
        },
        {
          "code": "when(mockFactory.getValidContentType()).thenReturn(\"application/json\");",
          "line": 272,
          "type": "STUBBING",
          "locate": "Test Case",
          "abstractedStatement": "when(com.microsoft.kiota.serialization.ParseNodeFactory.getValidContentType()).thenReturn(java.lang.String)",
          "isMockRelated": true,
          "isShareable": false,
          "locationContext": {
            "methodName": "throwsAPIException",
            "methodAnnotations": [
              "SuppressWarnings",
              "ParameterizedTest",
              "MethodSource"
            ],
            "methodRawCode": "@SuppressWarnings(\"unchecked\")\r\n@ParameterizedTest\r\n@MethodSource(\"providesErrorMappings\")\r\nvoid throwsAPIException(int responseStatusCode, List<String> errorMappingCodes, boolean expectDeserializedException) throws Exception {\r\n    final var authenticationProviderMock = mock(AuthenticationProvider.class);\r\n    authenticationProviderMock.authenticateRequest(any(RequestInformation.class), any(Map.class));\r\n    final var client = getMockClient(new Response.Builder().code(responseStatusCode).message(\"Not Found\").protocol(Protocol.HTTP_1_1).request(new Request.Builder().url(\"http://localhost\").build()).body(ResponseBody.create(\"test\".getBytes(\"UTF-8\"), MediaType.parse(\"application/json\"))).header(\"request-id\", \"request-id-value\").build());\r\n    final var requestInformation = new RequestInformation() {\r\n\r\n        {\r\n            setUri(new URI(\"https://localhost\"));\r\n            httpMethod = HttpMethod.GET;\r\n        }\r\n    };\r\n    final var mockEntity = mock(Parsable.class);\r\n    when(mockEntity.getFieldDeserializers()).thenReturn(new HashMap<>());\r\n    final var mockParsableFactory = mock(ParsableFactory.class);\r\n    when(mockParsableFactory.create(any(ParseNode.class))).thenReturn(mockEntity);\r\n    final var mockParseNode = mock(ParseNode.class);\r\n    when(mockParseNode.getObjectValue(any(ParsableFactory.class))).thenReturn(mockEntity);\r\n    final var mockFactory = mock(ParseNodeFactory.class);\r\n    when(mockFactory.getParseNode(any(String.class), any(InputStream.class))).thenReturn(mockParseNode);\r\n    when(mockFactory.getValidContentType()).thenReturn(\"application/json\");\r\n    final var requestAdapter = new OkHttpRequestAdapter(authenticationProviderMock, mockFactory, null, client);\r\n    final var errorMappings = errorMappingCodes == null ? null : new HashMap<String, ParsableFactory<? extends Parsable>>();\r\n    if (errorMappings != null)\r\n        errorMappingCodes.forEach((mapping) -> errorMappings.put(mapping, mockParsableFactory));\r\n    final var exception = assertThrows(ApiException.class, () -> requestAdapter.send(requestInformation, errorMappings, (node) -> mockEntity));\r\n    assertNotNull(exception);\r\n    if (expectDeserializedException)\r\n        verify(mockParseNode, times(1)).getObjectValue(mockParsableFactory);\r\n    assertEquals(responseStatusCode, exception.getResponseStatusCode());\r\n    assertTrue(exception.getResponseHeaders().containsKey(\"request-id\"));\r\n}"
          }
        }
      ]
    },
    {
      "rawMockObjectId": 51,
      "variableName": "authenticationProviderMock",
      "variableType": "var",
      "mockedClass": "com.microsoft.kiota.authentication.AuthenticationProvider",
      "isReuseableMock": false,
      "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— None\n\nVerification:\n— None",
      "mockRole": "mock",
      "classContext": {
        "packageName": "com.microsoft.kiota.http",
        "filePath": "C:\\Java_projects\\Microsoft\\kiota-java\\components\\http\\okHttp\\src\\test\\java\\com\\microsoft\\kiota\\http\\OkHttpRequestAdapterTest.java"
      },
      "statements": [
        {
          "code": "final var authenticationProviderMock = mock(AuthenticationProvider.class);",
          "line": 297,
          "type": "METHOD_MOCK_CREATION",
          "locate": "Test Case",
          "abstractedStatement": "",
          "isMockRelated": true,
          "isShareable": false,
          "locationContext": {
            "methodName": "getRequestFromRequestInformationHasCorrectContentLength_JsonPayload",
            "methodAnnotations": [
              "Test"
            ],
            "methodRawCode": "@Test\r\nvoid getRequestFromRequestInformationHasCorrectContentLength_JsonPayload() throws Exception {\r\n    final var authenticationProviderMock = mock(AuthenticationProvider.class);\r\n    final var requestInformation = new RequestInformation();\r\n    requestInformation.setUri(new URI(\"https://localhost\"));\r\n    ByteArrayInputStream content = new ByteArrayInputStream(\"{\\\"name\\\":\\\"value\\\",\\\"array\\\":[\\\"1\\\",\\\"2\\\",\\\"3\\\"]}\".getBytes(StandardCharsets.UTF_8));\r\n    requestInformation.setStreamContent(content, \"application/json\");\r\n    requestInformation.httpMethod = HttpMethod.PUT;\r\n    final var contentLength = content.available();\r\n    requestInformation.headers.tryAdd(\"Content-Length\", String.valueOf(contentLength));\r\n    final var adapter = new OkHttpRequestAdapter(authenticationProviderMock);\r\n    final var request = adapter.getRequestFromRequestInformation(requestInformation, mock(Span.class), mock(Span.class));\r\n    assertEquals(String.valueOf(contentLength), request.headers().get(\"Content-Length\"));\r\n    assertEquals(\"application/json\", request.headers().get(\"Content-Type\"));\r\n    assertNotNull(request.body());\r\n    assertEquals(request.body().contentLength(), contentLength);\r\n    assertEquals(request.body().contentType(), MediaType.parse(\"application/json\"));\r\n}"
          }
        }
      ]
    },
    {
      "rawMockObjectId": 52,
      "variableName": "authenticationProviderMock",
      "variableType": "var",
      "mockedClass": "com.microsoft.kiota.authentication.AuthenticationProvider",
      "isReuseableMock": false,
      "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— None\n\nVerification:\n— None",
      "mockRole": "mock",
      "classContext": {
        "packageName": "com.microsoft.kiota.http",
        "filePath": "C:\\Java_projects\\Microsoft\\kiota-java\\components\\http\\okHttp\\src\\test\\java\\com\\microsoft\\kiota\\http\\OkHttpRequestAdapterTest.java"
      },
      "statements": [
        {
          "code": "final var authenticationProviderMock = mock(AuthenticationProvider.class);",
          "line": 323,
          "type": "METHOD_MOCK_CREATION",
          "locate": "Test Case",
          "abstractedStatement": "",
          "isMockRelated": true,
          "isShareable": false,
          "locationContext": {
            "methodName": "getRequestFromRequestInformationIncludesContentLength_FilePayload",
            "methodAnnotations": [
              "Test"
            ],
            "methodRawCode": "@Test\r\nvoid getRequestFromRequestInformationIncludesContentLength_FilePayload() throws Exception {\r\n    final var authenticationProviderMock = mock(AuthenticationProvider.class);\r\n    final var testFile = new File(\"./src/test/resources/helloWorld.txt\");\r\n    final var requestInformation = new RequestInformation();\r\n    requestInformation.setUri(new URI(\"https://localhost\"));\r\n    requestInformation.httpMethod = HttpMethod.PUT;\r\n    final var contentLength = testFile.length();\r\n    requestInformation.headers.add(\"Content-Length\", String.valueOf(contentLength));\r\n    try (FileInputStream content = new FileInputStream(testFile)) {\r\n        requestInformation.setStreamContent(content, \"application/octet-stream\");\r\n        final var adapter = new OkHttpRequestAdapter(authenticationProviderMock);\r\n        final var request = adapter.getRequestFromRequestInformation(requestInformation, mock(Span.class), mock(Span.class));\r\n        assertEquals(String.valueOf(contentLength), request.headers().get(\"Content-Length\"));\r\n        assertEquals(\"application/octet-stream\", request.headers().get(\"Content-Type\"));\r\n        assertNotNull(request.body());\r\n        assertEquals(request.body().contentLength(), contentLength);\r\n        assertEquals(request.body().contentType(), MediaType.parse(\"application/octet-stream\"));\r\n    }\r\n}"
          }
        }
      ]
    },
    {
      "rawMockObjectId": 53,
      "variableName": "authenticationProviderMock",
      "variableType": "var",
      "mockedClass": "com.microsoft.kiota.authentication.AuthenticationProvider",
      "isReuseableMock": false,
      "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— None\n\nVerification:\n— None",
      "mockRole": "mock",
      "classContext": {
        "packageName": "com.microsoft.kiota.http",
        "filePath": "C:\\Java_projects\\Microsoft\\kiota-java\\components\\http\\okHttp\\src\\test\\java\\com\\microsoft\\kiota\\http\\OkHttpRequestAdapterTest.java"
      },
      "statements": [
        {
          "code": "final var authenticationProviderMock = mock(AuthenticationProvider.class);",
          "line": 350,
          "type": "METHOD_MOCK_CREATION",
          "locate": "Test Case",
          "abstractedStatement": "",
          "isMockRelated": true,
          "isShareable": false,
          "locationContext": {
            "methodName": "getRequestFromRequestInformationWithoutContentLengthOverrideForStreamBody",
            "methodAnnotations": [
              "Test"
            ],
            "methodRawCode": "@Test\r\nvoid getRequestFromRequestInformationWithoutContentLengthOverrideForStreamBody() throws Exception {\r\n    final var authenticationProviderMock = mock(AuthenticationProvider.class);\r\n    final var testFile = new File(\"./src/test/resources/helloWorld.txt\");\r\n    final var requestInformation = new RequestInformation();\r\n    requestInformation.setUri(new URI(\"https://localhost\"));\r\n    requestInformation.httpMethod = HttpMethod.PUT;\r\n    try (FileInputStream content = new FileInputStream(testFile)) {\r\n        requestInformation.setStreamContent(content, \"application/octet-stream\");\r\n        final var adapter = new OkHttpRequestAdapter(authenticationProviderMock);\r\n        final var request = adapter.getRequestFromRequestInformation(requestInformation, mock(Span.class), mock(Span.class));\r\n        assertEquals(\"application/octet-stream\", request.headers().get(\"Content-Type\"));\r\n        assertNotNull(request.body());\r\n        assertEquals(-1L, request.body().contentLength());\r\n        assertEquals(request.body().contentType(), MediaType.parse(\"application/octet-stream\"));\r\n    }\r\n}"
          }
        }
      ]
    },
    {
      "rawMockObjectId": 54,
      "variableName": "authenticationProviderMock",
      "variableType": "var",
      "mockedClass": "com.microsoft.kiota.authentication.AuthenticationProvider",
      "isReuseableMock": false,
      "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— None\n\nVerification:\n— None",
      "mockRole": "mock",
      "classContext": {
        "packageName": "com.microsoft.kiota.http",
        "filePath": "C:\\Java_projects\\Microsoft\\kiota-java\\components\\http\\okHttp\\src\\test\\java\\com\\microsoft\\kiota\\http\\OkHttpRequestAdapterTest.java"
      },
      "statements": [
        {
          "code": "final var authenticationProviderMock = mock(AuthenticationProvider.class);",
          "line": 374,
          "type": "METHOD_MOCK_CREATION",
          "locate": "Test Case",
          "abstractedStatement": "",
          "isMockRelated": true,
          "isShareable": false,
          "locationContext": {
            "methodName": "getRequestFromRequestInformationWithoutContentLengthOverrideForJsonPayload",
            "methodAnnotations": [
              "Test"
            ],
            "methodRawCode": "@Test\r\nvoid getRequestFromRequestInformationWithoutContentLengthOverrideForJsonPayload() throws Exception {\r\n    final var authenticationProviderMock = mock(AuthenticationProvider.class);\r\n    final var requestInformation = new RequestInformation();\r\n    requestInformation.setUri(new URI(\"https://localhost\"));\r\n    ByteArrayInputStream content = new ByteArrayInputStream(\"{\\\"name\\\":\\\"value\\\",\\\"array\\\":[\\\"1\\\",\\\"2\\\",\\\"3\\\"]}\".getBytes(StandardCharsets.UTF_8));\r\n    requestInformation.setStreamContent(content, \"application/json\");\r\n    requestInformation.httpMethod = HttpMethod.PUT;\r\n    final var contentLength = content.available();\r\n    final var adapter = new OkHttpRequestAdapter(authenticationProviderMock);\r\n    final var request = adapter.getRequestFromRequestInformation(requestInformation, mock(Span.class), mock(Span.class));\r\n    assertEquals(\"application/json\", request.headers().get(\"Content-Type\"));\r\n    assertNotNull(request.body());\r\n    assertEquals(contentLength, request.body().contentLength());\r\n    assertEquals(MediaType.parse(\"application/json\"), request.body().contentType());\r\n}"
          }
        }
      ]
    },
    {
      "rawMockObjectId": 55,
      "variableName": "authenticationProviderMock",
      "variableType": "var",
      "mockedClass": "com.microsoft.kiota.authentication.AuthenticationProvider",
      "isReuseableMock": false,
      "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— None\n\nVerification:\n— None",
      "mockRole": "mock",
      "classContext": {
        "packageName": "com.microsoft.kiota.http",
        "filePath": "C:\\Java_projects\\Microsoft\\kiota-java\\components\\http\\okHttp\\src\\test\\java\\com\\microsoft\\kiota\\http\\OkHttpRequestAdapterTest.java"
      },
      "statements": [
        {
          "code": "final var authenticationProviderMock = mock(AuthenticationProvider.class);",
          "line": 399,
          "type": "METHOD_MOCK_CREATION",
          "locate": "Test Case",
          "abstractedStatement": "",
          "isMockRelated": true,
          "isShareable": false,
          "locationContext": {
            "methodName": "getRequestFromRequestInformationWithoutContentLengthOverrideWithEmptyPayload",
            "methodAnnotations": [
              "Test"
            ],
            "methodRawCode": "@Test\r\nvoid getRequestFromRequestInformationWithoutContentLengthOverrideWithEmptyPayload() throws Exception {\r\n    final var authenticationProviderMock = mock(AuthenticationProvider.class);\r\n    final var requestInformation = new RequestInformation();\r\n    requestInformation.setUri(new URI(\"https://localhost\"));\r\n    ByteArrayInputStream content = new ByteArrayInputStream(new byte[0]);\r\n    requestInformation.httpMethod = HttpMethod.PUT;\r\n    requestInformation.content = content;\r\n    final var adapter = new OkHttpRequestAdapter(authenticationProviderMock);\r\n    final var request = adapter.getRequestFromRequestInformation(requestInformation, mock(Span.class), mock(Span.class));\r\n    assertNull(request.headers().get(\"Content-Type\"));\r\n    assertEquals(0, request.body().contentLength());\r\n}"
          }
        }
      ]
    },
    {
      "rawMockObjectId": 56,
      "variableName": "mockClient",
      "variableType": "OkHttpClient",
      "mockedClass": "okhttp3.OkHttpClient",
      "isReuseableMock": false,
      "mockPattern": "Creation:\n— Local Assignment in Helper Method\n\nStubbing:\n— Helper Method\n\nVerification:\n— None",
      "mockRole": "mock",
      "classContext": {
        "packageName": "com.microsoft.kiota.http",
        "filePath": "C:\\Java_projects\\Microsoft\\kiota-java\\components\\http\\okHttp\\src\\test\\java\\com\\microsoft\\kiota\\http\\OkHttpRequestAdapterTest.java"
      },
      "statements": [
        {
          "code": "final OkHttpClient mockClient = mock(OkHttpClient.class);",
          "line": 416,
          "type": "METHOD_MOCK_CREATION",
          "locate": "Helper Method",
          "abstractedStatement": "",
          "isMockRelated": true,
          "isShareable": false,
          "locationContext": {
            "methodName": "getMockClient",
            "methodAnnotations": [],
            "methodRawCode": "public static OkHttpClient getMockClient(final Response response) throws IOException {\r\n    final OkHttpClient mockClient = mock(OkHttpClient.class);\r\n    final Call remoteCall = mock(Call.class);\r\n    final Dispatcher dispatcher = new Dispatcher();\r\n    when(remoteCall.execute()).thenReturn(response);\r\n    doAnswer((Answer<Void>) invocation -> {\r\n        Callback callback = invocation.getArgument(0);\r\n        callback.onResponse(null, response);\r\n        return null;\r\n    }).when(remoteCall).enqueue(any(Callback.class));\r\n    when(mockClient.dispatcher()).thenReturn(dispatcher);\r\n    when(mockClient.newCall(any())).thenReturn(remoteCall);\r\n    return mockClient;\r\n}"
          }
        },
        {
          "code": "when(mockClient.dispatcher()).thenReturn(dispatcher);",
          "line": 429,
          "type": "STUBBING",
          "locate": "Helper Method",
          "abstractedStatement": "when(okhttp3.OkHttpClient.dispatcher()).thenReturn(okhttp3.Dispatcher)",
          "isMockRelated": true,
          "isShareable": false,
          "locationContext": {
            "methodName": "getMockClient",
            "methodAnnotations": [],
            "methodRawCode": "public static OkHttpClient getMockClient(final Response response) throws IOException {\r\n    final OkHttpClient mockClient = mock(OkHttpClient.class);\r\n    final Call remoteCall = mock(Call.class);\r\n    final Dispatcher dispatcher = new Dispatcher();\r\n    when(remoteCall.execute()).thenReturn(response);\r\n    doAnswer((Answer<Void>) invocation -> {\r\n        Callback callback = invocation.getArgument(0);\r\n        callback.onResponse(null, response);\r\n        return null;\r\n    }).when(remoteCall).enqueue(any(Callback.class));\r\n    when(mockClient.dispatcher()).thenReturn(dispatcher);\r\n    when(mockClient.newCall(any())).thenReturn(remoteCall);\r\n    return mockClient;\r\n}"
          }
        },
        {
          "code": "when(mockClient.newCall(any())).thenReturn(remoteCall);",
          "line": 430,
          "type": "STUBBING",
          "locate": "Helper Method",
          "abstractedStatement": "when(okhttp3.OkHttpClient.newCall(any())).thenReturn(okhttp3.Call)",
          "isMockRelated": true,
          "isShareable": false,
          "locationContext": {
            "methodName": "getMockClient",
            "methodAnnotations": [],
            "methodRawCode": "public static OkHttpClient getMockClient(final Response response) throws IOException {\r\n    final OkHttpClient mockClient = mock(OkHttpClient.class);\r\n    final Call remoteCall = mock(Call.class);\r\n    final Dispatcher dispatcher = new Dispatcher();\r\n    when(remoteCall.execute()).thenReturn(response);\r\n    doAnswer((Answer<Void>) invocation -> {\r\n        Callback callback = invocation.getArgument(0);\r\n        callback.onResponse(null, response);\r\n        return null;\r\n    }).when(remoteCall).enqueue(any(Callback.class));\r\n    when(mockClient.dispatcher()).thenReturn(dispatcher);\r\n    when(mockClient.newCall(any())).thenReturn(remoteCall);\r\n    return mockClient;\r\n}"
          }
        }
      ]
    },
    {
      "rawMockObjectId": 57,
      "variableName": "remoteCall",
      "variableType": "Call",
      "mockedClass": "okhttp3.Call",
      "isReuseableMock": false,
      "mockPattern": "Creation:\n— Local Assignment in Helper Method\n\nStubbing:\n— Helper Method\n\nVerification:\n— None",
      "mockRole": "mock",
      "classContext": {
        "packageName": "com.microsoft.kiota.http",
        "filePath": "C:\\Java_projects\\Microsoft\\kiota-java\\components\\http\\okHttp\\src\\test\\java\\com\\microsoft\\kiota\\http\\OkHttpRequestAdapterTest.java"
      },
      "statements": [
        {
          "code": "final Call remoteCall = mock(Call.class);",
          "line": 417,
          "type": "METHOD_MOCK_CREATION",
          "locate": "Helper Method",
          "abstractedStatement": "",
          "isMockRelated": true,
          "isShareable": false,
          "locationContext": {
            "methodName": "getMockClient",
            "methodAnnotations": [],
            "methodRawCode": "public static OkHttpClient getMockClient(final Response response) throws IOException {\r\n    final OkHttpClient mockClient = mock(OkHttpClient.class);\r\n    final Call remoteCall = mock(Call.class);\r\n    final Dispatcher dispatcher = new Dispatcher();\r\n    when(remoteCall.execute()).thenReturn(response);\r\n    doAnswer((Answer<Void>) invocation -> {\r\n        Callback callback = invocation.getArgument(0);\r\n        callback.onResponse(null, response);\r\n        return null;\r\n    }).when(remoteCall).enqueue(any(Callback.class));\r\n    when(mockClient.dispatcher()).thenReturn(dispatcher);\r\n    when(mockClient.newCall(any())).thenReturn(remoteCall);\r\n    return mockClient;\r\n}"
          }
        },
        {
          "code": "when(remoteCall.execute()).thenReturn(response);",
          "line": 419,
          "type": "STUBBING",
          "locate": "Helper Method",
          "abstractedStatement": "when(okhttp3.Call.execute()).thenReturn(okhttp3.Response)",
          "isMockRelated": true,
          "isShareable": false,
          "locationContext": {
            "methodName": "getMockClient",
            "methodAnnotations": [],
            "methodRawCode": "public static OkHttpClient getMockClient(final Response response) throws IOException {\r\n    final OkHttpClient mockClient = mock(OkHttpClient.class);\r\n    final Call remoteCall = mock(Call.class);\r\n    final Dispatcher dispatcher = new Dispatcher();\r\n    when(remoteCall.execute()).thenReturn(response);\r\n    doAnswer((Answer<Void>) invocation -> {\r\n        Callback callback = invocation.getArgument(0);\r\n        callback.onResponse(null, response);\r\n        return null;\r\n    }).when(remoteCall).enqueue(any(Callback.class));\r\n    when(mockClient.dispatcher()).thenReturn(dispatcher);\r\n    when(mockClient.newCall(any())).thenReturn(remoteCall);\r\n    return mockClient;\r\n}"
          }
        },
        {
          "code": "doAnswer((Answer<Void>) invocation -> {\r\n    Callback callback = invocation.getArgument(0);\r\n    callback.onResponse(null, response);\r\n    return null;\r\n}).when(remoteCall).enqueue(any(Callback.class));",
          "line": 420,
          "type": "STUBBING",
          "locate": "Helper Method",
          "abstractedStatement": "doAnswer(org.mockito.stubbing.Answer<java.lang.Void>).when(okhttp3.Call).enqueue(okhttp3.Callback)",
          "isMockRelated": true,
          "isShareable": false,
          "locationContext": {
            "methodName": "getMockClient",
            "methodAnnotations": [],
            "methodRawCode": "public static OkHttpClient getMockClient(final Response response) throws IOException {\r\n    final OkHttpClient mockClient = mock(OkHttpClient.class);\r\n    final Call remoteCall = mock(Call.class);\r\n    final Dispatcher dispatcher = new Dispatcher();\r\n    when(remoteCall.execute()).thenReturn(response);\r\n    doAnswer((Answer<Void>) invocation -> {\r\n        Callback callback = invocation.getArgument(0);\r\n        callback.onResponse(null, response);\r\n        return null;\r\n    }).when(remoteCall).enqueue(any(Callback.class));\r\n    when(mockClient.dispatcher()).thenReturn(dispatcher);\r\n    when(mockClient.newCall(any())).thenReturn(remoteCall);\r\n    return mockClient;\r\n}"
          }
        },
        {
          "code": "when(mockClient.newCall(any())).thenReturn(remoteCall);",
          "line": 430,
          "type": "REFERENCE",
          "locate": "Helper Method",
          "abstractedStatement": "",
          "isMockRelated": false,
          "isShareable": false,
          "locationContext": {
            "methodName": "getMockClient",
            "methodAnnotations": [],
            "methodRawCode": "public static OkHttpClient getMockClient(final Response response) throws IOException {\r\n    final OkHttpClient mockClient = mock(OkHttpClient.class);\r\n    final Call remoteCall = mock(Call.class);\r\n    final Dispatcher dispatcher = new Dispatcher();\r\n    when(remoteCall.execute()).thenReturn(response);\r\n    doAnswer((Answer<Void>) invocation -> {\r\n        Callback callback = invocation.getArgument(0);\r\n        callback.onResponse(null, response);\r\n        return null;\r\n    }).when(remoteCall).enqueue(any(Callback.class));\r\n    when(mockClient.dispatcher()).thenReturn(dispatcher);\r\n    when(mockClient.newCall(any())).thenReturn(remoteCall);\r\n    return mockClient;\r\n}"
          }
        }
      ]
    },
    {
      "rawMockObjectId": 58,
      "variableName": "requestAdapter",
      "variableType": "RequestAdapter",
      "mockedClass": "com.microsoft.kiota.RequestAdapter",
      "isReuseableMock": false,
      "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
      "mockRole": "mock",
      "classContext": {
        "packageName": "com.microsoft.kiota.serialization",
        "filePath": "C:\\Java_projects\\Microsoft\\kiota-java\\components\\serialization\\multipart\\src\\test\\java\\com\\microsoft\\kiota\\serialization\\MultipartSerializationWriterTests.java"
      },
      "statements": [
        {
          "code": "final RequestAdapter requestAdapter = mock(RequestAdapter.class);",
          "line": 78,
          "type": "METHOD_MOCK_CREATION",
          "locate": "Test Case",
          "abstractedStatement": "",
          "isMockRelated": true,
          "isShareable": false,
          "locationContext": {
            "methodName": "writesAStructuredObject",
            "methodAnnotations": [
              "Test"
            ],
            "methodRawCode": "@Test\r\nvoid writesAStructuredObject() throws IOException {\r\n    final TestEntity testEntity = new TestEntity();\r\n    testEntity.setId(\"48d31887-5fad-4d73-a9f5-3c356e68a038\");\r\n    testEntity.setWorkDuration(PeriodAndDuration.parse(\"P1M\"));\r\n    testEntity.setStartWorkTime(LocalTime.of(8, 0, 0));\r\n    testEntity.setBirthDay(LocalDate.of(2017, 9, 4));\r\n    testEntity.setDeviceNames(Arrays.asList(\"device1\", \"device2\"));\r\n    testEntity.getAdditionalData().put(\"mobilePhone\", null);\r\n    testEntity.getAdditionalData().put(\"jobTitle\", \"Author\");\r\n    testEntity.getAdditionalData().put(\"accountEnabled\", false);\r\n    testEntity.getAdditionalData().put(\"createdDateTime\", OffsetDateTime.MIN);\r\n    testEntity.getAdditionalData().put(\"otherPhones\", Arrays.asList(Arrays.asList(\"device1\", \"device2\")));\r\n    final RequestAdapter requestAdapter = mock(RequestAdapter.class);\r\n    when(requestAdapter.getSerializationWriterFactory()).thenReturn(new JsonSerializationWriterFactory());\r\n    try (final var serializationWriter = new MultipartSerializationWriter()) {\r\n        final MultipartBody multipartBody = new MultipartBody();\r\n        multipartBody.requestAdapter = requestAdapter;\r\n        multipartBody.addOrReplacePart(\"testEntity\", \"application/json\", testEntity);\r\n        multipartBody.addOrReplacePart(\"image\", \"application/octet-stream\", byteForTest);\r\n        serializationWriter.writeObjectValue(null, multipartBody);\r\n        try (final var result = serializationWriter.getSerializedContent()) {\r\n            try (final var reader = new BufferedReader(new InputStreamReader(result, \"UTF-8\"))) {\r\n                final String strResult = reader.lines().collect(Collectors.joining(\"\\r\\n\"));\r\n                assertEquals(\"--\" + multipartBody.getBoundary() + \"\\r\\n\" + \"Content-Type: application/octet-stream\\r\\n\" + \"Content-Disposition: form-data; name=\\\"image\\\"\\r\\n\\r\\n\" + new String(byteForTest, \"UTF-8\") + \"\\r\\n--\" + multipartBody.getBoundary() + \"\\r\\n\" + \"Content-Type: application/json\\r\\n\" + \"Content-Disposition: form-data; name=\\\"testEntity\\\"\\r\\n\\r\\n\" + \"{\\\"id\\\":\\\"48d31887-5fad-4d73-a9f5-3c356e68a038\\\",\\\"birthDay\\\":\\\"2017-09-04\\\",\\\"workDuration\\\":\\\"P1M\\\",\\\"startWorkTime\\\":\\\"08:00:00\\\",\\\"deviceNames\\\":[\\\"device1\\\",\\\"device2\\\"],\\\"mobilePhone\\\":null,\\\"jobTitle\\\":\\\"Author\\\",\\\"createdDateTime\\\":\\\"-999999999-01-01T00:00:00+18:00\\\",\\\"otherPhones\\\":[[\\\"device1\\\",\\\"device2\\\"]],\\\"accountEnabled\\\":false}\\r\\n\" + \"--\" + multipartBody.getBoundary() + \"--\", strResult);\r\n            }\r\n        }\r\n    }\r\n}"
          }
        },
        {
          "code": "when(requestAdapter.getSerializationWriterFactory()).thenReturn(new JsonSerializationWriterFactory());",
          "line": 79,
          "type": "STUBBING",
          "locate": "Test Case",
          "abstractedStatement": "when(com.microsoft.kiota.RequestAdapter.getSerializationWriterFactory()).thenReturn(com.microsoft.kiota.serialization.JsonSerializationWriterFactory)",
          "isMockRelated": true,
          "isShareable": false,
          "locationContext": {
            "methodName": "writesAStructuredObject",
            "methodAnnotations": [
              "Test"
            ],
            "methodRawCode": "@Test\r\nvoid writesAStructuredObject() throws IOException {\r\n    final TestEntity testEntity = new TestEntity();\r\n    testEntity.setId(\"48d31887-5fad-4d73-a9f5-3c356e68a038\");\r\n    testEntity.setWorkDuration(PeriodAndDuration.parse(\"P1M\"));\r\n    testEntity.setStartWorkTime(LocalTime.of(8, 0, 0));\r\n    testEntity.setBirthDay(LocalDate.of(2017, 9, 4));\r\n    testEntity.setDeviceNames(Arrays.asList(\"device1\", \"device2\"));\r\n    testEntity.getAdditionalData().put(\"mobilePhone\", null);\r\n    testEntity.getAdditionalData().put(\"jobTitle\", \"Author\");\r\n    testEntity.getAdditionalData().put(\"accountEnabled\", false);\r\n    testEntity.getAdditionalData().put(\"createdDateTime\", OffsetDateTime.MIN);\r\n    testEntity.getAdditionalData().put(\"otherPhones\", Arrays.asList(Arrays.asList(\"device1\", \"device2\")));\r\n    final RequestAdapter requestAdapter = mock(RequestAdapter.class);\r\n    when(requestAdapter.getSerializationWriterFactory()).thenReturn(new JsonSerializationWriterFactory());\r\n    try (final var serializationWriter = new MultipartSerializationWriter()) {\r\n        final MultipartBody multipartBody = new MultipartBody();\r\n        multipartBody.requestAdapter = requestAdapter;\r\n        multipartBody.addOrReplacePart(\"testEntity\", \"application/json\", testEntity);\r\n        multipartBody.addOrReplacePart(\"image\", \"application/octet-stream\", byteForTest);\r\n        serializationWriter.writeObjectValue(null, multipartBody);\r\n        try (final var result = serializationWriter.getSerializedContent()) {\r\n            try (final var reader = new BufferedReader(new InputStreamReader(result, \"UTF-8\"))) {\r\n                final String strResult = reader.lines().collect(Collectors.joining(\"\\r\\n\"));\r\n                assertEquals(\"--\" + multipartBody.getBoundary() + \"\\r\\n\" + \"Content-Type: application/octet-stream\\r\\n\" + \"Content-Disposition: form-data; name=\\\"image\\\"\\r\\n\\r\\n\" + new String(byteForTest, \"UTF-8\") + \"\\r\\n--\" + multipartBody.getBoundary() + \"\\r\\n\" + \"Content-Type: application/json\\r\\n\" + \"Content-Disposition: form-data; name=\\\"testEntity\\\"\\r\\n\\r\\n\" + \"{\\\"id\\\":\\\"48d31887-5fad-4d73-a9f5-3c356e68a038\\\",\\\"birthDay\\\":\\\"2017-09-04\\\",\\\"workDuration\\\":\\\"P1M\\\",\\\"startWorkTime\\\":\\\"08:00:00\\\",\\\"deviceNames\\\":[\\\"device1\\\",\\\"device2\\\"],\\\"mobilePhone\\\":null,\\\"jobTitle\\\":\\\"Author\\\",\\\"createdDateTime\\\":\\\"-999999999-01-01T00:00:00+18:00\\\",\\\"otherPhones\\\":[[\\\"device1\\\",\\\"device2\\\"]],\\\"accountEnabled\\\":false}\\r\\n\" + \"--\" + multipartBody.getBoundary() + \"--\", strResult);\r\n            }\r\n        }\r\n    }\r\n}"
          }
        }
      ]
    }
  ]
}